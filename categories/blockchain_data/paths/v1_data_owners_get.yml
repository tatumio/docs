description: "<p><b>20 credits per API call</b></p>

  <p>Get all addresses that own your favorite token (ERC-20, ERC-721 or ERC-1155)!
  Our API lets you search for all token owners on:</p>

  <ul>

  <li>Celo - celo / celo-testnet</li>

  <li>Ethereum - ethereum / ethereum-sepolia</li>

  <li>BNB (Binance) Smart Chain - bsc / bsc-testnet</li>

  <li>Polygon - polygon / polygon-mumbai</li>

  <li>Horizen EON - eon-mainnet</li>

  <li>Chiliz - chiliz-mainnet</li>

  </ul>

  <p>To get started:</p>

  <ul>

  <li>Provide a chain name and address of any fungible token, NFT or multitoken collection.
  Our API will return a list of addresses of all of their owners.</li>

  <li>You can also get an owner of a specific NFT by specifying <code>tokenId</code>.
  In case of multitoken, result is an array of addresses.</li>

  </ul>

  "
operationId: GetOwners
parameters:
  - description: The blockchain to work with.
    in: query
    name: chain
    required: true
    schema:
      $ref: "../../../components/migrated_v1.yml#/components/schemas/ChainEnum"
  - description:
      The blockchain address of the token (NFT collection or any fungible
      token).
    in: query
    name: tokenAddress
    required: true
    schema:
      $ref: "../../../components/migrated_v1.yml#/components/schemas/TokenAddress"
  - description: The ID of a specific NFT token.
    in: query
    name: tokenId
    schema:
      $ref: "../../../components/migrated_v1.yml#/components/schemas/TokenId"
  - description: The number of items per page (default is 50).
    in: query
    name: pageSize
    schema:
      $ref: "../../../components/migrated_v1.yml#/components/schemas/PageSize"
  - description: The offset to obtain next page of the data.
    in: query
    name: offset
    schema:
      $ref: "../../../components/migrated_v1.yml#/components/schemas/Offset"
responses:
  "200":
    content:
      application/json:
        schema:
          type: array
          description: List of all addresses that own a token in a specified collection.
          items:
            type: string
          example:
            - "0x0bbf9f25c863fdf19e645c96280004d24f43cb38"
            - "0x0bd1b3b12db943f2310a4e53481ae97f8b6c2a75"
            - "0x281f4727081ab4a066f321fd6fc8dd0dc063e9fd"
            - "0x681cbae1c41e5eec8411dd8e009fa71f81d03f7f"
            - "0x7b49a05c15702bbe1db534058ebcc9e950c474ca"
    description: OK
  "400":
    content:
      application/json:
        schema:
          $ref: "../../../components/migrated_v1.yml#/components/schemas/Error400"
    description:
      Bad Request. Validation failed for the given object in the HTTP Body
      or Request parameters.
  "401":
    content:
      application/json:
        schema:
          oneOf:
            - $ref: "../../../components/migrated_v1.yml#/components/schemas/Error401NotActive"
            - $ref: "../../../components/migrated_v1.yml#/components/schemas/Error401Invalid"
    description:
      Unauthorized. Not valid or inactive subscription key present in the
      HTTP Header.
  "403":
    description:
      Forbidden. The request is authenticated, but it is not possible to
      required perform operation due to logical error or invalid permissions.
    content:
      application/json:
        schema:
          $ref: "../../../components/migrated_v1.yml#/components/schemas/Error403"
  "500":
    content:
      application/json:
        schema:
          $ref: "../../../components/migrated_v1.yml#/components/schemas/Error500"
    description:
      Internal server error. There was an error on the server during the
      processing of the request.
security:
  - X-API-Key: []
x-codeSamples: []
summary: Get owners of a token
tags:
  - NFT API
