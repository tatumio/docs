description: "<p><b>100 credits per API call on Flow<br/>\n2 credits per API call\
  \ on the other blockchains</b></p>\n<p>Create multiple NFT Tokens and transfer them\
  \ to destination account. Create and transfer any NFT tokens from smart contract\
  \ defined in contractAddress.</p>\n<p>This API is supported for the following blockchains:</p>\n\
  <ul>\n<li>BNB Smart Chain</li>\n<li>Celo</li>\n<li>Ethereum</li>\n<li>Flow</li>\n\
  <li>Harmony</li>\n<li>Klaytn</li>\n<li>KuCoin Community Chain</li>\n<li>Polygon</li>\n\
  <li>TRON</li>\n</ul>\nThis operation works in two modes.\n\nFirst mode works just\
  \ like other NFT endpoints. Every time the funds are transferred, the transaction\
  \ must be signed with the corresponding private key.\nNo one should ever send it's\
  \ own private keys to the internet because there is a strong possibility of stealing\
  \ keys and loss of funds. In this method, it is possible to enter privateKey\nor\
  \ signatureId. PrivateKey should be used only for quick development on testnet versions\
  \ of blockchain when there is no risk of losing funds. In production,\n<a href=\"\
  https://github.com/tatumio/tatum-kms\" target=\"_blank\">Tatum KMS</a> should be\
  \ used for the highest security standards, and signatureId should be present in\
  \ the request.\nAlternatively, using the Tatum client library for supported languages.\n\
  \nSecond mode enables you to mint on any custom NFT ERC-721 smart contract, on which\
  \ specified minter address is approved as a minter. You don't specify private key\
  \ or signatureId, only minter address, from which the NFT will be minted.<br/>\n\
  It means you perform mint multiple NFT request with following body:\n<pre>{\n  \
  \ \"to\": [\"0x80d8bac9a6901698b3749fe336bbd1385c1f98f2\"],\n   \"url\": [\"ipfs://QmXJJ6UF5WkF4WTJvsdhiA1etGwBLfpva7Vr9AudGMe3pj\"\
  ],\n   \"tokenId\": [\"9876541124516\"],\n   \"contractAddress\":\"0xcd2ada00c48a27faa5cc67f9a1ed55b89ddf7f77\"\
  ,\n   \"minter\": \"0x542b9ac4945a3836fd12ad98acbc76a0c8b743f5\",\n   \"chain\"\
  : \"MATIC\"\n}</pre>\nThe blockchain fee of the performed transaction is paid from\
  \ the address connected with built-in private key and is debited in form of credits.\
  \ The credits are debited only if NFT mint requests are performed with paid API\
  \ key plan.\nWe transform fee to the credits in accordance to the rates provided\
  \ by the Tatum.\nIf you want to batch mint on ERC-721 contract which is not deployed\
  \ via Tatum API, your smart contract must contain this method:\n<pre>mintMultiple(address[]\
  \ to, uint256[] tokenId, string[] uri): boolean</pre>\nYou can use addresses specified\
  \ in the bellow table to be used as a minter.\n<table>\n  <tr>\n    <th>Chain</th>\n\
  \    <th>Testnet address</th>\n    <th>Mainnet Address</th>\n  </tr>\n  <tr>\n \
  \   <td>MATIC</td>\n    <td>0x542b9ac4945a3836fd12ad98acbc76a0c8b743f5</td>\n  \
  \  <td>0xcf9e127455d28e7362380aec1b92ddee8200b295</td>\n  </tr>\n  <tr>\n    <td>BSC</td>\n\
  \    <td>0xc16ae5e8c985b906935a0cadf4e24f0400531883</td>\n    <td>0xcf9e127455d28e7362380aec1b92ddee8200b295</td>\n\
  \  </tr>\n  <tr>\n    <td>ONE</td>\n    <td>0x8906f62d40293ddca77fdf6714c3f63265deddf0</td>\n\
  \    <td>0xcf9e127455d28e7362380aec1b92ddee8200b295</td>\n  </tr>\n  <tr>\n    <td>ETH</td>\n\
  \    <td>0x53e8577C4347C365E4e0DA5B57A589cB6f2AB848</td>\n    <td>0xcf9e127455d28e7362380aec1b92ddee8200b295</td>\n\
  \  </tr>\n  <tr>\n    <td>CELO</td>\n    <td>0xBC2eBA680EE50d685cc4Fe65f102AA70AfB27D3F</td>\n\
  \    <td>0xcf9e127455d28e7362380aec1b92ddee8200b295</td>\n  </tr>\n  <tr>\n    <td>KLAY</td>\n\
  \    <td>0x80d8bac9a6901698b3749fe336bbd1385c1f98f2</td>\n    <td>0xcf9e127455d28e7362380aec1b92ddee8200b295</td>\n\
  \  </tr>\n</table>\nIf there are not enough coins on any testnet address, feel free\
  \ to send coins there.</p>\n"
operationId: NftMintMultipleErc721
parameters:
- description: Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations
    for testnet API Key. For mainnet API Key, this value is ignored.
  in: header
  name: x-testnet-type
  required: false
  schema:
    default: ethereum-sepolia
    type: string
    enum:
    - ethereum-sepolia
requestBody:
  content:
    application/json:
      schema:
        oneOf:
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNftMinter'
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNft'
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNftCelo'
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNftTron'
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNftFlowPK'
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNftFlowMnemonic'
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNftKMS'
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNftKMSCelo'
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNftKMSTron'
        - $ref: '../../../components/migrated.yml#/components/schemas/MintMultipleNftFlowKMS'
  required: true
responses:
  '200':
    content:
      application/json:
        schema:
          oneOf:
          - $ref: '../../../components/migrated.yml#/components/schemas/TransactionHash'
          - $ref: '../../../components/migrated.yml#/components/schemas/FlowMintedMultipleResult'
          - $ref: '../../../components/migrated.yml#/components/schemas/SignatureId'
    description: OK
  '400':
    content:
      application/json:
        schema:
          $ref: '../../../components/migrated.yml#/components/schemas/Error400'
    description: Bad Request. Validation failed for the given object in the HTTP Body
      or Request parameters.
  '401':
    content:
      application/json:
        schema:
          oneOf:
          - $ref: '../../../components/migrated.yml#/components/schemas/Error401NotActive'
          - $ref: '../../../components/migrated.yml#/components/schemas/Error401Invalid'
    description: Unauthorized. Not valid or inactive subscription key present in the
      HTTP Header.
  '403':
    description: Forbidden. The request is authenticated, but it is not possible to
      required perform operation due to logical error or invalid permissions.
    content:
      application/json:
        schema:
          $ref: '../../../components/migrated.yml#/components/schemas/Error403'
  '500':
    content:
      application/json:
        schema:
          $ref: '../../../components/migrated.yml#/components/schemas/Error500'
    description: Internal server error. There was an error on the server during the
      processing of the request.
security:
- X-API-Key: []
x-codeSamples: []
summary: Mint multiple NFTs
tags:
- NFT (ERC-721 or compatible)
