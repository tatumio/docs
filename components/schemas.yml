info:
  title: Schemas
  version: "1.0.0"
openapi: 3.0.3
components: 
  schemas:
    Account:
      properties:
        id:
          description: The ID of the virtual account
          example: 5e68c66581f2ee32bc354087
          type: string
        balance:
          $ref: '#/components/schemas/AccountBalance'
        currency:
          description: The currency of the virtual account
          example: BTC
          type: string
        frozen:
          description: If set to "true", the virtual account is frozen
          example: false
          type: boolean
        active:
          description: If set to "true", the virtual account is active
          example: true
          type: boolean
        customerId:
          description: >-
            The ID of the customer (newly created or existing one) associated
            with the virtual account
          type: string
          example: 5e68c66581f2ee32bc354087
        accountNumber:
          description: The number associated with the virtual account in an external system
          maxLength: 50
          minLength: 1
          example: '123456'
          type: string
        accountCode:
          description: >-
            The code associated with the virtual account in an external system
            to designate the purpose of the account in bookkeeping
          example: 03_ACC_01
          type: string
        accountingCurrency:
          description: >-
            The currency in which all the transactions for all accounts will be
            accounted
          example: EUR
          type: string
        xpub:
          description: >-
            The extended public key of the blockchain wallet associated with the
            virtual account; used to generate deposit addresses for the virtual
            account
          example: >-
            xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka
          type: string
      required:
        - id
        - active
        - frozen
        - currency
        - balance
      type: object
    Deposit:
      required:
        - txId
        - address
        - timestamp
        - xpub
        - derivationKey
        - amount
        - status
        - accountId
        - currency
        - reference
        - vout
        - spent
        - blockHeight
      properties:
        txId:
          type: string
          example: 6498A3BE7313FEF32C9C0130F321D7808439F7F59D41932122383CC9E109F534
        address:
          description: Blockchain address.
          example: 7c21ed165e294db78b95f0f181086d6f
          type: string
        timestamp:
          type: number
          minimum: 0
          example: 1613654998398
          description: End interval in UTC millis.
        xpub:
          description: Extended public key to derive address from.
          example: >-
            xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka
          type: string
        derivationKey:
          description: Derivation key index for given address.
          format: int32
          type: integer
          maximum: 2147483647
        amount:
          type: string
          description: Amount of the trade
          example: '15000'
        status:
          type: string
          example: Done
          description: Status of deposit
          enum:
            - InProgress
            - Done
            - Failed
        accountId:
          description: Account ID.
          example: 5e68c66581f2ee32bc354087
          type: string
        currency:
          type: string
          example: BTC
          description: Currency
        reference:
          type: string
          example: some reference
        vout:
          type: number
          example: 0
        spent:
          type: boolean
        blockHeight:
          type: number
          minimum: 0
          description: Block of deposit
          example: 228232166
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: '0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137'
        from:
          description: Blockchain address.
          example: 7c21ed165e294db78b95f0f181086d6f
          type: string
    EntitiesCount:
      type: object
      properties:
        total:
          description: Total entities
          example: 20
          type: number
    ChartRequest:
      type: object
      required:
        - pair
        - from
        - to
        - timeFrame
      properties:
        pair:
          type: string
          description: Trading pair
          example: BTC/EUR
          minLength: 3
          maxLength: 30
          pattern: ^[A-a-zZ0-9_\-]+\/[A-Za-z0-9_\-]+$
        from:
          type: number
          minimum: 0
          example: 1613654998398
          description: Start interval in UTC millis.
        to:
          type: number
          minimum: 0
          example: 1613654998398
          description: End interval in UTC millis.
        timeFrame:
          type: string
          example: MIN_5
          description: Time frame of the chart.
          enum:
            - MIN_1
            - MIN_3
            - MIN_5
            - MIN_15
            - MIN_30
            - HOUR_1
            - HOUR_4
            - HOUR_12
            - DAY
            - WEEK
            - MONTH
            - YEAR
    Chart:
      type: object
      description: >-
        1 point in the chart. This point represents the tick in the grapch based
        on the specified time frame.
      required:
        - timestamp
        - high
        - low
        - open
        - close
        - volume
      properties:
        timestamp:
          type: number
          description: Milliseconds in UTC of the time interval.
          example: 1613654117167
        high:
          type: string
          description: Highest trade value in the current interval.
          example: '54213.21'
        low:
          type: string
          description: Lowest trade value in the current interval.
          example: '53213.54'
        open:
          type: string
          description: Open trade value in the current interval.
          example: '53513'
        close:
          type: string
          description: Close trade value in the current interval.
          example: '54113'
        volume:
          type: string
          description: >-
            Total volume of assets traded in the current interval. Volume is in
            currency1 asset.
          example: '2.423'
    AccountBalance:
      properties:
        accountBalance:
          description: All assets on the account, both available and blocked
          example: '1000000'
          type: string
        availableBalance:
          description: >-
            The account balance minus the blocked assets; use the available
            balance to determine how much a customer can send or withdraw from
            their virtual account
          example: '1000000'
          type: string
      type: object
      required:
        - accountBalance
        - availableBalance
    Subscription:
      type: object
      required:
        - type
        - id
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: ACCOUNT_BALANCE_LIMIT
          enum:
            - ADDRESS_TRANSACTION
            - CONTRACT_LOG_EVENT
            - ACCOUNT_INCOMING_BLOCKCHAIN_TRANSACTION
            - ACCOUNT_PENDING_BLOCKCHAIN_TRANSACTION
            - CUSTOMER_TRADE_MATCH
            - CUSTOMER_PARTIAL_TRADE_MATCH
            - TRANSACTION_IN_THE_BLOCK
            - KMS_FAILED_TX
            - KMS_COMPLETED_TX
            - ACCOUNT_BALANCE_LIMIT
            - TRANSACTION_HISTORY_REPORT
        id:
          type: string
          description: ID of the subscription
          example: 7c21ed165e294db78b95f0f1
        attr:
          type: object
          description: Additional attributes based on the subscription type.
    WebHook:
      type: object
      required:
        - id
        - type
        - subscriptionId
        - url
        - data
        - failed
        - response
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: ACCOUNT_BALANCE_LIMIT
          enum:
            - INCOMING_BLOCKCHAIN_HOOK
            - ADDRESS_TRANSACTION
            - CONTRACT_LOG_EVENT
            - TRADE_MATCH
            - TRADE_PARTIAL_FILL
            - PENDING_BLOCKCHAIN_HOOK
            - TRANSACTION_IN_THE_BLOCK
            - KMS_FAILED_TX
            - KMS_COMPLETED_TX
        id:
          type: string
          description: ID of the WebHook
          example: 7c21ed165e294db78b95f0f1
        subscriptionId:
          type: string
          description: ID of the subscription
          example: 7c21ed165e294db78b95f0f1
        url:
          type: string
          description: ID of the subscription
          example: http://some-host.net/webhook
        data:
          type: object
          description: Data of webhook
        nextTime:
          type: number
          description: Next webhook execution try time
          example: 1653320900353
        timestamp:
          type: number
          description: Webhook execution time
          example: 1653320900353
        retryCount:
          type: number
          description: Number
          example: 3
        failed:
          type: boolean
          description: Flag indicating whether this webhook was successful or not
          example: false
        response:
          type: object
          description: Response from the server in case the webhook was unsuccessful
          required:
            - networkError
          properties:
            code:
              type: number
              description: HTTP Status
              example: 500
            data:
              type: string
              description: Response from the server
              example: Internal server error
            networkError:
              type: boolean
              description: Flag indicating whether an error has been caused by the network
              example: false
    CreateSubscriptionBalance:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: ACCOUNT_BALANCE_LIMIT
          enum:
            - ACCOUNT_BALANCE_LIMIT
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - limit
            - typeOfBalance
          properties:
            limit:
              type: string
              description: Limit to filter accounts with balance above it.
              example: '15000'
              pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
              maxLength: 38
            typeOfBalance:
              type: string
              description: Type of balance to filter.
              enum:
                - account
                - available
    CreateSubscriptionInterval:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: TRANSACTION_HISTORY_REPORT
          enum:
            - TRANSACTION_HISTORY_REPORT
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - interval
          properties:
            interval:
              type: number
              description: Number of hours to obtain transactions for.
              example: 1
              minimum: 1
              maximum: 720
    CreateSubscriptionIncoming:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: ACCOUNT_INCOMING_BLOCKCHAIN_TRANSACTION
          enum:
            - ACCOUNT_INCOMING_BLOCKCHAIN_TRANSACTION
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - id
            - url
          properties:
            id:
              description: >-
                ID of the account, on which the webhook will be applied, when
                new incoming blockchain transaction will be credited.
              example: 5e6be8e9e6aa436299950c41
              maxLength: 24
              minLength: 24
              type: string
            url:
              type: string
              description: >-
                URL of the endpoint, where HTTP POST request will be sent, when
                new incoming blockchain transaction will be credited.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    CreateSubscriptionNotification:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: ADDRESS_TRANSACTION
          enum:
            - ADDRESS_TRANSACTION
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - chain
            - address
            - url
          properties:
            address:
              description: Blockchain address to watch.
              example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
              maxLength: 128
              minLength: 13
              type: string
            chain:
              description: Blockchain of the address.
              example: SOL
              type: string
              enum:
                - SOL
                - ETH
                - MATIC
                - CELO
                - KLAY
                - BTC
                - LTC
                - BCH
                - DOGE
                - TRON
                - BSC
            url:
              type: string
              description: >-
                URL of the endpoint, where HTTP POST request will be sent, when
                transaction is detected on the address.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    CreateSubscriptionContractLogEvent:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: CONTRACT_LOG_EVENT
          enum:
            - CONTRACT_LOG_EVENT
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - chain
            - event
            - url
          properties:
            event:
              description: >-
                Hexadecimal data representing the event emitted from the smart
                contract; represents "topic[0]" from the event log.
              example: >-
                0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
              maxLength: 66
              minLength: 66
              type: string
            chain:
              description: The blockchain on which events should be monitored.
              example: MATIC
              type: string
              enum:
                - ETH
                - MATIC
                - CELO
                - KLAY
                - BSC
            url:
              type: string
              description: >-
                The URL of the endpoint where an HTTP POST request will be sent
                when the block where the events from the smart contracts are
                reflected gets completed.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    CreateSubscriptionMultiTokenTransferEvent:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: CONTRACT_MULTITOKEN_TXS_PER_BLOCK
          enum:
            - CONTRACT_MULTITOKEN_TXS_PER_BLOCK
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - chain
            - url
          properties:
            chain:
              description: The blockchain on which events should be monitored.
              example: MATIC
              type: string
              enum:
                - ETH
                - MATIC
                - CELO
                - KLAY
                - BSC
            url:
              type: string
              description: >-
                The URL of the endpoint where an HTTP POST request will be sent
                when the block where the events from the smart contracts are
                reflected gets completed.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    CreateSubscriptionNftTransferEvent:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: CONTRACT_NFT_TXS_PER_BLOCK
          enum:
            - CONTRACT_NFT_TXS_PER_BLOCK
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - chain
            - url
          properties:
            chain:
              description: The blockchain on which events should be monitored.
              example: MATIC
              type: string
              enum:
                - ETH
                - MATIC
                - CELO
                - KLAY
                - BSC
            url:
              type: string
              description: >-
                The URL of the endpoint where an HTTP POST request will be sent
                when the block where the events from the smart contracts are
                reflected gets completed.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    CreateSubscriptionTradeMatch:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: CUSTOMER_TRADE_MATCH
          enum:
            - CUSTOMER_TRADE_MATCH
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - id
            - url
          properties:
            id:
              description: >-
                ID of the customer, on which the webhook will be applied, when
                on any of his accounts trade will be matched and closed.
              example: 5e6be8e9e6aa436299950c41
              maxLength: 24
              minLength: 24
              type: string
            url:
              type: string
              description: >-
                URL of the endpoint, where HTTP POST request will be sent, when
                on any of his accounts trade will be matched and closed.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    CreateSubscriptionPartialTradeMatch:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: CUSTOMER_PARTIAL_TRADE_MATCH
          enum:
            - CUSTOMER_PARTIAL_TRADE_MATCH
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - id
            - url
          properties:
            id:
              description: >-
                ID of the customer, on which the webhook will be applied, when
                on any of his accounts trade will be matched and closed.
              example: 5e6be8e9e6aa436299950c41
              maxLength: 24
              minLength: 24
              type: string
            url:
              type: string
              description: >-
                URL of the endpoint, where HTTP POST request will be sent, when
                on any of his accounts trade will be matched and closed.
              example: https://webhook.tatum.io/trade
              maxLength: 500
    CreateSubscriptionKMSError:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: KMS_FAILED_TX
          enum:
            - KMS_FAILED_TX
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - url
          properties:
            url:
              type: string
              description: >-
                URL of the endpoint, where HTTP POST request will be sent, when
                error occurs inside Tatum KMS.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    CreateSubscriptionKMSSuccess:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: KMS_COMPLETED_TX
          enum:
            - KMS_COMPLETED_TX
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - url
          properties:
            url:
              type: string
              description: >-
                URL of the endpoint, where HTTP POST request will be sent, when
                tx is sucessfully broadcasted using Tatum KMS.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    CreateSubscriptionTxInTheBlock:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: TRANSACTION_IN_THE_BLOCK
          enum:
            - TRANSACTION_IN_THE_BLOCK
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - url
          properties:
            url:
              type: string
              description: >-
                URL of the endpoint, where HTTP POST request will be sent, when
                outgoing ledger transaction is included in the block.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    CreateSubscriptionPending:
      type: object
      required:
        - type
        - attr
      properties:
        type:
          type: string
          description: Type of the subscription.
          example: ACCOUNT_PENDING_BLOCKCHAIN_TRANSACTION
          enum:
            - ACCOUNT_PENDING_BLOCKCHAIN_TRANSACTION
        attr:
          type: object
          description: Additional attributes based on the subscription type.
          required:
            - id
            - url
          properties:
            id:
              description: >-
                ID of the account, on which the webhook will be applied, when
                new incoming pending blockchain transaction with 0 confirmations
                will be credited.
              example: 5e6be8e9e6aa436299950c41
              maxLength: 24
              minLength: 24
              type: string
            url:
              type: string
              description: >-
                URL of the endpoint, where HTTP POST request will be sent, when
                new incoming pending blockchain transaction with 0 confirmations
                will be credited.
              example: https://dashboard.tatum.io/webhook-handler
              maxLength: 500
    OffchainAddresses:
      type: object
      required:
        - addresses
      properties:
        addresses:
          type: array
          items:
            type: object
            required:
              - accountId
            properties:
              accountId:
                description: >-
                  ID of the account, for which blockchain address will be
                  created.
                example: 5e6be8e9e6aa436299950c41
                maxLength: 24
                minLength: 24
                type: string
              derivationKey:
                description: >-
                  Derivation key index for given address to generate. If not
                  present, first not used address will be created.
                format: int32
                type: integer
                minimum: 0
                maximum: 2147483647
    Address:
      required:
        - address
        - currency
      properties:
        address:
          description: Blockchain address.
          example: 7c21ed165e294db78b95f0f181086d6f
          type: string
        currency:
          description: >-
            Currency of generated address. BTC, LTC, DOGE, BCH, ETH, XRP, XLM,
            BNB, TRX, ERC20, TRC20.
          example: BTC
          type: string
        derivationKey:
          description: Derivation key index for given address.
          format: int32
          type: integer
          maximum: 2147483647
        xpub:
          description: >-
            Extended public key to derive address from. In case of XRP, this is
            account address, since address is defined as DestinationTag, which
            is address field. In case of XLM, this is account address, since
            address is defined as message, which is address field.
          example: >-
            xpub6FB4LJzdKNkkpsjggFAGS2p34G48pqjtmSktmK2Ke3k1LKqm9ULsg8bGfDakYUrdhe2EHw5uGKX9DrMbrgYnVfDwrksT4ZVQ3vmgEruo3Ka
          type: string
        destinationTag:
          description: In case of XRP, destinationTag is the distinguisher of the account.
          type: number
          example: 5
        memo:
          description: In case of BNB, message is the distinguisher of the account.
          type: string
          example: '5'
        message:
          description: In case of XLM, message is the distinguisher of the account.
          type: string
          example: '5'
      type: object
    Trade:
      type: object
      properties:
        id:
          type: string
          description: ID of the trade
          example: 7c21ed165e294db78b95f0f1
        type:
          type: string
          description: Type of the trade, BUY or SELL
          example: BUY
          enum:
            - BUY
            - SELL
        price:
          type: string
          description: Price to buy / sell
          example: '8650.4'
        amount:
          type: string
          description: Amount of the trade to be bought / sold
          example: '15000'
        pair:
          type: string
          description: Trading pair
          example: BTC/EUR
        isMaker:
          type: boolean
          description: If closed trade was Maker or Taker trade
          example: true
        fill:
          type: string
          description: How much of the trade was already filled.
          example: '1500'
        feeAccountId:
          type: string
          description: >-
            ID of the account where fee will be paid, if any. If trade is a BUY
            or FUTURE_BUY type, feeAccountId must have same currency as a
            currency of currency2AccountId, and vice versa if trade is a SELL or
            FUTURE_SELL type, feeAccountId must have same currency as a currency
            of currency1AccountId.
          example: 7c21ed165e294db78b95f0f1
          minLength: 24
          maxLength: 24
        fee:
          type: number
          description: Percentage of the trade amount to be paid as a fee.
          example: 1.5
          minimum: 0
          maximum: 100
        currency1AccountId:
          type: string
          description: ID of the account of the currenc 1 trade currency
          example: 7c21ed165e294db78b95f0f1
        currency2AccountId:
          type: string
          description: ID of the account of the currenc 2 trade currency
          example: 7c21ed165e294db78b95f0f1
        created:
          type: number
          description: Creation date, UTC millis
          example: 1585170363103
        attr:
          type: object
          description: Additional attributes for the future type.
          required:
            - sealDate
          properties:
            sealDate:
              type: number
              description: Time in UTC when the future will be filled.
              example: 1572031674384
              minimum: 0
            percentBlock:
              description: >-
                Percentage of the future amount which the selling or buying
                account must have available for the future’s creation. This
                amount will be blocked until the future is filled or expires.
              type: number
              example: 1.5
              minimum: 0
              maximum: 100
            percentPenalty:
              description: >-
                If one of the parties doesn’t have the full amount of the future
                at the time of expiration filled, the party will be penalized.
              type: number
              example: 1.5
              minimum: 0
              maximum: 100
    CreateTrade:
      type: object
      required:
        - type
        - price
        - amount
        - pair
        - currency1AccountId
        - currency2AccountId
      properties:
        type:
          type: string
          description: Type of the regular trade, BUY, SELL
          example: BUY
          enum:
            - BUY
            - SELL
        price:
          type: string
          description: Price to buy / sell
          example: '8650.4'
          maxLength: 38
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        amount:
          type: string
          description: Amount of the trade to be bought / sold
          example: '15000'
          maxLength: 38
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        pair:
          type: string
          description: Trading pair
          example: BTC/EUR
          minLength: 3
          maxLength: 30
          pattern: ^[A-a-zZ0-9_\-]+\/[A-Za-z0-9_\-]+$
        currency1AccountId:
          type: string
          description: ID of the account of the currency 1 trade currency
          example: 7c21ed165e294db78b95f0f1
          minLength: 24
          maxLength: 24
        currency2AccountId:
          type: string
          description: ID of the account of the currency 2 trade currency
          example: 7c21ed165e294db78b95f0f1
          minLength: 24
          maxLength: 24
        feeAccountId:
          type: string
          description: >-
            ID of the account where fee will be paid, if any. If trade is a BUY
            or FUTURE_BUY type, feeAccountId must have same currency as a
            currency of currency2AccountId, and vice versa if trade is a SELL or
            FUTURE_SELL type, feeAccountId must have same currency as a currency
            of currency1AccountId.
          example: 7c21ed165e294db78b95f0f1
          minLength: 24
          maxLength: 24
        fee:
          type: number
          description: Percentage of the trade amount to be paid as a fee.
          example: 1.5
          minimum: 0
          maximum: 100
    CreateFutureTrade:
      type: object
      required:
        - type
        - price
        - amount
        - pair
        - currency1AccountId
        - currency2AccountId
        - attr
      properties:
        type:
          type: string
          description: Type of future the trade, FUTURE_BUY, FUTURE_SELL
          example: BUY
          enum:
            - FUTURE_BUY
            - FUTURE_SELL
        price:
          type: string
          description: Price to buy / sell
          example: '8650.4'
          maxLength: 38
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        amount:
          type: string
          description: Amount of the trade to be bought / sold
          example: '15000'
          maxLength: 38
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        pair:
          type: string
          description: Trading pair
          example: BTC/EUR
          minLength: 3
          maxLength: 30
          pattern: ^[A-a-zZ0-9_\-]+\/[A-Za-z0-9_\-]+$
        currency1AccountId:
          type: string
          description: ID of the account of the currency 1 trade currency
          example: 7c21ed165e294db78b95f0f1
          minLength: 24
          maxLength: 24
        currency2AccountId:
          type: string
          description: ID of the account of the currency 2 trade currency
          example: 7c21ed165e294db78b95f0f1
          minLength: 24
          maxLength: 24
        feeAccountId:
          type: string
          description: >-
            ID of the account where fee will be paid, if any. If trade is a BUY
            or FUTURE_BUY type, feeAccountId must have same currency as a
            currency of currency2AccountId, and vice versa if trade is a SELL or
            FUTURE_SELL type, feeAccountId must have same currency as a currency
            of currency1AccountId.
          example: 7c21ed165e294db78b95f0f1
          minLength: 24
          maxLength: 24
        fee:
          type: number
          description: Percentage of the trade amount to be paid as a fee.
          example: 1.5
          minimum: 0
          maximum: 100
        attr:
          type: object
          description: Additional attributes for the future type.
          required:
            - sealDate
          properties:
            sealDate:
              type: number
              description: Time in UTC when the future will be filled.
              example: 1572031674384
              minimum: 0
            percentBlock:
              description: >-
                Percentage of the future amount which selling or buying account
                must have available on future creation. This amount will be
                blocked till future is filled or expires.
              example: 1.5
              minimum: 0
              maximum: 100
            percentPenalty:
              description: >-
                If one of the parties dont have filled full amount of the future
                at the time of expiration, the party will be penalized. Penalty
                is sent to opposite party in exchanged crypto.
              example: 1.5
              minimum: 0
              maximum: 100
    BnbBlock:
      type: object
      properties:
        timestamp:
          type: number
          example: 1651145988650
        blockHeight:
          type: number
          example: 44925860
        tx:
          type: array
          items:
            $ref: '#/components/schemas/BnbTransaction'
    BnbTransaction:
      type: object
      properties:
        txHash:
          type: string
          example: 4B944BBF78F3ADE3A377551B5EA7AD0FEDBDA13165D932F94B106EF7A8E16C1A
        blockHeight:
          type: number
          example: 44925860
        txType:
          type: string
          example: TRANSFER
        timeStamp:
          type: string
          example: '2019-10-17T18:58:01.423Z'
        fromAddr:
          type: string
          example: tbnb138u9djee6fwphhd2a3628q2h0j5w97yx48zqex
        toAddr:
          type: string
          example: tbnb14wu3a8pmauj2kjswyvxtvhdrjktx60efq227uw
        value:
          type: string
          example: '200.00000000'
        txAsset:
          type: string
          example: BNB
        txFee:
          type: string
          example: '0.00037500'
        code:
          type: number
          example: 0
        memo:
          type: string
          example: ''
        source:
          type: number
          example: 0
        sequence:
          type: number
    BnbTx:
      type: object
      properties:
        code:
          type: number
          example: 0
        hash:
          type: string
          example: 4B944BBF78F3ADE3A377551B5EA7AD0FEDBDA13165D932F94B106EF7A8E16C1A
        height:
          type: string
          example: '44925860'
        log:
          type: string
          example: 'Msg 0: '
        ok:
          type: boolean
          example: true
        tx:
          properties:
            type:
              type: string
              example: auth/StdTx
            value:
              properties:
                memo:
                  type: string
                  example: ''
                msg:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        example: cosmos-sdk/Send
                      value:
                        properties:
                          inputs:
                            description: >-
                              List of transactions, from which assets are being
                              sent.
                            type: array
                            items:
                              type: object
                              properties:
                                address:
                                  type: string
                                  example: tbnb138u9djee6fwphhd2a3628q2h0j5w97yx48zqex
                                coins:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      amount:
                                        type: string
                                        example: '20000000000'
                                      denom:
                                        type: string
                                        example: BNB
                          outputs:
                            description: >-
                              List of recipient addresses and amounts to send to
                              each of them.
                            type: array
                            items:
                              type: object
                              properties:
                                address:
                                  type: string
                                  example: tbnb14wu3a8pmauj2kjswyvxtvhdrjktx60efq227uw
                                coins:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      amount:
                                        type: string
                                        example: '20000000000'
                                      denom:
                                        type: string
                                        example: BNB
                        type: object
                signatures:
                  type: array
                  items:
                    type: object
                    properties:
                      account_number:
                        type: string
                        example: '14'
                      pub_key:
                        properties:
                          type:
                            type: string
                            example: tendermint/PubKeySecp256k1
                          value:
                            type: string
                            example: A4q95eEn4cR1bbxVRqYc8pbLvKYyaMxjzaTSmkTJQUr6
                        type: object
                      sequence:
                        type: string
                        example: '47816'
                      signature:
                        type: string
                        example: >-
                          VhewxOCPucjrtrpRbQMbl05i5MyJMrw12nUJ4ATssB1qvCqIO2+Fgqa/WTHaYpkhjJuIbpK620e0zpIQ56a5nw==
                source:
                  type: string
                  example: '0'
              type: object
          type: object
    BnbTxInAccount:
      type: object
      properties:
        total:
          type: number
          example: 10
        tx:
          type: array
          items:
            $ref: '#/components/schemas/BnbTransaction'
    BnbAccount:
      type: object
      properties:
        account_number:
          type: number
          example: 696215
        address:
          type: string
          example: tbnb185tqzq3j6y7yep85lncaz9qeectjxqe5054cgn
        balances:
          type: array
          items:
            type: object
            properties:
              free:
                type: string
                example: '207.00000000'
              frozen:
                type: string
                example: '0.00000000'
              locked:
                type: string
                example: '0.00000000'
              symbol:
                type: string
                example: BNB
        flags:
          type: number
          example: 0
        sequence:
          type: number
          example: 0
    BtcBlockHash:
      type: object
      properties:
        hash:
          type: string
          description: Block hash
          example: 0000000053f225e202cf27fe3046e06719efd3b31b5ab75fc5ef7f853c8b246f
    BtcBlock:
      type: object
      properties:
        hash:
          type: string
          description: Hash of block.
          example: 00000000ca231a439a5c0a86a5a5dd6dc1918a8e897b96522fa9499288e70183
        height:
          description: The number of blocks preceding a particular block on a block chain.
          type: number
          example: 15235
        depth:
          description: >-
            The number of blocks following a particular block on a block chain,
            including current one.
          type: number
          example: 1567867
        version:
          type: number
          description: Block version.
          example: 1
        prevBlock:
          type: string
          description: Hash of the previous block.
          example: 000000006e79360d7b2519410fe5a73e8e08393fd7166620c73c711e4507d9fd
        merkleRoot:
          type: string
          description: >-
            The root node of a merkle tree, a descendant of all the hashed pairs
            in the tree.
          example: 480c227c5042377dbd54464d33e1f59c19fe02fe76d7f55b6955db438479aece
        time:
          type: number
          description: Time of the block.
          example: 1338861927
        bits:
          type: number
          example: 486604799
        nonce:
          type: number
          description: >-
            Arbitrary number that is used in Bitcoin's proof of work consensus
            algorithm.
          example: 1193572362
        txs:
          type: array
          items:
            $ref: '#/components/schemas/BtcTx'
    BtcInfo:
      type: object
      properties:
        chain:
          type: string
          description: Chain of the blockchain, main or test.
          example: test
        blocks:
          type: number
          description: Last block.
          example: 1579820
        headers:
          type: number
          description: Last headers.
          example: 1579820
        bestblockhash:
          description: Hash of the last block.
          type: string
          example: 0000000000000106e4c03ca093ce0cf77e796ddff4f3cadc59ca6b0380e3eed4
        difficulty:
          type: number
          description: Difficulty of the algorithm.
          example: 6522714.521250089
    BtcBasedBalance:
      type: object
      properties:
        incoming:
          type: string
          description: >-
            Total sum of the assets that arrives to the address. Both confirmed
            transactions in the block and pending in the mempool are used for
            calculating this value.
          example: '0.1234'
        outgoing:
          type: string
          description: >-
            Total sum of the assets that leaves from the address. Both confirmed
            transactions in the block and pending in the mempool are used for
            calculating this value.
          example: '0.1'
        incomingPending:
          type: string
          description: >-
            Total sum of the assets that arrives to the address and are pending
            in the mempool.
          example: '0.0004'
        outgoingPending:
          type: string
          description: >-
            Total sum of the assets that leaves from the address and are pending
            in the mempool.
          example: '0.05'
    BtcTx:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash.
          example: 4c7846a8ff8415945e96937dea27bdb3144c15d793648d725602784826052586
        hex:
          type: string
          description: Transaction hex.
          example: >-
            020000000001072840e4f49e088d9ab233f6209aede5d91c44ecb59f490dbf289e7ef5028bc6aa0000000000ffffffffada5ca08d78992fac3bd48e1ac197c2b4bbd98b349d706ba7dd38c7c3dceed940000000000ffffffff0265691f1374c79a164186b6290a6bdf785561dcf5e3c155599dbaa646e2f06e0000000000ffffffff4f0b53ff85e10ff33c3cf95a1b650729c83b75d6b894d8224b40ca00b944a3ff0000000000ffffffff30aa398d22fd3b60534389c926093863d560eaeca4c6f85454b5fa0222f96db30000000000ffffffff9c02daa47a879222fc7e9d3c0ec7158d4853d3cc4a4465001412e5fc0371e7470100000000ffffffff78bdc156966a07d09f9bdb45ccb2e21765657f806b7e2ab7b7bb9dad5d5b5bc30000000000ffffffff010c2845000000000016001490a446c7f165cfd99dd5dd87a6bb83a17fd9e9f1024730440220384fa3d7935db56a637cf6c662dfc6990957e2838afa5db29e7569c996ba24930220567d4ed8ec36a940d871bc26d292656690e55bd10567c823af2c6ffab9a7868f012103ccb40d87b4e847b970a9dd23c3d5078964213cf6a78257796d801316bb7bb60c0247304402206b6db0dd0dd158835618613b952056327113374a8dec6be5f41c41a8ce552fe2022027c356009488123c27c98aa66080f6898484b7c098dc366540be8f6935feeefe012103ccb40d87b4e847b970a9dd23c3d5078964213cf6a78257796d801316bb7bb60c0247304402200baf8a00f9f767cc83c35e3a29a03a4f054c886fc07828481b83ae858eb5853902202f6d82ef65f64ac5db1db947aa03e1ed5f3b19710cf4c3e4448cd5a7f25277df012103ccb40d87b4e847b970a9dd23c3d5078964213cf6a78257796d801316bb7bb60c02483045022100b7d574102ede6a4d556269129592faa8f7ff54ca846c2516804811e06aca380202206a0e519a911e3fe130f1d446f5fd16b951fd25136b2f9b2980dd9eefe4f3a860012103ccb40d87b4e847b970a9dd23c3d5078964213cf6a78257796d801316bb7bb60c02473044022008548dc3eff2713011d3fad3e661918f51cd4a3b688f90326f5febf4dbb34c8f0220245e37520b501a7c429f9428c4892034d398c8198006fedd9fdb45790c8d0d23012103ccb40d87b4e847b970a9dd23c3d5078964213cf6a78257796d801316bb7bb60c02473044022044bd3552b24b49b2c9bc2acee7a8d587407070cb80e7c65cdefff78fe7df0f99022067581ae9d54d2fdedb9bcf69c2281830e165f9df631f6c889f98dfb7c1e4a78a012103ccb40d87b4e847b970a9dd23c3d5078964213cf6a78257796d801316bb7bb60c02483045022100a141642697ba55407e4d6d2b6d3d1b2f93d5126794e77028c00307835a4c71ce02202658200b9d779d0f6f169bdd27dc81cbbb10718e57754349e57e020ea6bf5cfb012103ccb40d87b4e847b970a9dd23c3d5078964213cf6a78257796d801316bb7bb60c00000000
        witnessHash:
          type: string
          description: Witness hash in case of a SegWit transaction.
          example: 4c7846a8ff8415945e96937dea27bdb3144c15d793648d725602784826052586
        fee:
          type: number
          description: Fee paid for this transaction, in satoshis.
          example: 4540
        rate:
          type: number
          example: 20088
        mtime:
          type: number
          example: 1575663337
        blockNumber:
          type: number
          description: Height of the block this transaction belongs to.
          example: 1611609
        block:
          type: string
          description: Hash of the block this transaction belongs to.
          example: 00000000000001e13fe1eb3977f3379e3d0f6577fc6e087d27db46597ebddb8b
        time:
          type: number
          description: Time of the transaction.
          example: 1575663091
        index:
          type: number
          description: Index of the transaction in the block.
          example: 1
        version:
          type: number
          description: Index of the transaction.
          example: 2
        inputs:
          description: List of transactions, from which assets are being sent.
          type: array
          items:
            $ref: '#/components/schemas/BtcTxInput'
        outputs:
          type: array
          description: List of recipient addresses and amounts to send to each of them.
          items:
            $ref: '#/components/schemas/BtcTxOutput'
        locktime:
          type: number
          description: Block this transaction was included in.
          example: 1611608
    BtcTxOutput:
      type: object
      properties:
        value:
          type: number
          description: Sent amount in satoshis.
          example: 2068942
        script:
          type: string
          description: Transaction script.
          example: a914eaf2ad7e161c3ce7092bde14dc5842b642fe925187
        address:
          type: string
          description: Recipient address.
          example: 2NEfWpiQwLEcHGbX2Fwij16NDxTEZwHk4BH
    BtcTxInput:
      type: object
      properties:
        prevout:
          $ref: '#/components/schemas/BtcTxInputPrevOut'
        script:
          type: string
          description: >-
            Data generated by a spender which is almost always used as variables
            to satisfy a pubkey script.
          example: 1600148c65244f095f3689aebb70981d102e33036fe786
        witness:
          type: string
          description: Transaction witness.
          example: >-
            0247304402207d7af97665ef5502c957f76a9fcdde2c228b6a8dc9951d45c318e6dfca0fcd2802207519528d6b61cc044800ab2cb499ef5f31d4decdc327c14fad4abbc3dd6e0190012102861d682cfd3bec8cbed98f5162299ba613bc5f352dd0d51961a5d81359fbc0af
        sequence:
          type: number
          example: 4294967294
        coin:
          $ref: '#/components/schemas/BtcTxInputCoin'
    BtcTxInputCoin:
      properties:
        version:
          type: number
          example: 2
        blockNumber:
          type: number
          example: 1611608
        value:
          type: number
          description: >-
            Amount of the transaction, in Satoshis (1 BTC = 100 000 000
            Satoshis)
          example: 1341956178
        script:
          type: string
          example: 0014049a97d91d4e1123899bf48c5ba6ce3fd959664e
        address:
          type: string
          description: Sender address.
          example: tb1qqjdf0kgafcgj8zvm7jx9hfkw8lv4jejw6wsmjg
        coinbase:
          type: boolean
          description: Coinbase transaction - miner fee.
          example: false
      type: object
    BtcTxInputPrevOut:
      properties:
        hash:
          type: string
          description: Transaction hash of the input.
          example: 60bc8445c11318e45a72a3259e65118d2f352568757e6ceb8bf1b527ce68379f
        index:
          type: number
          description: Transaction index of the input.
          example: 1
      type: object
    BtcUTXO:
      type: object
      properties:
        version:
          type: number
          description: The version of the transaction
          example: 1
        height:
          type: number
          description: >-
            The height (number) of the block where the transaction is included
            in
          example: 210000
        value:
          type: number
          description: The amount of the UTXO (in satoshis)
          example: 30000000
        script:
          type: string
          description: >-
            Data generated by the spender; is almost always used as variables to
            satisfy the conditions in the pubkey script
          example: 76a91400ba915c3d18907b79e6cfcd8b9fdf69edc7a7db88ac
        address:
          type: string
          description: The blockchain address of the UTXO owner
          example: R9M3aUWCcKoiqDPusJvqNkAbjffLgCqYip
        coinbase:
          type: boolean
          description: >-
            If set to "true", the transaction is a coinbase transaction (a
            transaction created by a Bitcoin miner to collect their reward)
          example: false
        hash:
          type: string
          description: The hash of the transaction
          example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
        index:
          type: number
          description: The index of the transaction output checked for the UTXO
          example: 0
    FeeAndChange:
      type: object
      required:
        - changeAddress
      properties:
        changeAddress:
          description: Address, where unspent funds will be transferred.
          type: string
          example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
          minimum: 30
          maximum: 110
        fee:
          type: string
          description: Fee to be paid.
          example: '0.5'
    AdaTransactionFromAddress:
      type: object
      required:
        - to
        - fromAddress
        - fee
        - changeAddress
      properties:
        fromAddress:
          description: >-
            The array of blockchain addresses to send the assets from and their
            private keys. For each address, the last 100 transactions are
            scanned for any UTXO to be included in the transaction.
          type: array
          items:
            type: object
            required:
              - address
              - privateKey
            properties:
              address:
                description: The blockchain address to send the assets from
                type: string
                example: >-
                  addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
                minimum: 30
                maximum: 128
              privateKey:
                description: The private key of the address to send the assets from
                type: string
                minimum: 52
                maximum: 128
                example: >-
                  38b75ee2a29049817b28633d700ea56602f87992bd4d78446053183d4374965622c5a90c347131936f2f317ae3e9416fbfed21096577cd9adbcff311e9680334
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in ADA). The difference
            between the UTXOs calculated in the <code>fromAddress</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: >-
                  addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
                minimum: 30
                maximum: 128
              value:
                description: The amount to receive (in ADA)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: number
          description: The fee to be paid for the transaction (in ADA).
          example: 0.0015
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee to.
          type: string
          example: addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
          minimum: 30
          maximum: 128
    AdaTransactionFromUTXO:
      type: object
      required:
        - to
        - fromUTXO
        - fee
        - changeAddress
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            private keys of the associated blockchain addresses
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - address
              - amount
              - privateKey
            properties:
              txHash:
                description: The transaction hash of the UTXO to be spent
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: The index of the UTXO to be spent
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              amount:
                description: The amount of the UTXO to be spent, in ADA
                type: number
                example: 0
                minimum: 0
                maximum: 1.652
              privateKey:
                description: >-
                  The private key of the blockchain address that holds the UTXO
                  to be spent
                type: string
                example: >-
                  8873d5e84af86978f03b63d9ffc9c6f940bd8501d32e91980c904e8d81c305507dc95992faa5aefccb263b28b411eda2dde7882d922742663804a69d78182e34
                minLength: 128
                maxLength: 128
              address:
                description: The address that holds the UTXO to be spent
                type: string
                example: >-
                  addr_test1vzfp68vn36ze5yz7x7evracmasuptjmz99qk4j23gun3pcqhlevq5
                minLength: 0
                maxLength: 128
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in ADA). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: >-
                  addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
                minimum: 30
                maximum: 128
              value:
                description: The amount to receive (in ADA)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: number
          description: The fee to be paid for the transaction (in ADA).
          example: 0.0015
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee
          type: string
          example: addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
          minimum: 30
          maximum: 128
    AdaTransactionFromAddressKMS:
      type: object
      required:
        - to
        - fromAddress
        - fee
        - changeAddress
      properties:
        fromAddress:
          description: >-
            The array of blockchain addresses to send the assets from and their
            signature IDs. For each address, the last 100 transactions are
            scanned for any UTXO to be included in the transaction.
          type: array
          items:
            type: object
            required:
              - address
              - signatureId
            properties:
              address:
                description: The blockchain address to send the assets from
                type: string
                example: >-
                  addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
                minimum: 30
                maximum: 128
              signatureId:
                type: string
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: >-
                  The KMS identifier of the private key of the address to send
                  the assets from
              index:
                description: >-
                  (Only if the signature ID is mnemonic-based) The index of the
                  specific address from the mnemonic
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in ADA). The difference
            between the UTXOs calculated in the <code>fromAddress</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: >-
                  addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
                minimum: 30
                maximum: 128
              value:
                description: The amount to receive (in ADA)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: number
          description: The fee to be paid for the transaction (in ADA).
          example: 0.0015
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee to.
          type: string
          example: addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
          minimum: 30
          maximum: 128
    AdaTransactionFromUTXOKMS:
      type: object
      required:
        - to
        - fromUTXO
        - fee
        - changeAddres
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            signature IDs of the associated blockchain addresses
          type: array
          items:
            type: object
            required:
              - txHash
              - signatureId
              - index
            properties:
              txHash:
                description: The transaction hash of the UTXO to be spent
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: The index of the UTXO to be spent
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              amount:
                description: The amount of the UTXO to be spent, in ADA
                type: number
                example: 0
                minimum: 0
                maximum: 1.652
              address:
                description: The address that holds the UTXO to be spent
                type: string
                example: >-
                  addr_test1vzfp68vn36ze5yz7x7evracmasuptjmz99qk4j23gun3pcqhlevq5
                minLength: 0
                maxLength: 128
              signatureId:
                type: string
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: >-
                  The KMS identifier of the private key of the blockchain
                  address that holds the UTXO to be spent
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in ADA). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: >-
                  addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
                minimum: 30
                maximum: 128
              value:
                description: The amount to receive (in ADA)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: number
          description: The fee to be paid for the transaction (in ADA).
          example: 0.0015
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee.
          type: string
          example: addr_test1vzdts2y4k47zwypzdh36azxx0w4v8tev6m6svtz9fud0emgchuswu
          minimum: 30
          maximum: 128
    BtcTransactionFromAddress:
      type: object
      required:
        - to
        - fromAddress
      properties:
        fromAddress:
          description: >-
            The array of blockchain addresses to send the assets from and their
            private keys. For each address, the last 100 transactions are
            scanned for any UTXO to be included in the transaction.
          type: array
          items:
            $ref: '#/components/schemas/BtcTransactionFromAddressSource'
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in BTC). The difference
            between the UTXOs calculated in the <code>fromAddress</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            $ref: '#/components/schemas/BtcTransactionFromAddressTarget'
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in BTC); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee to; if you are using this parameter, you have to
            also use the <code>fee</code> parameter because these two parameters
            only work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    BtcTransactionFromAddressSource:
      type: object
      required:
        - address
        - privateKey
      properties:
        address:
          description: The blockchain address to send the assets from
          type: string
          example: 2N9bBiH2qrTDrPCzrNhaFGdkNKS86PJAAAS
          minimum: 30
          maximum: 50
        privateKey:
          description: The private key of the address to send the assets from
          type: string
          minimum: 52
          maximum: 52
          example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
    BtcTransactionFromAddressTarget:
      type: object
      required:
        - address
        - value
      properties:
        address:
          description: The blockchain address to receive the assets
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
        value:
          description: The amount to receive (in BTC)
          type: number
          minimum: 0
          example: 0.02969944
    BtcTransactionFromUTXO:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            private keys of the associated blockchain addresses
          type: array
          items:
            $ref: '#/components/schemas/BtcTransactionFromUTXOSource'
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in BTC). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            $ref: '#/components/schemas/BtcTransactionFromUTXOTarget'
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in BTC); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaining after
            covering the fee; if you are using this parameter, you have to also
            use the <code>fee</code> parameter because these two parameters only
            work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    BtcTransactionFromUTXOSource:
      type: object
      required:
        - txHash
        - index
        - privateKey
      properties:
        txHash:
          description: The transaction hash of the UTXO to be spent
          type: string
          example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
          minLength: 64
          maxLength: 64
        index:
          description: The index of the UTXO to be spent
          type: number
          example: 0
          minimum: 0
          maximum: 2147483647
        privateKey:
          description: >-
            The private key of the blockchain address that holds the UTXO to be
            spent
          type: string
          example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
          minLength: 52
          maxLength: 52
    BtcTransactionFromUTXOTarget:
      type: object
      required:
        - address
        - value
      properties:
        address:
          description: The blockchain address to receive the assets
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
        value:
          description: The amount to receive (in BTC)
          type: number
          minimum: 0
          example: 0.02969944
    BtcTransactionFromAddressKMS:
      type: object
      required:
        - to
        - fromAddress
      properties:
        fromAddress:
          description: >-
            The array of blockchain addresses to send the assets from and their
            signature IDs. For each address, the last 100 transactions are
            scanned for any UTXO to be included in the transaction.
          type: array
          items:
            $ref: '#/components/schemas/BtcTransactionFromAddressKMSSource'
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in BTC). The difference
            between the UTXOs calculated in the <code>fromAddress</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            $ref: '#/components/schemas/BtcTransactionFromAddressKMSTarget'
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in BTC); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee to; if you are using this parameter, you have to
            also use the <code>fee</code> parameter because these two parameters
            only work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    BtcTransactionFromAddressKMSSource:
      type: object
      required:
        - address
        - signatureId
      properties:
        address:
          description: The blockchain address to send the assets from
          type: string
          example: 2N9bBiH2qrTDrPCzrNhaFGdkNKS86PJAAAS
          minimum: 30
          maximum: 50
        signatureId:
          type: string
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          description: >-
            The KMS identifier of the private key of the address to send the
            assets from
        index:
          description: >-
            (Only if the signature ID is mnemonic-based and you run KMS v6.2 or
            later) The index of the address to send the assets from that was
            generated from the mnemonic
          type: number
          example: 0
          minimum: 0
          maximum: 2147483647
    BtcTransactionFromAddressKMSTarget:
      type: object
      required:
        - address
        - value
      properties:
        address:
          description: The blockchain address to receive the assets
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
        value:
          description: The amount to receive (in BTC)
          type: number
          minimum: 0
          example: 0.02969944
    BtcTransactionFromUTXOKMS:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            signature IDs of the associated blockchain addresses
          type: array
          items:
            $ref: '#/components/schemas/BtcTransactionFromUTXOKMSSource'
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in BTC). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            $ref: '#/components/schemas/BtcTransactionFromUTXOKMSTarget'
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in BTC); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee; if you are using this parameter, you have to also
            use the <code>fee</code> parameter because these two parameters only
            work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    BtcTransactionFromUTXOKMSSource:
      type: object
      required:
        - txHash
        - signatureId
        - index
      properties:
        txHash:
          description: The transaction hash of the UTXO to be spent
          type: string
          example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
          minLength: 64
          maxLength: 64
        index:
          description: The index of the UTXO to be spent
          type: number
          example: 0
          minimum: 0
          maximum: 2147483647
        signatureId:
          type: string
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          description: >-
            The KMS identifier of the private key of the blockchain address that
            holds the UTXO to be spent
        signatureIdIndex:
          description: >-
            Index of the address in the wallet. Required when signatureId
            represents the mnenomic.
          type: number
          example: 0
          minimum: 0
          maximum: 2147483647
    BtcTransactionFromUTXOKMSTarget:
      type: object
      required:
        - address
        - value
      properties:
        address:
          description: The blockchain address to receive the assets
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
        value:
          description: The amount to receive (in BTC)
          type: number
          minimum: 0
          example: 0.02969944
    BchBlock:
      type: object
      properties:
        hash:
          type: string
          description: Hash of block.
          example: 000000000000000005e14d3f9fdfb70745308706615cfa9edca4f4558332b201
        size:
          type: number
          description: Block size.
          example: 81577
        height:
          type: number
          description: The number of blocks preceding a particular block on a block chain.
          example: 500000
        version:
          type: number
          description: Block version.
          example: 536870912
        merkleroot:
          type: string
          description: >-
            The root node of a merkle tree, a descendant of all the hashed pairs
            in the tree.
          example: 4af279645e1b337e655ae3286fc2ca09f58eb01efa6ab27adedd1e9e6ec19091
        tx:
          type: array
          description: List of transactions present in the block.
          items:
            $ref: '#/components/schemas/BchTx'
        time:
          type: number
          description: Time of the block.
          example: 1509343584
        nonce:
          type: number
          description: >-
            Arbitrary number that is used in Bitcoin's proof of work consensus
            algorithm.
          example: 3604508752
        difficulty:
          type: number
          example: 113081236211.45331
        confirmations:
          type: number
          description: Number of blocks mined after this block.
          example: 109602
        previousblockhash:
          type: string
          description: Hash of the previous block.
          example: 0000000000000000043831d6ebb013716f0580287ee5e5687e27d0ed72e6e523
        nextblockhash:
          type: string
          description: Hash of the next block.
          example: 00000000000000000568f0a96bf4348847bc84e455cbfec389f27311037a20f3
    BchInfo:
      type: object
      properties:
        chain:
          type: string
          description: Chain of the blockchain, main or test.
          example: main
        blocks:
          type: number
          description: Last block.
          example: 609604
        bestblockhash:
          type: string
          description: Hash of the last block.
          example: 0000000000000000024997c878c5a90bd73cd50060877c4f70eef1f2e92243f5
        difficulty:
          type: number
          description: Difficulty of the PoW algorithm.
          example: 375206303347.133
    BchTransaction:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            private keys of the associated blockchain addresses
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - privateKey
            properties:
              txHash:
                description: The transaction hash of the UTXO to be spent
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: The index of the UTXO to be spent
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              privateKey:
                description: >-
                  The private key of the blockchain address that holds the UTXO
                  to be spent
                type: string
                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
                minLength: 52
                maxLength: 52
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in BCH). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in BCH)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in BCH); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee; if you are using this parameter, you have to also
            use the <code>fee</code> parameter because these two parameters only
            work together.
          type: string
          example: bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez
          minimum: 30
          maximum: 60
    BchTransactionKMS:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            signature IDs of the associated blockchain addresses
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - signatureId
            properties:
              txHash:
                description: The transaction hash of the UTXO to be spent
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: The index of the UTXO to be spent
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              signatureId:
                type: string
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: >-
                  The KMS identifier of the private key of the blockchain
                  address that holds the UTXO to be spent
              signatureIdIndex:
                description: >-
                  Index of the address in the wallet. Required when signatureId
                  represents the mnenomic.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in BCH). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in BCH)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in BCH); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee; if you are using this parameter, you have to also
            use the <code>fee</code> parameter because these two parameters only
            work together.
          type: string
          example: bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez
          minimum: 30
          maximum: 60
    BchTx:
      type: object
      properties:
        txid:
          type: string
          example: fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33
        version:
          type: number
          example: 1
        locktime:
          type: number
          example: 0
        vin:
          type: array
          items:
            type: object
            properties:
              txid:
                type: string
                example: >-
                  eea57285462dd70dadcd431fc814857b3f81fe4d0a059a8c02c12fd7d33c02d1
              vout:
                type: number
                example: 0
              scriptSig:
                properties:
                  hex:
                    type: string
                    example: >-
                      48304502210083753ff9954579f1062d60905650d5d07f50dedc96f9425403b80957f199e1ee022053625597b069c48ed29f8825bd3c8f66757ccaa21a7bb49314eae4eca1fb8d7041210299b1eedeb115b5880cd5e0df0717bd982748a8e003e34371dc36301e17ee0ed6
                  asm:
                    type: string
                    example: >-
                      304502210083753ff9954579f1062d60905650d5d07f50dedc96f9425403b80957f199e1ee022053625597b069c48ed29f8825bd3c8f66757ccaa21a7bb49314eae4eca1fb8d70[ALL|FORKID]
                      0299b1eedeb115b5880cd5e0df0717bd982748a8e003e34371dc36301e17ee0ed6
                type: object
              coinbase:
                type: string
                example: 04ffff001d02fd04
              sequence:
                type: number
                example: 2147483647
        vout:
          type: array
          items:
            type: object
            properties:
              value:
                type: number
                example: 50
              'n':
                type: number
                example: 0
              scriptPubKey:
                properties:
                  hex:
                    type: string
                    example: >-
                      4104f5eeb2b10c944c6b9fbcfff94c35bdeecd93df977882babc7f3a2cf7f5c81d3b09a68db7f0e04f21de5d4230e75e6dbe7ad16eefe0d4325a62067dc6f369446aac
                  asm:
                    type: string
                    example: >-
                      04f5eeb2b10c944c6b9fbcfff94c35bdeecd93df977882babc7f3a2cf7f5c81d3b09a68db7f0e04f21de5d4230e75e6dbe7ad16eefe0d4325a62067dc6f369446a
                      OP_CHECKSIG
                  addresses:
                    type: array
                    items:
                      type: string
                    example:
                      - 1BW18n7MfpU35q4MTBSk8pse3XzQF8XvzT
                  type:
                    type: string
                    example: pubkeyhash
                type: object
    DogeInfo:
      type: object
      properties:
        chain:
          type: string
          description: Chain of the blockchain, main or test.
          example: test
        blocks:
          type: number
          description: Last block.
          example: 1234314
        headers:
          type: number
          description: Last headers.
          example: 1234314
        bestblockhash:
          type: string
          description: Hash of the last block.
          example: 6178dda07b94becb118f67b21aa72f60d85c1029e9e9b8ae56a25d684de66078
        difficulty:
          type: number
          description: Difficulty of the PoW algorithm.
          example: 0.0018856935093586335
    DogeBlock:
      type: object
      properties:
        hash:
          type: string
          description: Hash of block.
          example: 6178dda07b94becb118f67b21aa72f60d85c1029e9e9b8ae56a25d684de66078
        height:
          type: number
          description: The number of blocks preceding a particular block on a block chain.
          example: 1234314
        size:
          type: number
          description: The size of the block.
          example: 1234314
        confirmations:
          type: number
          description: Number of confirmations of that block.
          example: 1234314
        weight:
          type: number
          description: The weight of the block.
          example: 1234314
        version:
          type: number
          example: 536870912
          description: Block version.
        previousblockhash:
          type: string
          description: Hash of the previous block.
          example: a3047a060e5d586a9b26779ebe62fc57ce7323745da8f28761ab755454d89c52
        merkleRoot:
          type: string
          description: >-
            The root node of a merkle tree, a descendant of all the hashed pairs
            in the tree.
          example: a1634a42a8e956a5fb5225d06c3af6207e7f6fe5a00fa45229edfd0ddfa587f0
        time:
          type: number
          description: Time of the block.
          example: 1572865501
        bits:
          type: number
          example: 503452237
        nonce:
          type: number
          description: >-
            Arbitrary number that is used in Litecoin's proof of work consensus
            algorithm.
          example: 2278594841
        txs:
          type: array
          items:
            $ref: '#/components/schemas/DogeTx'
    DogeTx:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash.
          example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
        size:
          type: number
          description: Size of the transaction.
          example: 145
        vsize:
          type: number
          example: 145
        version:
          type: number
          description: Index of the transaction.
          example: 2
        vin:
          description: List of transactions, from which assets are being sent.
          type: array
          items:
            type: object
            properties:
              txid:
                type: string
                description: Transaction hash of the input.
                example: >-
                  0db5a2881f26f7dce20222f9c2538dc296ab562e134a72052596bdf4bb6913b4
              vout:
                type: number
                description: Transaction index of the input.
                example: 1
              scriptSig:
                type: object
                properties:
                  asm:
                    type: string
                  hex:
                    type: string
              sequence:
                type: number
                example: 4294967294
        vout:
          description: List of recipient addresses and amounts to send to each of them.
          type: array
          items:
            type: object
            properties:
              value:
                type: number
                description: Amount of UTXO in 1/1000000 DOGE.
                example: 1000
              'n':
                type: number
                description: Transaction index of the output.
                example: 1
              scriptPubKey:
                type: object
                properties:
                  asm:
                    type: string
                    example: >-
                      OP_HASH160 905c261d73922a21a16f505cefccaa07aaee50cd
                      OP_EQUAL
                  hex:
                    type: string
                    example: a914905c261d73922a21a16f505cefccaa07aaee50cd87
                  type:
                    type: string
                    example: scripthash
                  addresses:
                    type: array
                    items:
                      type: string
                      description: Recipient address.
                      example: n4YNG8q5JyxkeWf7zMi1bMyRZbRKK1W7or
        locktime:
          type: number
          example: 1233222
    DogeUTXO:
      type: object
      properties:
        scriptPubKey:
          type: object
          properties:
            asm:
              type: string
              example: OP_HASH160 905c261d73922a21a16f505cefccaa07aaee50cd OP_EQUAL
            hex:
              type: string
              example: a914905c261d73922a21a16f505cefccaa07aaee50cd87
            type:
              type: string
              example: scripthash
            addresses:
              type: array
              items:
                type: string
                description: Recipient address.
                example: n4YNG8q5JyxkeWf7zMi1bMyRZbRKK1W7or
        version:
          type: number
          description: The version of the transaction
          example: 2
        height:
          type: number
          description: >-
            The height (number) of the block where the transaction is included
            in
          example: 1233224
        value:
          type: number
          description: The amount of the UTXO (in 1/1000000 DOGE)
          example: 1000
        coinbase:
          type: boolean
          description: >-
            If set to "true", the transaction is a coinbase transaction (a
            transaction created by a Bitcoin miner to collect their reward)
          example: false
        bestblock:
          type: string
          description: The block hash
          example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
    DogeTransactionUTXOKMS:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            signature IDs of the associated blockchain addresses
          type: array
          items:
            type: object
            required:
              - txHash
              - value
              - address
              - index
              - signatureId
            properties:
              txHash:
                description: The transaction hash of the UTXO to be spent
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              value:
                type: string
                description: The amount to send (in DOGE)
                example: '0.0015'
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              index:
                description: The index of the UTXO to be spent
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              signatureId:
                type: string
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: >-
                  The KMS identifier of the private key of the blockchain
                  address that holds the UTXO to be spent
              signatureIdIndex:
                description: >-
                  Index of the address in the wallet. Required when signatureId
                  represents the mnenomic.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in DOGE). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in DOGE)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in DOGE); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee; if you are using this parameter, you have to also
            use the <code>fee</code> parameter because these two parameters only
            work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    DogeTransactionUTXO:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            private keys of the associated blockchain addresses
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - privateKey
              - value
              - address
            properties:
              txHash:
                description: The transaction hash of the UTXO to be spent
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              value:
                type: string
                description: The amount to send (in DOGE)
                example: '0.0015'
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              index:
                description: The index of the UTXO to be spent
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              privateKey:
                description: >-
                  The private key of the blockchain address that holds the UTXO
                  to be spent
                type: string
                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
                minLength: 52
                maxLength: 52
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in DOGE). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in DOGE)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in DOGE); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee to; if you are using this parameter, you have to
            also use the <code>fee</code> parameter because these two parameters
            only work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    DogeTransactionAddress:
      type: object
      required:
        - to
        - fromAddress
      properties:
        fromAddress:
          description: >-
            The array of blockchain addresses to send the assets from and their
            private keys. For each address, the last 100 transactions are
            scanned for any UTXO to be included in the transaction.
          type: array
          items:
            type: object
            required:
              - privateKey
              - address
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              privateKey:
                description: >-
                  The private key of the blockchain address that holds the UTXO
                  to be spent
                type: string
                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
                minLength: 52
                maxLength: 52
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in DOGE). The difference
            between the UTXOs calculated in the <code>fromAddress</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in DOGE)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in DOGE); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee to; if you are using this parameter, you have to
            also use the <code>fee</code> parameter because these two parameters
            only work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    DogeTransactionAddressKMS:
      type: object
      required:
        - to
        - fromAddress
      properties:
        fromAddress:
          description: >-
            The array of blockchain addresses to send the assets from and their
            private keys. For each address, the last 100 transactions are
            scanned for any UTXO to be included in the transaction.
          type: array
          items:
            type: object
            required:
              - signatureId
              - address
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              signatureId:
                type: string
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: >-
                  The KMS identifier of the private key of the address to send
                  the assets from
              index:
                description: >-
                  (Only if the signature ID is mnemonic-based and you run KMS
                  v6.2 or later) The index of the address to send the assets
                  from that was generated from the mnemonic
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in DOGE). The difference
            between the UTXOs calculated in the <code>fromAddress</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in DOGE)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in DOGE); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee to; if you are using this parameter, you have to
            also use the <code>fee</code> parameter because these two parameters
            only work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    LtcInfo:
      type: object
      properties:
        chain:
          type: string
          description: Chain of the blockchain, main or test.
          example: test
        blocks:
          type: number
          description: Last block.
          example: 1234314
        headers:
          type: number
          description: Last headers.
          example: 1234314
        bestblockhash:
          type: string
          description: Hash of the last block.
          example: 6178dda07b94becb118f67b21aa72f60d85c1029e9e9b8ae56a25d684de66078
        difficulty:
          type: number
          description: Difficulty of the PoW algorithm.
          example: 0.0018856935093586335
    LtcBlock:
      type: object
      properties:
        hash:
          type: string
          description: Hash of block.
          example: 6178dda07b94becb118f67b21aa72f60d85c1029e9e9b8ae56a25d684de66078
        blockNumber:
          type: number
          description: The number of blocks preceding a particular block on a block chain.
          example: 1234314
        version:
          type: number
          example: 536870912
          description: Block version.
        prevBlock:
          type: string
          description: Hash of the previous block.
          example: a3047a060e5d586a9b26779ebe62fc57ce7323745da8f28761ab755454d89c52
        merkleRoot:
          type: string
          description: >-
            The root node of a merkle tree, a descendant of all the hashed pairs
            in the tree.
          example: a1634a42a8e956a5fb5225d06c3af6207e7f6fe5a00fa45229edfd0ddfa587f0
        time:
          type: number
          description: Time of the block.
          example: 1572865501
        bits:
          type: number
          example: 503452237
        nonce:
          type: number
          description: >-
            Arbitrary number that is used in Litecoin's proof of work consensus
            algorithm.
          example: 2278594841
        txs:
          type: array
          items:
            $ref: '#/components/schemas/LtcTx'
    LtcTx:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash.
          example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
        witnessHash:
          type: string
          description: Witness hash in case of a SegWit transaction.
          example: d819688a3ac77cb6d2751808e5411baf7e20fa3eeeccf65867554a09beddd9a3
        fee:
          type: string
          description: Fee paid for this transaction, in LTC.
          example: '0.00001682'
        rate:
          type: string
          example: '0.00010011'
        ps:
          type: number
          example: 1572703011
        blockNumber:
          type: number
          description: Height of the block this transaction belongs to.
          example: 1233224
        block:
          type: string
          description: Hash of the block this transaction belongs to.
          example: b540bf37450eae0fb9fb7f190009ca890f0dd17cb19521c6241a0dc5e70f67dc
        time:
          type: number
          description: Time of the transaction.
          example: 1572694484
        index:
          type: number
          description: Index of the transaction in the block.
          example: 2
        version:
          type: number
          description: Index of the transaction.
          example: 2
        flag:
          type: number
          example: 1
        inputs:
          description: List of transactions, from which assets are being sent.
          type: array
          items:
            type: object
            properties:
              prevout:
                properties:
                  hash:
                    type: string
                    description: Transaction hash of the input.
                    example: >-
                      0db5a2881f26f7dce20222f9c2538dc296ab562e134a72052596bdf4bb6913b4
                  index:
                    type: number
                    description: Transaction index of the input.
                    example: 1
                type: object
              script:
                type: string
                description: >-
                  Data generated by a spender which is almost always used as
                  variables to satisfy a pubkey script.
                example: 1600148c65244f095f3689aebb70981d102e33036fe786
              witness:
                type: string
                description: Transaction witness.
                example: >-
                  0247304402202cad8f03fd061fbdd19d285f528dd7451c3818f4a1d0f5f9f559f141fb910c6e02203fb62fc770cf54ae53e4b488b589f9f096d28c1bd24dc8e4d80783dd58041826012102c44d21e840b24c786a7eff2980e35f51c4abcc9a032e7a132ca258f90ee4a19d
              sequence:
                type: number
                example: 4294967294
              coin:
                properties:
                  version:
                    type: number
                    example: 2
                  height:
                    type: number
                    example: 1232869
                  value:
                    type: string
                    description: Value of the transaction, in LTC.
                    example: '0.0989946'
                  script:
                    type: string
                    example: a91472593295cfe5e7ea466e43822167cabcb2cb103387
                  address:
                    type: string
                    description: Sender address.
                    example: 2N3fqsiA5Nk4pZGWcfZApATGhXfn9B74oXK
                  coinbase:
                    type: boolean
                    description: Coinbase transaction - miner fee.
                    example: false
                type: object
        outputs:
          description: List of recipient addresses and amounts to send to each of them.
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                description: Sent amount in LTC.
                example: '0.0015'
              script:
                type: string
                description: Transaction script.
                example: 76a914fc8f50c952da910f473a0533561311ad140c989b88ac
              address:
                type: string
                description: Recipient address.
                example: n4YNG8q5JyxkeWf7zMi1bMyRZbRKK1W7or
        locktime:
          type: number
          description: Block this transaction was included in.
          example: 1233222
    DogeTxByAddress:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash.
          example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
        witnessHash:
          type: string
          description: Witness hash in case of a SegWit transaction.
          example: d819688a3ac77cb6d2751808e5411baf7e20fa3eeeccf65867554a09beddd9a3
        fee:
          type: string
          description: Fee paid for this transaction, in DOGE.
          example: '0.00001682'
        rate:
          type: string
          example: '0.00010011'
        ps:
          type: number
          example: 1572703011
        blockNumber:
          type: number
          description: Height of the block this transaction belongs to.
          example: 1233224
        block:
          type: string
          description: Hash of the block this transaction belongs to.
          example: b540bf37450eae0fb9fb7f190009ca890f0dd17cb19521c6241a0dc5e70f67dc
        time:
          type: number
          description: Time of the transaction.
          example: 1572694484
        index:
          type: number
          description: Index of the transaction in the block.
          example: 2
        version:
          type: number
          description: Index of the transaction.
          example: 2
        flag:
          type: number
          example: 1
        inputs:
          description: List of transactions, from which assets are being sent.
          type: array
          items:
            type: object
            properties:
              prevout:
                properties:
                  hash:
                    type: string
                    description: Transaction hash of the input.
                    example: >-
                      0db5a2881f26f7dce20222f9c2538dc296ab562e134a72052596bdf4bb6913b4
                  index:
                    type: number
                    description: Transaction index of the input.
                    example: 1
                type: object
              script:
                type: string
                description: >-
                  Data generated by a spender which is almost always used as
                  variables to satisfy a pubkey script.
                example: 1600148c65244f095f3689aebb70981d102e33036fe786
              witness:
                type: string
                description: Transaction witness.
                example: >-
                  0247304402202cad8f03fd061fbdd19d285f528dd7451c3818f4a1d0f5f9f559f141fb910c6e02203fb62fc770cf54ae53e4b488b589f9f096d28c1bd24dc8e4d80783dd58041826012102c44d21e840b24c786a7eff2980e35f51c4abcc9a032e7a132ca258f90ee4a19d
              sequence:
                type: number
                example: 4294967294
              coin:
                properties:
                  version:
                    type: number
                    example: 2
                  height:
                    type: number
                    example: 1232869
                  value:
                    type: string
                    description: Value of the transaction, in DOGE.
                    example: '0.0989946'
                  script:
                    type: string
                    example: a91472593295cfe5e7ea466e43822167cabcb2cb103387
                  address:
                    type: string
                    description: Sender address.
                    example: 2N3fqsiA5Nk4pZGWcfZApATGhXfn9B74oXK
                  coinbase:
                    type: boolean
                    description: Coinbase transaction - miner fee.
                    example: false
                type: object
        outputs:
          description: List of recipient addresses and amounts to send to each of them.
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                description: Sent amount in DOGE.
                example: '0.0015'
              script:
                type: string
                description: Transaction script.
                example: 76a914fc8f50c952da910f473a0533561311ad140c989b88ac
              address:
                type: string
                description: Recipient address.
                example: n4YNG8q5JyxkeWf7zMi1bMyRZbRKK1W7or
        locktime:
          type: number
          description: Block this transaction was included in.
          example: 1233222
    LtcUTXO:
      type: object
      properties:
        version:
          type: number
          description: The version of the transaction
          example: 2
        height:
          type: number
          description: >-
            The height (number) of the block where the transaction is included
            in
          example: 1233224
        value:
          type: number
          description: The amount of the UTXO
          example: 30000000
        script:
          type: string
          description: >-
            Data generated by the spender; is almost always used as variables to
            satisfy the conditions in the pubkey script
          example: 76a914fc8f50c952da910f473a0533561311ad140c989b88ac
        address:
          type: string
          description: The blockchain address of the UTXO owner
          example: n4YNG8q5JyxkeWf7zMi1bMyRZbRKK1W7or
        coinbase:
          type: boolean
          description: >-
            If set to "true", the transaction is a coinbase transaction (a
            transaction created by a Bitcoin miner to collect their reward)
          example: false
        hash:
          type: string
          description: The hash of the transaction
          example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
        index:
          type: number
          description: The index of the transaction output checked for the UTXO
          example: 0
    LtcTransactionAddress:
      type: object
      required:
        - to
        - fromAddress
      properties:
        fromAddress:
          description: >-
            The array of blockchain addresses to send the assets from and their
            private keys. For each address, the last 100 transactions are
            scanned for any UTXO to be included in the transaction.
          type: array
          items:
            type: object
            required:
              - address
              - privateKey
            properties:
              address:
                description: The blockchain address to send the assets from
                type: string
                minimum: 30
                maximum: 50
                example: 2N9bBiH2qrTDrPCzrNhaFGdkNKS86PJAAAS
              privateKey:
                description: The private key of the address to send the assets from
                type: string
                minimum: 52
                maximum: 52
                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in LTC). The difference
            between the UTXOs calculated in the <code>fromAddress</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in LTC)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in LTC); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee to; if you are using this parameter, you have to
            also use the <code>fee</code> parameter because these two parameters
            only work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    LtcTransactionUTXO:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            private keys of the associated blockchain addresses
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - privateKey
            properties:
              txHash:
                description: The transaction hash of the UTXO to be spent
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: The index of the UTXO to be spent
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              privateKey:
                description: >-
                  The private key of the blockchain address that holds the UTXO
                  to be spent
                type: string
                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf
                minLength: 52
                maxLength: 52
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in LTC). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in LTC)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in LTC); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee; if you are using this parameter, you have to also
            use the <code>fee</code> parameter because these two parameters only
            work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    LtcTransactionAddressKMS:
      type: object
      required:
        - to
        - fromAddress
      properties:
        fromAddress:
          description: >-
            The array of blockchain addresses to send the assets from and their
            signature IDs. For each address, the last 100 transactions are
            scanned for any UTXO to be included in the transaction.
          type: array
          items:
            type: object
            required:
              - address
              - signatureId
            properties:
              address:
                description: The blockchain address to send the assets from
                type: string
                minimum: 30
                maximum: 50
                example: 2N9bBiH2qrTDrPCzrNhaFGdkNKS86PJAAAS
              signatureId:
                type: string
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: >-
                  The KMS identifier of the private key of the address to send
                  the assets from
              index:
                description: >-
                  (Only if the signature ID is mnemonic-based and you run KMS
                  v6.2 or later) The index of the address to send the assets
                  from that was generated from the mnemonic
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in LTC). The difference
            between the UTXOs calculated in the <code>fromAddress</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in LTC)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in LTC); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee to; if you are using this parameter, you have to
            also use the <code>fee</code> parameter because these two parameters
            only work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    LtcTransactionUTXOKMS:
      type: object
      required:
        - to
        - fromUTXO
      properties:
        fromUTXO:
          description: >-
            The array of transaction hashes, indexes of its UTXOs, and the
            signature IDs of the associated blockchain addresses
          type: array
          items:
            type: object
            required:
              - txHash
              - index
              - signatureId
            properties:
              txHash:
                description: The transaction hash of the UTXO to be spent
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: The index of the UTXO to be spent
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              signatureId:
                type: string
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: >-
                  The KMS identifier of the private key of the blockchain
                  address that holds the UTXO to be spent
              signatureIdIndex:
                description: >-
                  Index of the address in the wallet. Required when signatureId
                  represents the mnenomic.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
        to:
          description: >-
            The array of blockchain addresses to send the assets to and the
            amounts that each address should receive (in LTC). The difference
            between the UTXOs calculated in the <code>fromUTXO</code> section
            and the total amount to receive calculated in the <code>to</code>
            section will be used as the gas fee. To explicitly specify the fee
            amount and the blockchain address where any extra funds remaining
            after covering the fee will be sent, set the <code>fee</code> and
            <code>changeAddress</code> parameters.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: The blockchain address to receive the assets
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: The amount to receive (in LTC)
                type: number
                minimum: 0
                example: 0.02969944
        fee:
          type: string
          description: >-
            The fee to be paid for the transaction (in LTC); if you are using
            this parameter, you have to also use the <code>changeAddress</code>
            parameter because these two parameters only work together.
          example: '0.0015'
        changeAddress:
          description: >-
            The blockchain address to send any extra assets remaning after
            covering the fee; if you are using this parameter, you have to also
            use the <code>fee</code> parameter because these two parameters only
            work together.
          type: string
          example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
          minimum: 30
          maximum: 60
    AdaBlock:
      type: object
      properties:
        hash:
          type: string
          description: Hash of block.
          example: 6178dda07b94becb118f67b21aa72f60d85c1029e9e9b8ae56a25d684de66078
        number:
          type: number
          description: The number of blocks preceding a particular block on a block chain.
          example: 1234314
        epochNo:
          type: number
          example: 536870912
          description: Number of the epoch the block is included in.
        slotNo:
          type: number
          description: Number of the slot the block is included in.
          example: a3047a060e5d586a9b26779ebe62fc57ce7323745da8f28761ab755454d89c52
        forgedAt:
          type: string
          description: Time of the block.
          example: '2020-10-20T08:21:50.107Z'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/AdaTx'
    AdaTx:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash.
          example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
        fee:
          type: string
          description: Fee paid for this transaction, in ADA.
          example: '0.00001682'
        block:
          type: object
          properties:
            number:
              type: number
              description: Index of the block this transaction belongs to.
              example: 1233224
            hash:
              type: string
              description: Block hash.
              example: 5f83d51c8d3054012cea3011fa626b85d89442788721afd60719ab1f9ab8f78a
        inputs:
          description: List of transactions, from which assets are being sent.
          type: array
          items:
            type: object
            properties:
              txHash:
                type: string
                description: Transaction hash of the input.
                example: >-
                  0db5a2881f26f7dce20222f9c2538dc296ab562e134a72052596bdf4bb6913b4
              value:
                type: string
                description: Value of the transaction, in Lovelace - 1/1000000 of ADA.
                example: '989946'
              address:
                type: string
                description: Sender address.
                example: >-
                  addr1qxm3vd0msv9ph8elhy7xrv975z88y6lr3d8vdgy3fwr2e22uvu2ffa2ctx3pdl4rjjja5p7al2k356x5yx8cn03am88s2807d9
        outputs:
          description: List of recipient addresses and amounts to send to each of them.
          type: array
          items:
            $ref: '#/components/schemas/AdaUTXO'
    AdaUTXO:
      type: object
      properties:
        value:
          type: string
          description: Sent amount in ADA.
          example: '1.5'
        index:
          type: number
          description: Index of the output in the transaction.
          example: 1
        txHash:
          type: string
          description: Transaction hash.
          example: 76a914fc8f50c952da910f473a0533561311ad140c989b88ac
        address:
          type: string
          description: Recipient address.
          example: >-
            addr1qxm3vd0msv9ph8elhy7xrv975z88y6lr3d8vdgy3fwr2e22uvu2ffa2ctx3pdl4rjjja5p7al2k356x5yx8cn03am88s2807d9
    AdaAccountBalance:
      type: array
      items:
        type: object
        properties:
          currency:
            type: object
            properties:
              symbol:
                type: string
                description: Name of the asset.
              decimals:
                type: number
                description: Number of decimal places.
          value:
            type: string
            description: Quantity of the asset.
    AdaTransaction:
      type: object
      required:
        - to
      properties:
        fromAddress:
          description: >-
            Array of addresses and corresponding private keys. Tatum will
            automatically scan last unspent transactions for each address and
            will use all of the unspent values. We advise to use this option if
            you have 1 address per 1 transaction only.
          type: array
          items:
            type: object
            required:
              - address
            properties:
              address:
                description: Address to send assets from.
                type: string
                minimum: 30
                maximum: 150
                example: >-
                  addr1qxm3vd0msv9ph8elhy7xrv975z88y6lr3d8vdgy3fwr2e22uvu2ffa2ctx3pdl4rjjja5p7al2k356x5yx8cn03am88s2807d9
              privateKey:
                description: >-
                  Private key of the address to send assets from. Private key,
                  or signature Id must be present.
                type: string
                minimum: 192
                maximum: 192
                example: >-
                  7808a501e1bbc9926ac8ac6981e47cb0401288ae331a1f2333d1bed46c5b3051b5f875c39477b05bc3a43a3800b763f616ae3646f21df0ab5d95db944e71f5cfa8082d5c4e6241d49b17b2b6173f01bb3fd03be012cc8908ceea9e559e33e4fc
              signatureId:
                type: string
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: >-
                  Identifier of the private key associated in signing
                  application. Private key, or signature Id must be present.
        fromUTXO:
          description: >-
            Array of transaction hashes, index of UTXO in it and corresponding
            private keys. Use this option if you want to calculate amount to
            send manually. Either fromUTXO or fromAddress must be present.
          type: array
          items:
            type: object
            required:
              - txHash
              - index
            properties:
              txHash:
                description: Transaction hash of the UTXO to be spent.
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: Index of the UTXO to be spent.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
              privateKey:
                description: >-
                  Private key of the UTXO to be spent. Private key, or signature
                  Id must be present.
                type: string
                example: >-
                  7808a501e1bbc9926ac8ac6981e47cb0401288ae331a1f2333d1bed46c5b3051b5f875c39477b05bc3a43a3800b763f616ae3646f21df0ab5d95db944e71f5cfa8082d5c4e6241d49b17b2b6173f01bb3fd03be012cc8908ceea9e559e33e4fc
                minLength: 192
                maxLength: 192
              signatureId:
                type: string
                format: uuid
                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
                description: >-
                  Identifier of the private key associated in signing
                  application. Private key, or signature Id must be present.
        to:
          description: >-
            Array of addresses and values to send Litecoins to. Values must be
            set in LTC. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: >-
                  addr1qxm3vd0msv9ph8elhy7xrv975z88y6lr3d8vdgy3fwr2e22uvu2ffa2ctx3pdl4rjjja5p7al2k356x5yx8cn03am88s2807d9
                minimum: 30
                maximum: 150
              value:
                description: Amount to be sent, in ADA.
                type: number
                minimum: 0
                example: 0.029609
    AdaInfo:
      type: object
      properties:
        testnet:
          type: string
          description: Chain of the blockchain, main or test.
          example: test
        tip:
          type: object
          properties:
            number:
              type: number
              description: Last block.
              example: 2749845
            slotNo:
              type: number
              description: Last slot number.
              example: 31798572
            epoch:
              type: object
              properties:
                number:
                  type: number
                  description: Last epoch number.
                  example: 143
    Blockage:
      properties:
        id:
          description: The ID of the blockage
          type: string
          example: 5e68c66581f2ee32bc354087
        accountId:
          description: The ID of the account where the amount is blocked
          type: string
          example: 5e68c66581f2ee32bc354087
        amount:
          description: The amount blocked on the account
          example: '5'
          type: string
        type:
          description: The type of the blockage
          type: string
          example: DEBIT_CARD_OP
        description:
          description: The description of the blockage
          type: string
          example: Card payment in the shop.
    BlockAmount:
      properties:
        amount:
          description: The amount to be blocked on the account
          maxLength: 38
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          example: '5'
          type: string
        type:
          description: >-
            The type of the blockage that you are applying; can be a code or an
            identifier from an external system or a short description of the
            blockage
          type: string
          minLength: 1
          maxLength: 100
          example: DEBIT_CARD_OP
        description:
          description: The description of the blockage that you are applying
          type: string
          minLength: 1
          maxLength: 300
          example: Card payment in the shop.
      required:
        - amount
        - type
      type: object
    BroadcastKMS:
      properties:
        txData:
          description: Raw signed transaction to be published to network.
          example: 62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D
          maxLength: 500000
          minLength: 1
          type: string
        signatureId:
          description: >-
            ID of prepared payment template to sign. Required only, when
            broadcasting transaction signed by Tatum KMS.
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
        index:
          description: >-
            (Only if the signature ID is mnemonic-based and you run KMS v6.2 or
            later) The index of the address to send the assets from that was
            generated from the mnemonic
          type: number
          minimum: 0
          maximum: 2147483647
      required:
        - txData
      type: object
    HmacWebHook:
      properties:
        hmacSecret:
          description: >-
            Your HMAC secret password, which is used for signing the webhook
            payload.
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
          maxLength: 100
      required:
        - hmacSecret
      type: object
    Broadcast:
      properties:
        txData:
          description: Raw signed transaction to be published to network.
          example: 62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D
          maxLength: 500000
          minLength: 1
          type: string
        signatureId:
          type: string
          minLength: 24
          maxLength: 24
          example: 5e68c66581f2ee32bc354087
          description: >-
            Identifier of KMS pending transaction ID to be completed with the
            broadcast.
      required:
        - txData
      type: object
    BroadcastResponse:
      properties:
        completed:
          description: Flag, if withdrawal is successfully completed within Tatum systems.
          example: true
          type: boolean
        txId:
          description: Transaction ID of broadcast transaction and status
          example: 62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D
          type: string
      type: object
    BroadcastWithdrawal:
      properties:
        currency:
          description: >-
            Currency of signed transaction to be broadcast, BTC, LTC, DOGE, BNB,
            XLM, TRX, BCH, ETH, XRP, ERC20, TRC20
          example: BTC
          maxLength: 40
          minLength: 2
          type: string
        txData:
          description: Raw signed transaction to be published to network.
          example: 62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D
          maxLength: 500000
          minLength: 1
          type: string
        withdrawalId:
          description: Withdrawal ID to be completed by transaction broadcast
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        signatureId:
          description: >-
            ID of prepared payment template to sign. This is should be stored on
            a client side to retrieve ID of the blockchain transaction, when
            signing application signs the transaction and broadcasts it to the
            blockchain.
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
      required:
        - txData
        - currency
      type: object
    Id:
      type: object
      properties:
        id:
          type: string
          description: ID of the entity.
          example: 5e68c66581f2ee32bc354087
    CreateAccountBatch:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/CreateAccount'
      required:
        - accounts
    CreateAccount:
      properties:
        currency:
          description: >
            <p>The currency for the virtual account</p>

            <ul>

            <li><b>Native blockchain assets:</b> ALGO, BCH, BNB, BSC, BTC, CELO,
            DOGE, EGLD, ETH, FLOW, KCS, KLAY, LTC, MATIC, ONE, SOL, TRON, VET,
            XDC, XLM, XRP</li>

            <li><b>Digital assets:</b> BADA, BAT, BBCH, BBTC, BDOT, BETH, BLTC,
            BUSD, BUSD_BSC, BXRP, CAKE, FREE, GMC, LEO, LINK, MKR, MMY, PAX,
            PAXG, TUSD, UNI, USD_BSC, USDC, USDC_MATIC, USDC_MATIC_NATIVE, USDT,
            USDT_TRON, WBNB, WBTC, XCON</li>

            <li><b><a href="https://apidoc.tatum.io/tag/Virtual-Currency"
            target="_blank">Virtual currency</a></b> registered on the Tatum
            platform and starting with the "VC_" prefix</li>

            <li><b><a
            href="https://apidoc.tatum.io/tag/Blockchain-operations#operation/BnbAssetOffchain"
            target="_blank">BNB assets</a>, <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations#operation/XlmAssetOffchain"
            target="_blank">XLM assets</a>, and <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations#operation/XrpAssetOffchain"
            target="_blank">XRP assets</a></b> created via the Tatum
            platform</li>

            <li><b>Custom fungible tokens</b> (ERC-20 or equivalent, such as
            BEP-20 or TRC-10/20) registered on the Tatum platform; for more
            information, see <a
            href="https://docs.tatum.io/guides/ledger-and-off-chain/how-to-connect-custom-erc-20-token-to-the-ledger"
            target="_blank">our user documentation</a>

            <br/>The fungible tokens do not have direct faucets on the testnet.
            To use them in a testnet environment, you have to register a new
            fungible token in a virtual account (use <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations/#operation/createTrc"
            target="_blank">this API</a> for TRON TRC-10/20 tokens and <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations/#operation/registerErc20Token"
            target="_blank">this API</a> for any other tokens) and make sure
            that your tokens minted on the testnet are <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations/#operation/storeTokenAddress"
            target="_blank">linked to the token smart contract</a>.</li>

            </ul>
          example: BTC
          maxLength: 40
          minLength: 2
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        compliant:
          description: >-
            Enable compliant checks. If this is enabled, it is impossible to
            create account if compliant check fails.
          example: false
          type: boolean
        accountCode:
          description: For bookkeeping to distinct account purpose.
          maxLength: 50
          minLength: 1
          example: AC_1011_B
          type: string
        accountingCurrency:
          description: >-
            All transaction will be accounted in this currency for all accounts.
            Currency can be overridden per account level. If not set, customer
            accountingCurrency is used or EUR by default. ISO-4217
          $ref: '#/components/schemas/FiatCurrency'
          example: USD
        accountNumber:
          description: Account number from external system.
          maxLength: 50
          minLength: 1
          example: '123456'
          type: string
      required:
        - currency
      type: object
    CreateAccountXpub:
      properties:
        currency:
          description: >
            <p>The currency for the virtual account</p>

            <ul>

            <li><b>Native blockchain assets:</b> ALGO, BCH, BNB, BSC, BTC, CELO,
            DOGE, EGLD, ETH, FLOW, KCS, KLAY, LTC, MATIC, ONE, SOL, TRON, VET,
            XDC, XLM, XRP</li>

            <li><b>Digital assets:</b> BADA, BAT, BBCH, BBTC, BDOT, BETH, BLTC,
            BUSD, BUSD_BSC, BXRP, CAKE, FREE, GMC, LEO, LINK, MKR, MMY, PAX,
            PAXG, TUSD, UNI, USD_BSC, USDC, USDC_MATIC, USDC_MATIC_NATIVE, USDT,
            USDT_TRON, WBNB, WBTC, XCON</li>

            <li><b><a href="https://apidoc.tatum.io/tag/Virtual-Currency"
            target="_blank">Virtual currency</a></b> registered on the Tatum
            platform and starting with the "VC_" prefix</li>

            <li><b><a
            href="https://apidoc.tatum.io/tag/Blockchain-operations#operation/BnbAssetOffchain"
            target="_blank">BNB assets</a>, <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations#operation/XlmAssetOffchain"
            target="_blank">XLM assets</a>, and <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations#operation/XrpAssetOffchain"
            target="_blank">XRP assets</a></b> created via the Tatum
            platform</li>

            <li><b>Custom fungible tokens</b> (ERC-20 or equivalent, such as
            BEP-20 or TRC-10/20) registered on the Tatum platform; for more
            information, see <a
            href="https://docs.tatum.io/guides/ledger-and-off-chain/how-to-connect-custom-erc-20-token-to-the-ledger"
            target="_blank">our user documentation</a>

            <br/>The fungible tokens do not have direct faucets on the testnet.
            To use them in a testnet environment, you have to register a new
            fungible token in a virtual account (use <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations/#operation/createTrc"
            target="_blank">this API</a> for TRON TRC-10/20 tokens and <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations/#operation/registerErc20Token"
            target="_blank">this API</a> for any other tokens) and make sure
            that your tokens minted on the testnet are <a
            href="https://apidoc.tatum.io/tag/Blockchain-operations/#operation/storeTokenAddress"
            target="_blank">linked to the token smart contract</a>.</li>

            </ul>
          example: BTC
          maxLength: 40
          minLength: 2
          type: string
        xpub:
          description: Extended public key to generate addresses from.
          maxLength: 192
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        compliant:
          description: >-
            Enable compliant checks. If this is enabled, it is impossible to
            create account if compliant check fails.
          example: false
          type: boolean
        accountCode:
          description: For bookkeeping to distinct account purpose.
          maxLength: 50
          minLength: 1
          example: AC_1011_B
          type: string
        accountingCurrency:
          description: >-
            All transaction will be accounted in this currency for all accounts.
            Currency can be overridden per account level. If not set, customer
            accountingCurrency is used or EUR by default. ISO-4217
          $ref: '#/components/schemas/FiatCurrency'
          example: USD
        accountNumber:
          description: Account number from external system.
          maxLength: 50
          minLength: 1
          example: '123456'
          type: string
      required:
        - currency
        - xpub
      type: object
    UpdateAccount:
      properties:
        accountCode:
          description: For bookkeeping to distinct account purpose.
          maxLength: 50
          minLength: 1
          example: AC_1011_B
          type: string
        accountNumber:
          description: Account number from external system.
          maxLength: 50
          minLength: 1
          example: '123456'
          type: string
      type: object
    CreateTransaction:
      properties:
        senderAccountId:
          description: Internal sender account ID within Tatum platform
          example: 5e6645712b55823de7ea82f1
          maxLength: 24
          minLength: 24
          type: string
        recipientAccountId:
          description: Internal recipient account ID within Tatum platform
          example: 5e6645712b55823de7ea82f2
          maxLength: 24
          minLength: 24
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '5'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        anonymous:
          default: false
          description: >-
            Anonymous transaction does not show sender account to recipient,
            default is false
          example: false
          type: boolean
        compliant:
          description: >-
            Enable compliant checks. Transaction will not be processed, if
            compliant check fails.
          example: false
          type: boolean
        transactionCode:
          description: For bookkeeping to distinct transaction purpose.
          example: 1_01_EXTERNAL_CODE
          maxLength: 100
          minLength: 1
          type: string
        paymentId:
          description: >-
            Payment ID, External identifier of the payment, which can be used to
            pair transactions within Tatum accounts.
          example: '9625'
          maxLength: 100
          minLength: 1
          type: string
        recipientNote:
          description: Note visible to both, sender and recipient
          example: Private note
          maxLength: 500
          minLength: 1
          type: string
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Only applicable for Tatum's Virtual
            currencies Ledger transactions. Override default exchange rate for
            the Virtual Currency.
        senderNote:
          description: Note visible to sender
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - recipientAccountId
        - senderAccountId
      type: object
    BatchCreateTransaction:
      properties:
        senderAccountId:
          description: Internal sender account ID within Tatum platform
          example: 5e6645712b55823de7ea82f1
          maxLength: 24
          minLength: 24
          type: string
        transaction:
          description: Array of block seals.
          type: array
          items:
            type: object
            required:
              - amount
              - recipientAccountId
            properties:
              recipientAccountId:
                description: Internal recipient account ID within Tatum platform
                example: 5e6645712b55823de7ea82f2
                maxLength: 24
                minLength: 24
                type: string
              amount:
                description: Amount to be sent.
                maxLength: 38
                example: '5'
                type: string
                pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
              anonymous:
                default: false
                description: >-
                  Anonymous transaction does not show sender account to
                  recipient, default is false
                example: false
                type: boolean
              compliant:
                description: >-
                  Enable compliant checks. Transaction will not be processed, if
                  compliant check fails.
                example: false
                type: boolean
              transactionCode:
                description: For bookkeeping to distinct transaction purpose.
                example: 1_01_EXTERNAL_CODE
                maxLength: 100
                minLength: 1
                type: string
              paymentId:
                description: >-
                  Payment ID, External identifier of the payment, which can be
                  used to pair transactions within Tatum accounts.
                example: '9625'
                maxLength: 100
                minLength: 1
                type: string
              recipientNote:
                description: Note visible to both, sender and recipient
                example: Private note
                maxLength: 500
                minLength: 1
                type: string
              baseRate:
                type: number
                example: 1
                default: 1
                minimum: 0
                description: >-
                  Exchange rate of the base pair. Only applicable for Tatum's
                  Virtual currencies Ledger transactions. Override default
                  exchange rate for the Virtual Currency.
              senderNote:
                description: Note visible to sender
                example: Sender note
                maxLength: 500
                minLength: 1
                type: string
      required:
        - senderAccountId
      type: object
    UnblockAmount:
      properties:
        recipientAccountId:
          description: Internal recipient account ID within Tatum platform
          example: 5e6645712b55823de7ea82f2
          maxLength: 24
          minLength: 24
          type: string
        amount:
          description: Amount to be sent. Amount can be smaller then the blocked amount.
          maxLength: 38
          example: '5'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        anonymous:
          default: false
          description: >-
            Anonymous transaction does not show sender account to recipient,
            default is false
          example: false
          type: boolean
        compliant:
          description: >-
            Enable compliant checks. Transaction will not be processed, if
            compliant check fails.
          example: false
          type: boolean
        transactionCode:
          description: For bookkeeping to distinct transaction purpose.
          example: 1_01_EXTERNAL_CODE
          maxLength: 100
          minLength: 1
          type: string
        paymentId:
          description: >-
            Payment ID, External identifier of the payment, which can be used to
            pair transactions within Tatum accounts.
          example: '9625'
          maxLength: 100
          minLength: 1
          type: string
        recipientNote:
          description: Note visible to both, sender and recipient
          example: Private note
          maxLength: 500
          minLength: 1
          type: string
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Only applicable for Tatum's Virtual
            currencies Ledger transactions. Override default exchange rate for
            the Virtual Currency.
        senderNote:
          description: Note visible to sender
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - recipientAccountId
      type: object
    Customer:
      required:
        - active
        - id
        - externalId
        - enabled
      properties:
        externalId:
          description: Customer external ID.
          example: '651234'
          type: string
        id:
          description: Customer internal ID within Tatum.
          example: 5e68c66581f2ee32bc354087
          type: string
        enabled:
          description: Indicates whether customer is enabled or not
          example: true
          type: boolean
        active:
          description: Indicates whether customer is active or not
          example: true
          type: boolean
        accountingCurrency:
          description: >-
            All transaction will be accounted in this currency for all accounts
            of the customer. Currency can be overridden per account level.
            ISO-4217
          example: USD
          $ref: '#/components/schemas/FiatCurrency'
        customerCountry:
          description: Country customer has to be compliant with
          example: US
          type: string
        providerCountry:
          description: Country service provider has to be compliant with
          example: US
          type: string
      type: object
    CustomerRegistration:
      properties:
        externalId:
          description: >-
            The external ID of the customer; use only anonymized identification
            that you have in your system<br/>If a customer with the specified
            external ID does not exist, a new customer is created. If a customer
            with the specified external ID exists, it is updated with the
            provided information.
          example: '123654'
          maxLength: 100
          minLength: 1
          type: string
        accountingCurrency:
          description: >-
            The ISO 4217 code of the currency in which all transactions for all
            virtual accounts of the customer will be billed; to overwrite the
            currency for this specific virtual account, set the
            <code>accountingCurrency</code> parameter at the account level.
          default: EUR
          example: USD
          $ref: '#/components/schemas/FiatCurrency'
        customerCountry:
          description: >-
            The ISO 3166-1 code of the country that the customer has to be
            compliant with
          example: US
          maxLength: 2
          minLength: 2
          type: string
        providerCountry:
          description: >-
            The ISO 3166-1 code of the country that the service provider has to
            be compliant with
          example: US
          maxLength: 2
          minLength: 2
          type: string
      required:
        - externalId
      type: object
      description: >-
        If a customer with the specified external ID does not exist, a new
        customer is created. If a customer with the specified external ID
        exists, it is updated with the provided information.
    CustomerUpdate:
      properties:
        externalId:
          description: External customer ID. If not set, it will not be updated.
          example: '123654'
          maxLength: 100
          minLength: 1
          type: string
        accountingCurrency:
          description: >-
            All transaction will be accounted in this currency for all accounts.
            Currency can be overridden per account level. If not set, it will
            not be updated. ISO-4217
          example: USD
          $ref: '#/components/schemas/FiatCurrency'
        customerCountry:
          description: >-
            Country customer has to be compliant with. If not set, it will not
            be updated. ISO-3166-1.
          example: US
          $ref: '#/components/schemas/CountryCode'
          type: string
        providerCountry:
          description: >-
            Country service provider has to be compliant with. If not set, it
            will not be updated. ISO-3166-1
          example: US
          $ref: '#/components/schemas/CountryCode'
      type: object
      required:
        - externalId
    DeployErc20OffchainMnemXpub:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        xpub:
          description: >-
            The extended public key from which a deposit address for the virtual
            account will be generated
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        derivationIndex:
          description: >-
            The derivation index to use together with the extended public key to
            generate the deposit address
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            The mnemonic to generate the private key for the blockchain address
            from which the fee for deploying the smart contract will be
            deducted; is used together with the derivation index of this address
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          description: >-
            The derivation index of the blockchain address from which the fee
            for deploying the smart contract will be deducted; is used together
            with the mnemonic to generate the private key for this address
          example: 0
          type: integer
          maximum: 2147483647
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - xpub
        - derivationIndex
        - mnemonic
        - index
    DeployErc20OffchainMnemonicAddress:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 42
          minLength: 42
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            The mnemonic to generate the private key for the blockchain address
            from which the fee for deploying the smart contract will be
            deducted; is used together with the derivation index of this address
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          description: >-
            The derivation index of the blockchain address from which the fee
            for deploying the smart contract will be deducted; is used together
            with the mnemonic to generate the private key for this address
          example: 0
          type: integer
          maximum: 2147483647
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - address
        - mnemonic
        - index
    DeployErc20OffchainPKXpub:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        xpub:
          description: >-
            The extended public key from which a deposit address for the virtual
            account will be generated
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        derivationIndex:
          description: >-
            The derivation index to use together with the extended public key to
            generate the deposit address
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        privateKey:
          description: >-
            The private key of the blockchain address from which the fee for
            deploying the smart contract will be deducted
          type: string
          maxLength: 66
          minLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - xpub
        - derivationIndex
        - privateKey
    DeployErc20OffchainPKAddress:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 42
          minLength: 42
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        privateKey:
          description: >-
            The private key of the blockchain address from which the fee for
            deploying the smart contract will be deducted
          type: string
          maxLength: 66
          minLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - privateKey
        - address
    DeployErc20OffchainKMSAddress:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 42
          minLength: 42
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of either the <b>private key</b> of the
            blockchain address from which the fee for deploying the smart
            contract will be deducted, or the <b>mnemonic</b> to generate the
            private key for the blockchain address from which the fee will be
            deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - address
        - signatureId
    DeployErc20OffchainKMSXpub:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        xpub:
          description: >-
            The extended public key from which a deposit address for the virtual
            account will be generated
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        derivationIndex:
          description: >-
            The derivation index to use together with the extended public key to
            generate the deposit address
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of either the <b>private key</b> of the
            blockchain address from which the fee for deploying the smart
            contract will be deducted, or the <b>mnemonic</b> to generate the
            private key for the blockchain address from which the fee will be
            deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - xpub
        - derivationIndex
        - signatureId
    DeployKCSErc20OffchainMnemXpub:
      type: object
      properties:
        symbol:
          description: Name of the ERC20 token - stored as a symbol on Blockchain
          example: MT
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: Description of the ERC20 token
          example: My ERC20 Token
          maxLength: 100
          minLength: 1
          type: string
        basePair:
          description: >-
            Base pair for ERC20 token. 1 token will be equal to 1 unit of base
            pair. Transaction value will be calculated according to this base
            pair.
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Each unit of the created curency
            will represent value of baseRate*1 basePair.
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        xpub:
          description: >-
            Extended public key (xpub), from which address, where all initial
            supply will be stored, will be generated. Either xpub and
            derivationIndex, or address must be present, not both.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        derivationIndex:
          description: Derivation index for xpub to generate specific deposit address.
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            Mnemonic to generate private key for the deploy account of ERC20,
            from which the gas will be paid (index will be used). If address is
            not present, mnemonic is used to generate xpub and index is set to
            1. Either mnemonic and index or privateKey and address must be
            present, not both.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          description: derivation index of address to pay for deployment of ERC20
          example: 0
          type: integer
          maximum: 2147483647
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
      required:
        - description
        - supply
        - symbol
        - basePair
        - xpub
        - derivationIndex
        - mnemonic
        - index
    DeployKCSErc20OffchainMnemonicAddress:
      type: object
      properties:
        symbol:
          description: Name of the ERC20 token - stored as a symbol on Blockchain
          example: MT
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: Description of the ERC20 token
          example: My ERC20 Token
          maxLength: 100
          minLength: 1
          type: string
        basePair:
          description: >-
            Base pair for ERC20 token. 1 token will be equal to 1 unit of base
            pair. Transaction value will be calculated according to this base
            pair.
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Each unit of the created curency
            will represent value of baseRate*1 basePair.
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        address:
          description: >-
            Address on Ethereum blockchain, where all initial supply will be
            stored. Either xpub and derivationIndex, or address must be present,
            not both.
          maxLength: 42
          minLength: 42
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            Mnemonic to generate private key for the deploy account of ERC20,
            from which the gas will be paid (index will be used). If address is
            not present, mnemonic is used to generate xpub and index is set to
            1. Either mnemonic and index or privateKey and address must be
            present, not both.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          description: derivation index of address to pay for deployment of ERC20
          example: 0
          type: integer
          maximum: 2147483647
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
      required:
        - description
        - supply
        - symbol
        - basePair
        - address
        - mnemonic
        - index
    DeployKCSErc20OffchainPKXpub:
      type: object
      properties:
        symbol:
          description: Name of the ERC20 token - stored as a symbol on Blockchain
          example: MT
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: Description of the ERC20 token
          example: My ERC20 Token
          maxLength: 100
          minLength: 1
          type: string
        basePair:
          description: >-
            Base pair for ERC20 token. 1 token will be equal to 1 unit of base
            pair. Transaction value will be calculated according to this base
            pair.
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Each unit of the created curency
            will represent value of baseRate*1 basePair.
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        xpub:
          description: >-
            Extended public key (xpub), from which address, where all initial
            supply will be stored, will be generated. Either xpub and
            derivationIndex, or address must be present, not both.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        derivationIndex:
          description: Derivation index for xpub to generate specific deposit address.
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        privateKey:
          description: >-
            Private key of Ethereum account address, from which gas for
            deployment of ERC20 will be paid. Private key, mnemonic or signature
            Id must be present.
          type: string
          maxLength: 66
          minLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
      required:
        - description
        - supply
        - symbol
        - basePair
        - xpub
        - derivationIndex
        - privateKey
    DeployKCSErc20OffchainPKAddress:
      type: object
      properties:
        symbol:
          description: Name of the ERC20 token - stored as a symbol on Blockchain
          example: MT
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: Description of the ERC20 token
          example: My ERC20 Token
          maxLength: 100
          minLength: 1
          type: string
        basePair:
          description: >-
            Base pair for ERC20 token. 1 token will be equal to 1 unit of base
            pair. Transaction value will be calculated according to this base
            pair.
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Each unit of the created curency
            will represent value of baseRate*1 basePair.
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        address:
          description: >-
            Address on Ethereum blockchain, where all initial supply will be
            stored. Either xpub and derivationIndex, or address must be present,
            not both.
          maxLength: 42
          minLength: 42
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        privateKey:
          description: >-
            Private key of Ethereum account address, from which gas for
            deployment of ERC20 will be paid. Private key, mnemonic or signature
            Id must be present.
          type: string
          maxLength: 66
          minLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
      required:
        - description
        - supply
        - symbol
        - basePair
        - privateKey
        - address
    DeployKCSErc20OffchainKMSAddress:
      type: object
      properties:
        symbol:
          description: Name of the ERC20 token - stored as a symbol on Blockchain
          example: MT
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: Description of the ERC20 token
          example: My ERC20 Token
          maxLength: 100
          minLength: 1
          type: string
        basePair:
          description: >-
            Base pair for ERC20 token. 1 token will be equal to 1 unit of base
            pair. Transaction value will be calculated according to this base
            pair.
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Each unit of the created curency
            will represent value of baseRate*1 basePair.
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        address:
          description: >-
            Address on Ethereum blockchain, where all initial supply will be
            stored. Either xpub and derivationIndex, or address must be present,
            not both.
          maxLength: 42
          minLength: 42
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.

            Private key, mnemonic or signature Id must be present.
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
      required:
        - description
        - supply
        - symbol
        - basePair
        - address
        - signatureId
    DeployKCSErc20OffchainKMSXpub:
      type: object
      properties:
        symbol:
          description: Name of the ERC20 token - stored as a symbol on Blockchain
          example: MT
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: Description of the ERC20 token
          example: My ERC20 Token
          maxLength: 100
          minLength: 1
          type: string
        basePair:
          description: >-
            Base pair for ERC20 token. 1 token will be equal to 1 unit of base
            pair. Transaction value will be calculated according to this base
            pair.
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Each unit of the created curency
            will represent value of baseRate*1 basePair.
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        xpub:
          description: >-
            Extended public key (xpub), from which address, where all initial
            supply will be stored, will be generated. Either xpub and
            derivationIndex, or address must be present, not both.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        derivationIndex:
          description: Derivation index for xpub to generate specific deposit address.
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.

            Private key, mnemonic or signature Id must be present.
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
      required:
        - description
        - supply
        - symbol
        - basePair
        - xpub
        - derivationIndex
        - signatureId
    DeployAlgoErc20OffchainMnemonicAddress:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 8
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 58
          minLength: 58
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            The mnemonic to generate the private key for the blockchain address
            from which the fee for deploying the smart contract will be
            deducted; is used together with the derivation index of this address
          example: >-
            artist alarm clerk obscure timber firm reopen provide ankle vicious
            exhibit waste math toilet believe puppy lucky coast post kind black
            suspect mule able market
          type: string
        index:
          description: >-
            The derivation index of the blockchain address from which the fee
            for deploying the smart contract will be deducted; is used together
            with the mnemonic to generate the private key for this address
          example: 0
          type: integer
          maximum: 2147483647
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - address
        - mnemonic
        - index
    DeployAlgoErc20OffchainPKAddress:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 8
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 58
          minLength: 58
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        privateKey:
          description: >-
            The private key of the blockchain address from which the fee for
            deploying the smart contract will be deducted
          type: string
          maxLength: 103
          minLength: 103
          example: >-
            NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - privateKey
        - address
    DeployAlgoErc20OffchainKMSAddress:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 8
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 58
          minLength: 58
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of either the <b>private key</b> of the
            blockchain address from which the fee for deploying the smart
            contract will be deducted, or the <b>mnemonic</b> to generate the
            private key for the blockchain address from which the fee will be
            deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - address
        - signatureId
    TransferAlgoErc20:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: >-
            The ID of the virtual account to send the ERC-20-equivalent Algorand
            tokens from
          example: 61b3bffddfb389cde19c73be
          type: string
        address:
          description: >-
            The blockchain address to send the ERC-20-equivalent Algorand tokens
            to
          example: 5YVZBUH3STSQ5ABCTLEIEIJ7QOZFILM2DLAEEA4ZL6CU55ODZIQXO5EMYM
          maxLength: 58
          minLength: 58
          type: string
        amount:
          description: The amount of the ERC-20-equivalent Algorand tokens to send
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        privateKey:
          maxLength: 103
          minLength: 103
          description: >-
            The secret of the Algorand wallet (account). Secret, or signature Id
            must be present.
          example: >-
            NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q
          type: string
        compliant:
          description: >-
            Compliance check; if the withdrawal is not compliant, it will not be
            processed
          example: false
          type: boolean
        paymentId:
          description: >-
            The identifier of the token transfer that is shown on the virtual
            account for the created transaction
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: The note for the recipient; must not contain spaces
          example: Helloworld
          type: string
      required:
        - senderAccountId
        - address
        - privateKey
        - amount
        - fee
    DeployTrcOffchainMnemXpub:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          example: 6
          minimum: 0
          type: number
        type:
          description: The type of the token
          example: TRC10
          type: string
          enum:
            - TRC10
            - TRC20
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        xpub:
          description: >-
            The extended public key of the TRON wallet from which a deposit
            address for the virtual account will be generated
          maxLength: 130
          minLength: 130
          example: >-
            0244b3f40c6e570ae0032f6d7be87737a6c4e5314a4a1a82e22d0460a0d0cd794936c61f0c80dc74ace4cd04690d4eeb1aa6555883be006e1748306faa7ed3a26a
          type: string
        derivationIndex:
          description: >-
            The derivation index to use together with the extended public key to
            generate the deposit address
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            The mnemonic of the TRON wallet to generate the private key for the
            blockchain address from which the fee for deploying the smart
            contract will be deducted; is used together with the derivation
            index of this address
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          description: >-
            The derivation index of the blockchain address from which the fee
            for deploying the smart contract will be deducted; is used together
            with the mnemonic to generate the private key for this address
          example: 0
          type: integer
          maximum: 2147483647
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        url:
          description: >-
            (TRC-10 tokens only) The URL of the project that the token is
            created for<br/>Use this parameter only with TRC-10 tokens. Do
            <b>not</b> use this parameter with TRC-20 tokens.
          example: https://mytoken.com
          maxLength: 100
          minLength: 1
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - decimals
        - type
        - xpub
        - derivationIndex
        - mnemonic
        - index
    DeployTrcOffchainMnemonicAddress:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          example: 6
          minimum: 0
          type: number
        type:
          description: The type of the token
          example: TRC10
          type: string
          enum:
            - TRC10
            - TRC20
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 34
          minLength: 34
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          type: string
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            The mnemonic of the TRON wallet to generate the private key for the
            blockchain address from which the fee for deploying the smart
            contract will be deducted; is used together with the derivation
            index of this address
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          description: >-
            The derivation index of the blockchain address from which the fee
            for deploying the smart contract will be deducted; is used together
            with the mnemonic to generate the private key for this address
          example: 0
          type: integer
          maximum: 2147483647
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        url:
          description: >-
            (TRC-10 tokens only) The URL of the project that the token is
            created for<br/>Use this parameter only with TRC-10 tokens. Do
            <b>not</b> use this parameter with TRC-20 tokens.
          example: https://mytoken.com
          maxLength: 100
          minLength: 1
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - decimals
        - type
        - basePair
        - address
        - mnemonic
        - index
    DeployTrcOffchainPKXpub:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          example: 6
          minimum: 0
          type: number
        type:
          description: The type of the token
          example: TRC10
          type: string
          enum:
            - TRC10
            - TRC20
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        xpub:
          description: >-
            The extended public key of the TRON wallet from which a deposit
            address for the virtual account will be generated
          maxLength: 130
          minLength: 130
          example: >-
            0244b3f40c6e570ae0032f6d7be87737a6c4e5314a4a1a82e22d0460a0d0cd794936c61f0c80dc74ace4cd04690d4eeb1aa6555883be006e1748306faa7ed3a26a
          type: string
        derivationIndex:
          description: >-
            The derivation index to use together with the extended public key to
            generate the deposit address
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        privateKey:
          description: >-
            The private key of the blockchain address from which the fee for
            deploying the smart contract will be deducted
          type: string
          maxLength: 64
          minLength: 64
          example: e75d702ce00987633f8009fbb1eabb5b187cb5b50fe9179a8d6cee6bab076b66
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        url:
          description: >-
            (TRC-10 tokens only) The URL of the project that the token is
            created for<br/>Use this parameter only with TRC-10 tokens. Do
            <b>not</b> use this parameter with TRC-20 tokens.
          example: https://mytoken.com
          maxLength: 100
          minLength: 1
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - basePair
        - decimals
        - type
        - xpub
        - derivationIndex
        - privateKey
    DeployTrcOffchainPKAddress:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          example: 6
          minimum: 0
          type: number
        type:
          description: The type of the token
          example: TRC10
          type: string
          enum:
            - TRC10
            - TRC20
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 34
          minLength: 34
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          type: string
        privateKey:
          description: >-
            The private key of the blockchain address from which the fee for
            deploying the smart contract will be deducted
          type: string
          maxLength: 64
          minLength: 64
          example: e75d702ce00987633f8009fbb1eabb5b187cb5b50fe9179a8d6cee6bab076b66
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        url:
          description: >-
            (TRC-10 tokens only) The URL of the project that the token is
            created for<br/>Use this parameter only with TRC-10 tokens. Do
            <b>not</b> use this parameter with TRC-20 tokens.
          example: https://mytoken.com
          maxLength: 100
          minLength: 1
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - decimals
        - type
        - basePair
        - privateKey
        - address
    DeployTrcOffchainKMSAddress:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          example: 6
          minimum: 0
          type: number
        type:
          description: The type of the token
          example: TRC10
          type: string
          enum:
            - TRC10
            - TRC20
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 34
          minLength: 34
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          type: string
        from:
          description: >-
            The blockchain address from which the fee for deploying the smart
            contract will be deducted
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          maxLength: 34
          minLength: 34
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of either the <b>private key</b> of the
            blockchain address from which the fee for deploying the smart
            contract will be deducted, or the <b>mnemonic</b> of the TRON wallet
            to generate the private key for the blockchain address from which
            the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        url:
          description: >-
            (TRC-10 tokens only) The URL of the project that the token is
            created for<br/>Use this parameter only with TRC-10 tokens. Do
            <b>not</b> use this parameter with TRC-20 tokens.
          example: https://mytoken.com
          maxLength: 100
          minLength: 1
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - from
        - decimals
        - type
        - basePair
        - address
        - signatureId
    DeployTrcOffchainKMSXpub:
      type: object
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          example: 6
          minimum: 0
          type: number
        type:
          description: The type of the token
          example: TRC10
          type: string
          enum:
            - TRC10
            - TRC20
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        xpub:
          description: >-
            The extended public key of the TRON wallet from which a deposit
            address for the virtual account will be generated
          maxLength: 130
          minLength: 130
          example: >-
            0244b3f40c6e570ae0032f6d7be87737a6c4e5314a4a1a82e22d0460a0d0cd794936c61f0c80dc74ace4cd04690d4eeb1aa6555883be006e1748306faa7ed3a26a
          type: string
        derivationIndex:
          description: >-
            The derivation index to use together with the extended public key to
            generate the deposit address
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        from:
          description: >-
            The blockchain address from which the fee for deploying the smart
            contract will be deducted
          maxLength: 34
          minLength: 34
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of either the <b>private key</b> of the
            blockchain address from which the fee for deploying the smart
            contract will be deducted, or the <b>mnemonic</b> of the TRON wallet
            to generate the private key for the blockchain address from which
            the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        url:
          description: >-
            (TRC-10 tokens only) The URL of the project that the token is
            created for<br/>Use this parameter only with TRC-10 tokens. Do
            <b>not</b> use this parameter with TRC-20 tokens.
          example: https://mytoken.com
          maxLength: 100
          minLength: 1
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
      required:
        - description
        - supply
        - symbol
        - from
        - decimals
        - type
        - basePair
        - xpub
        - derivationIndex
        - signatureId
    DeployErc20:
      type: object
      properties:
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on XDC blockchain, where all created ERC20 tokens will be
            transferred.
          maxLength: 43
          minLength: 42
          example: xdca0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6
          type: string
        fromPrivateKey:
          description: >-
            Private key of XDC account address, from which the fee for the
            deployment of ERC20 will be paid. Private key, or signature Id must
            be present.
          type: string
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          maxLength: 66
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to XDC transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - name
        - symbol
        - address
        - supply
        - fromPrivateKey
        - digits
    DeployErc20KMS:
      type: object
      properties:
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on XDC blockchain, where all created ERC20 tokens will be
            transferred.
          maxLength: 43
          minLength: 42
          example: xdca0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to XDC transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - name
        - symbol
        - address
        - supply
        - signatureId
        - digits
    DeployErc721:
      type: object
      properties:
        name:
          description: Name of the ERC721 token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        symbol:
          description: Symbol of the ERC721 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        fromPrivateKey:
          description: >-
            Private key of Ethereum account address, from which gas for
            deployment of ERC721 will be paid. Private key, or signature Id must
            be present.
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - name
        - symbol
        - fromPrivateKey
    DeployErc721KMS:
      type: object
      properties:
        name:
          description: Name of the ERC721 token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        symbol:
          description: Symbol of the ERC721 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - name
        - symbol
        - signatureId
    EthBlock:
      type: object
      properties:
        difficulty:
          description: Difficulty for this block.
          type: string
          example: '3296820833'
        extraData:
          description: The 'extra data' field of this block.
          type: string
          example: 0x
        gasLimit:
          description: The maximum gas allowed in this block.
          type: number
          example: 8000000
        gasUsed:
          description: The total used gas by all transactions in this block.
          type: number
          example: 7985124
        hash:
          description: Hash of the block. 'null' when its pending block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        logsBloom:
          description: >-
            The bloom filter for the logs of the block. 'null' when its pending
            block.
          type: string
          example: >-
            0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000
        miner:
          description: >-
            The address of the beneficiary to whom the mining rewards were
            given.
          type: string
          example: '0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B'
        mixHash:
          description: ''
          type: string
          example: '0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6'
        nonce:
          description: Hash of the generated proof-of-work. 'null' when its pending block.
          type: string
          example: '0xfa1692f52a7ac672'
        number:
          description: The block number. 'null' when its pending block.
          type: number
          example: 6470657
        parentHash:
          description: Hash of the parent block.
          type: string
          example: '0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15'
        receiptsRoot:
          description: ''
          type: string
          example: '0x4a496b6b7f2a1c5850bf9eebbea7193807be0067b1c06f17b9dde4eef7b2f960'
        sha3Uncles:
          description: SHA3 of the uncles data in the block.
          type: string
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        size:
          description: The size of this block in bytes.
          type: number
          example: 15296
        stateRoot:
          description: The root of the final state trie of the block.
          type: string
          example: '0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba'
        timestamp:
          description: The unix timestamp for when the block was collated.
          type: number
          example: 1569600592
        totalDifficulty:
          description: Total difficulty of the chain until this block.
          type: string
          example: '23329673338013873'
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/EthTx'
        transactionsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: '0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704'
    FlowBlock:
      type: object
      properties:
        id:
          description: The hash of the block
          type: string
          example: e11ca8f92f2d5dea7406e64ab8cb1780a8a19185d9ac670b16ca8c4f09f05add
        parentId:
          description: The hash of the parent block
          type: string
          example: 7bd701e87f319254d19dc17459f97df6a44052d05df5e1cd442dd2e3f48ecedc
        height:
          description: The number of the block
          type: number
          example: 31733102
        timestamp:
          description: The timestamp of the block
          type: string
          example: '2021-05-11T13:00:54.913131268Z'
        collectionGuarantees:
          description: Collection guaranties
          type: array
          items:
            type: object
            properties:
              collectionId:
                type: string
                description: The collection guarantee
                example: >-
                  c0fb31b0a75d6f3d338ba8a1e8a07f343299db4be2855a3a42b0f0d33f2495d7
        blockSeals:
          description: Block seals
          type: array
          items:
            type: object
            properties:
              blockId:
                type: string
                description: The ID of the block being sealed
                example: >-
                  c85bc2853ca9596a80050b6d2661aad10bd6b27d06b013050076ad1bed2c8b6a
              executionReceiptId:
                type: string
                description: The ID of the execution receipt being sealed
                example: >-
                  e79acd6437efe49c22832802346908f9590b92fbcd452f72e3b2f1151c48f3ea
        transactions:
          description: The IDs of transactions
          type: array
          items:
            type: string
            example: 3b4351560d3b454a4c1ae2485074b0786093058bfe2b28d436584311b1e433a4
    FlowAccount:
      type: object
      properties:
        address:
          description: Account address.
          type: string
          example: '0x02fcc83938d2b63b'
        balance:
          description: Balance of the account in smallest FLOW unit = 1 FLOW = 1e8 unit
          type: number
          example: 10000000
        fusdBalance:
          description: FUSD Balance of the account
          type: string
          example: '10.00000000'
        code:
          description: Account code
          type: string
        contracts:
          type: object
        keys:
          description: Array of public keys assigned.
          type: array
          items:
            type: object
            properties:
              index:
                description: Index of the public key.
                type: number
                example: 0
              publicKey:
                type: string
                example: >-
                  ba38c835921828e11264e35fe31cc5ad90149f803fd3106e1dd1df49567a05714ed2bf5e42d58b4fef7eb9b0f7121f446d9b607216fdf04459e007b053288287
              signAlgo:
                description: Type of signature algorithm. 2 - ECDSA_secp256k1
                type: number
                example: 2
              hashAlgo:
                description: Type of hash algo. 3 - SHA3_256
                type: number
                example: 3
              sequenceNumber:
                description: Number of outgoing transactions for this public key.
                type: number
                example: 1
              revoked:
                type: boolean
                example: false
              weight:
                description: Weight of the key. 1000 means single signature necessary.
                type: number
                example: 1000
    FlowTx:
      type: object
      properties:
        referenceBlockId:
          description: Id of the block
          type: string
          example: ad8b9ab637d56e19188cd5410db6e993fbf66216296c99f7934cf9f3594f9658
        script:
          description: Script to execute in the transaction
          type: string
        args:
          description: Args to the transaction
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: Address
              value:
                type: string
                example: '0x21cbd745a4df66f1'
        gasLimit:
          type: number
          example: 1000
          description: Gas limit for the transaction
        proposalKey:
          type: object
          properties:
            address:
              type: string
              example: 21cbd745a4df66f1
            keyId:
              type: number
              example: 0
            sequenceNumber:
              type: number
              example: 20
        payer:
          type: string
          description: Address from which the assets and fees were debited
          example: 955cd3f17b2fd8ad
        payloadSignatures:
          description: Array of payload signatures.
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                example: 21cbd745a4df66f1
              keyId:
                type: number
                example: 0
              signature:
                type: string
                example: >-
                  17a936b93b405f74af8ed4c70884ef10d98e900d04fb05bf12767e64ce5e498194348a13952c86335f56c8638fbfd0b1efde66b87e6df9ad687833709f9bd3f3
        envelopeSignatures:
          description: Array of envelope signatures.
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                example: 21cbd745a4df66f1
              keyId:
                type: number
                example: 0
              signature:
                type: string
                example: >-
                  17a936b93b405f74af8ed4c70884ef10d98e900d04fb05bf12767e64ce5e498194348a13952c86335f56c8638fbfd0b1efde66b87e6df9ad687833709f9bd3f3
        status:
          type: number
          example: 4
          description: Status of the transaction
        statusCode:
          type: number
          example: 0
          description: Status cofe of the transaction
        errorMessage:
          type: string
        events:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: A.7e60df042a9c0868.FlowToken.TokensWithdrawn
              transactionId:
                type: string
                example: >-
                  d1c75a84e4bdf0dd9bf1bcd0ce4fb25f89e2ed3c5e9574dbca2760b52c428717
              transactionIndex:
                type: number
                example: 0
              eventIndex:
                type: number
                example: 0
              data:
                type: object
                description: Event specific data. May vary.
    FlowEvent:
      type: object
      properties:
        blockID:
          type: string
          example: c49322287d9ce1d05e909668a15f3e1ed5593b11ace2cbbee56eebf8e9fb1a85
        blockHeight:
          type: number
          example: 14493280
        blockTimestamp:
          type: string
          example: '2021-05-14T21:08:34.536Z'
        type:
          type: string
          example: A.7e60df042a9c0868.FlowToken.TokensWithdrawn
        transactionId:
          type: string
          example: d1c75a84e4bdf0dd9bf1bcd0ce4fb25f89e2ed3c5e9574dbca2760b52c428717
        transactionIndex:
          type: number
          example: 0
        eventIndex:
          type: number
          example: 0
        payload:
          type: object
          properties:
            type:
              type: string
              description: Type of payload.
              enum:
                - Event
            value:
              type: object
              properties:
                id:
                  type: string
                  description: Event type
                  example: A.1654653399040a61.FlowToken.TokensWithdrawn
                fields:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: name
                        description: Name of the property
                      value:
                        oneOf:
                          - type: object
                            properties:
                              type:
                                type: string
                                description: Type of the value
                                example: UFix64
                              value:
                                type: string
                                description: Value
                                example: '0.001'
                          - type: object
                            properties:
                              type:
                                type: string
                                description: Type of the value
                                example: Optional
                              value:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    description: Type of the value
                                    example: Address
                                  value:
                                    type: string
                                    description: Value
                                    example: '0x18eb4ee6b3c026d2'
    EthTx:
      type: object
      properties:
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: '0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137'
        timestamp:
          description: Time of the transaction, in UTC seconds.
          type: number
          example: 1617483956
        status:
          type: boolean
          example: true
          description: >-
            TRUE if the transaction was successful, FALSE, if the EVM reverted
            the transaction.
        blockNumber:
          type:
            - number
            - 'null'
          description: Block number where this transaction was in.
          example: 6470854
        from:
          type: string
          description: Address of the sender.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        gasPrice:
          type: string
          description: Gas price provided by the sender in wei.
          example: '1000000000'
        transactionHash:
          type: string
          description: Hash of the transaction.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
        input:
          type: string
          description: The data sent along with the transaction.
          example: 0x
        nonce:
          type: number
          description: The number of transactions made by the sender prior to this one.
          example: 26836405
        to:
          type: string
          description: >-
            Address of the receiver. 'null' when its a contract creation
            transaction.
          example: '0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d'
        transactionIndex:
          type:
            - number
            - 'null'
          description: Integer of the transactions index position in the block.
          example: 3
        value:
          type: string
          description: Value transferred in wei.
          example: '1000000000000000000'
        gasUsed:
          type:
            - number
            - 'null'
          description: The amount of gas used by this specific transaction alone.
          example: 21000
        cumulativeGasUsed:
          type:
            - number
            - 'null'
          description: >-
            The total amount of gas used when this transaction was executed in
            the block.
          example: 314159
        contractAddress:
          type: string
          description: >-
            The contract address created, if the transaction was a contract
            creation, otherwise null.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        logs:
          type: array
          description: Log events, that happened in this transaction.
          items:
            $ref: '#/components/schemas/EthTxLog'
    EthTxLog:
      type: object
      properties:
        address:
          type: string
          description: From which this event originated from.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        topics:
          type: array
          description: >-
            An array with max 4 32 Byte topics, topic 1-3 contains indexed
            parameters of the log.
          items:
            type: string
            example: '0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234'
        data:
          type: string
          description: The data containing non-indexed log parameter.
        logIndex:
          type: number
          description: Integer of the event index position in the block.
        transactionIndex:
          type: number
          description: >-
            Integer of the transaction’s index position, the event was created
            in.
        transactionHash:
          type: string
          description: Hash of the transaction this event was created in.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
    EthTxInternal:
      type: object
      properties:
        from:
          type: string
          description: Address of the sender.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        to:
          type: string
          description: >-
            Address of the receiver. 'null' when its a contract creation
            transaction.
          example: '0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d'
        value:
          type: string
          description: Value transferred in wei.
          example: '1000000000000000000'
        blockNumber:
          type: number
          description: Block number where this transaction was in.
          example: 6470854
        timeStamp:
          type: string
          description: Time of the transaction in seconds.
          example: '1477837690'
        hash:
          type: string
          description: Hash of the transaction.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
        input:
          type: string
          description: The data sent along with the transaction.
          example: ''
        traceId:
          type: string
          description: Trace ID.
          example: '0'
        type:
          type: string
          description: Type of the transaction.
          example: create
        errCode:
          type: string
          description: Error code.
          example: Bad jump destination
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        isError:
          type: string
          example: '0'
          description: 1 if the transaction was not successful, 0 otherwise.
        gasUsed:
          type: number
          description: The amount of gas used by this specific transaction alone.
          example: 21000
        contractAddress:
          type: string
          description: >-
            The contract address created, if the transaction was a contract
            creation, otherwise null.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
    TrcAddress:
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '1000000.0'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          example: 6
          minimum: 0
          type: number
        type:
          description: The type of the token
          example: TRC10
          type: string
          enum:
            - TRC10
            - TRC20
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 34
          minLength: 34
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          type: string
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: EUR
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        url:
          description: >-
            (TRC-10 tokens only) The URL of the project that the token is
            created for<br/>Use this parameter only with TRC-10 tokens. Do
            <b>not</b> use this parameter with TRC-20 tokens.
          example: https://mytoken.com
          maxLength: 100
          minLength: 1
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        accountingCurrency:
          description: >-
            The ISO 4217 code of the currency in which all transactions for the
            created virtual account will be billed
          default: EUR
          $ref: '#/components/schemas/FiatCurrency'
          example: USD
      required:
        - symbol
        - supply
        - decimals
        - type
        - description
        - basePair
        - address
      type: object
    TrcXpub:
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain
          example: MY_TOKEN
          maxLength: 30
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '1000000.0'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          example: 6
          minimum: 0
          type: number
        type:
          description: The type of the token
          example: TRC10
          type: string
          enum:
            - TRC10
            - TRC20
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        xpub:
          description: >-
            The extended public key of the TRON wallet from which a deposit
            address for the virtual account will be generated
          maxLength: 130
          minLength: 130
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        derivationIndex:
          description: >-
            The derivation index to use together with the extended public key to
            generate the deposit address
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: EUR
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        url:
          description: >-
            (TRC-10 tokens only) The URL of the project that the token is
            created for<br/>Use this parameter only with TRC-10 tokens. Do
            <b>not</b> use this parameter with TRC-20 tokens.
          example: https://mytoken.com
          maxLength: 100
          minLength: 1
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        accountingCurrency:
          description: >-
            The ISO 4217 code of the currency in which all transactions for the
            created virtual account will be billed
          default: EUR
          $ref: '#/components/schemas/FiatCurrency'
          example: USD
      required:
        - symbol
        - supply
        - decimals
        - type
        - description
        - basePair
        - xpub
        - derivationIndex
      type: object
    Erc20:
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain<br/>The token
            name that you specify here must be the same as the token name in the
            <code>symbol</code> parameter of the smart contract that you <a
            href="https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy"
            target="_blank">are going to deploy or have already deployed</a> for
            this token.
          example: MY_TOKEN
          maxLength: 30
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '1000000.0'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          minimum: 0
          example: 8
          type: number
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        xpub:
          description: >-
            The extended public key of the wallet from which a deposit address
            for the virtual account will be generated<br/><b>NOTE:</b> On
            Solana, you only can assign an existing address to the virtual
            account; use the <code>Erc20Address</code> schema of this API.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        derivationIndex:
          description: >-
            The derivation index to use together with the extended public key to
            generate the deposit address
          format: int32
          example: 0
          type: integer
          maximum: 2147483647
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: EUR
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        accountingCurrency:
          description: >-
            The ISO 4217 code of the currency in which all transactions for the
            created virtual account will be billed
          default: USD
          $ref: '#/components/schemas/FiatCurrency'
          example: USD
      required:
        - symbol
        - supply
        - decimals
        - description
        - basePair
        - derivationIndex
        - xpub
      type: object
    Erc20Address:
      properties:
        symbol:
          description: >-
            The name of the token; used as an identifier within the Tatum
            platform and as a currency symbol on the blockchain<br/>The token
            name that you specify here must be the same as the token name in the
            <code>symbol</code> parameter of the smart contract that you <a
            href="https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy"
            target="_blank">are going to deploy or have already deployed</a> for
            this token.
          example: MY_TOKEN
          maxLength: 30
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        supply:
          description: The supply of the token
          maxLength: 38
          example: '1000000.0'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        decimals:
          description: The number of decimal places that the token has
          minimum: 0
          example: 8
          type: number
        description:
          description: >-
            The description of the token; used as a description within the Tatum
            platform and as a currency name on the blockchain
          example: My Public Token
          maxLength: 100
          minLength: 1
          type: string
        address:
          description: >-
            The blockchain address to be assigned to the virtual account as a
            deposit address
          maxLength: 44
          minLength: 42
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        basePair:
          description: >-
            The base pair for the virtual currency that represents the token;
            used to calculate the value of a transaction
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: EUR
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            The exchange rate for the base pair; one unit of the created virtual
            currency equals 1 unit of
            <code>basePair</code>*<code>baseRate</code>
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        accountingCurrency:
          description: >-
            AThe ISO 4217 code of the currency in which all transactions for the
            created virtual account will be billed
          default: USD
          $ref: '#/components/schemas/FiatCurrency'
          example: USD
      required:
        - symbol
        - supply
        - decimals
        - description
        - basePair
        - address
      type: object
    Erc20Response:
      properties:
        accountId:
          description: >-
            The ID of the created virtual account with the currency set to the
            token name (the <code>symbol</code> parameter of the request
            body)<br/>The token supply will be created as soon as the token
            smart contract is deployed on the blockchain.
          type: string
          example: 5e68c66581f2ee32bc354087
        address:
          description: The deposit address of the virtual account
          example: '0xa7673161CbfE0116A4De9E341f8465940c2211d4'
          type: string
      type: object
    Trc20Response:
      properties:
        accountId:
          description: >-
            The ID of the created virtual account with the currency set to the
            token name (the <code>symbol</code> parameter of the request body)
          type: string
          example: 5e68c66581f2ee32bc354087
        address:
          description: The deposit address of the virtual account
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          type: string
      type: object
    DeployErc20Response:
      properties:
        accountId:
          description: >-
            Account ID with the type of currency as created ERC20/BEP20 token
            symbol. Account will be unfrozen when ERC20/BEP20 contract address
            will be set.
          type: string
          example: 5e68c66581f2ee32bc354087
        txId:
          description: >-
            TX hash of successful transaction. From this transaction receipt
            contract address can be obtained.
          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9
          type: string
      type: object
      required:
        - accountId
        - txId
    DeployErc20SignatureResponse:
      properties:
        accountId:
          description: >-
            Account ID with the type of currency as created ERC20/BEP20 token
            symbol. Account will be unfrozen when ERC20/BEP20 contract address
            will be set.
          type: string
          example: 5e68c66581f2ee32bc354087
        signatureId:
          description: >-
            ID of prepared payment template to sign. This is should be stored on
            a client side to retrieve ID of the blockchain transaction, when
            signing application signs the transaction and broadcasts it to the
            blockchain.
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
      type: object
      required:
        - accountId
        - signatureId
    DeployAlgoErc20Response:
      properties:
        accountId:
          description: >-
            Account ID with the type of currency as created ERC20 token symbol.
            Account will be unfrozen when ERC20 contract address will be set.
          type: string
          example: 5e68c66581f2ee32bc354087
        txId:
          description: >-
            TX hash of successful transaction. From this transaction receipt
            contract address can be obtained.
          example: JGDMW6F6BUWQLFXDEPZIUO5WCTQOL3QV7KZ2SBV44K5WE6SSNN7Q
          type: string
      type: object
      required:
        - accountId
        - txId
    DeployAlgoErc20SignatureResponse:
      properties:
        accountId:
          description: >-
            Account ID with the type of currency as created ERC20 token symbol.
            Account will be unfrozen when ERC20 contract address will be set.
          type: string
          example: 5e68c66581f2ee32bc354087
        signatureId:
          description: >-
            ID of prepared payment template to sign. This is should be stored on
            a client side to retrieve ID of the blockchain transaction, when
            signing application signs the transaction and broadcasts it to the
            blockchain.
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
      type: object
      required:
        - accountId
        - signatureId
    Error:
      properties:
        errorCode:
          description: payment.amount.notNull
          type: string
        message:
          description: Payment amount must be greater than 0.
          type: string
        statusCode:
          description: '403'
          type: number
      required:
        - errorCode
        - message
      type: object
    Error400:
      properties:
        errorCode:
          example: validation.failed
          description: validation.failed
          type: string
        message:
          example: >-
            Request validation failed. Please see data for additional
            information.
          description: >-
            Request validation failed. Please see data for additional
            information.
          type: string
        statusCode:
          example: 400
          description: '400'
          type: number
        data:
          type: array
          items:
            type: object
            required:
              - target
            properties:
              target:
                type: object
                additionalProperties: true
                description: Request object present in the body of the HTTP request
                example:
                  property: 12345
              value:
                type: number
                description: >-
                  Value of the target object which validation is wrong. Can be
                  of any data type, example here is using type number.
                example: 12345
              property:
                type: string
                description: Property name of the target object which validation is wrong
                example: property1
              constraints:
                type: object
                additionalProperties: true
                description: >-
                  Object of failed constraints for the target object. Key is the
                  constraint, value is detailed description of the failed
                  constraint.
                example:
                  min: property1 must not be less than 50000
      required:
        - errorCode
        - message
        - statusCode
        - data
      type: object
    Error401Invalid:
      properties:
        errorCode:
          example: subscription.invalid
          description: subscription.invalid
          type: string
        message:
          example: Unable to find valid subscription for '${apiKey}'
          description: Unable to find valid subscription for '${apiKey}'
          type: string
        statusCode:
          example: 401
          description: '401'
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error401NotActive:
      properties:
        errorCode:
          example: subscription.not.active
          description: subscription.not.active
          type: string
        message:
          example: Subscription not active anymore.
          description: Subscription not active anymore.
          type: string
        statusCode:
          example: 401
          description: '401'
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403ComplianceBtc:
      properties:
        errorCode:
          description: compliance.country.btc.not.supported
          example: compliance.country.btc.not.supported
          type: string
        message:
          description: Customer country not supported for BTC.
          example: Customer country not supported for BTC.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403Libra:
      properties:
        errorCode:
          description: libra.request.failed
          example: libra.request.failed
          type: string
        message:
          description: ${error}
          example: ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthBroadcast:
      properties:
        errorCode:
          description: ethereum.broadcast.failed
          example: ethereum.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthErc20NotFound:
      properties:
        errorCode:
          description: erc20.token.notFound
          example: erc20.token.notFound
          type: string
        message:
          description: No such ERC20 currency ${name}.
          example: No such ERC20 currency ${name}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxNotFound:
      properties:
        errorCode:
          description: tx.missing
          example: tx.missing
          type: string
        message:
          description: No such tx.
          example: No such tx.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error404TxNotFound:
      properties:
        errorCode:
          description: tx.not.found
          example: tx.not.found
          type: string
        message:
          description: Transaction not found. Possible not exists or is still pending.
          example: Transaction not found. Possible not exists or is still pending.
          type: string
        statusCode:
          description: '404'
          example: 404
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthErc20Set:
      properties:
        errorCode:
          description: erc20.address.set
          example: erc20.address.set
          type: string
        message:
          description: ERC20 address was already set.
          example: ERC20 address was already set.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthMnemonicPrivateKey:
      properties:
        errorCode:
          description: private.mnemonic.missing
          example: private.mnemonic.missing
          type: string
        message:
          description: Either mnemonic and index or private key must be present.
          example: Either mnemonic and index or private key must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthErc20Unsupported:
      properties:
        errorCode:
          description: eth.erc20.unsupported
          example: eth.erc20.unsupported
          type: string
        message:
          description: Unsupported ETH ERC20 blockchain.
          example: Unsupported ETH ERC20 blockchain.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthTxHash:
      properties:
        errorCode:
          description: eth.transaction.hash
          example: eth.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthTxSign:
      properties:
        errorCode:
          description: eth.transaction.sign
          example: eth.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthErc20TxSign:
      properties:
        errorCode:
          description: eth.erc20.sign
          example: eth.erc20.sign
          type: string
        message:
          description: Unable to sign transaction for contract creation. ${error}
          example: Unable to sign transaction for contract creation. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthErc721TxSign:
      properties:
        errorCode:
          description: eth.erc721.sign
          example: eth.erc721.sign
          type: string
        message:
          description: Unable to sign transaction for contract creation. ${error}
          example: Unable to sign transaction for contract creation. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthErc721Call:
      properties:
        errorCode:
          description: eth.erc721.failed
          example: eth.erc721.failed
          type: string
        message:
          description: Unable to obtain information for token. ${error}
          example: Unable to obtain information for token. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthGasCalculation:
      properties:
        errorCode:
          description: eth.transaction.gas
          example: eth.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthTxBody:
      properties:
        errorCode:
          description: ethereum.transaction.body
          example: ethereum.transaction.body
          type: string
        message:
          description: Either currency, or tokenAddress must be defined.
          example: Either currency, or tokenAddress must be defined.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthScBody:
      properties:
        errorCode:
          description: ethereum.sc.invalid
          example: ethereum.sc.invalid
          type: string
        message:
          description: Invalid parameters for smart contract invocation.
          example: Invalid parameters for smart contract invocation.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EthGasPrice:
      properties:
        errorCode:
          description: gas.price.failed
          example: gas.price.failed
          type: string
        message:
          description: Unable to obtain current GAS price.
          example: Unable to obtain current GAS price.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403ComplianceEth:
      properties:
        errorCode:
          description: compliance.country.eth.not.supported
          example: compliance.country.eth.not.supported
          type: string
        message:
          description: Customer country not supported for ETH.
          example: Customer country not supported for ETH.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountTestnet:
      properties:
        errorCode:
          description: account.blockchain.testnet
          example: account.blockchain.testnet
          type: string
        message:
          description: Unable to create account, unsupported testnet blockchain.
          example: Unable to create account, unsupported testnet blockchain.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountXpub:
      properties:
        errorCode:
          description: account.xpub.present
          example: account.xpub.present
          type: string
        message:
          description: Unable to create ${account.currency} account with xpub.
          example: Unable to create ${account.currency} account with xpub.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AddressXpub:
      properties:
        errorCode:
          description: account.xpub.present
          example: account.xpub.present
          type: string
        message:
          description: >-
            Xpub assigned to account, it is not possible to assign address. Use
            generateAddress method instead.
          example: >-
            Xpub assigned to account, it is not possible to assign address. Use
            generateAddress method instead.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountCurrency:
      properties:
        errorCode:
          description: ledger.currency.invalid
          example: ledger.currency.invalid
          type: string
        message:
          description: Unable to create an account, unsupported currency.
          example: Unable to create an account, unsupported currency.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountIncompatibleXpub:
      properties:
        errorCode:
          description: account.xpub.incompatible
          example: account.xpub.incompatible
          type: string
        message:
          description: Xpub not compatible with account currency.
          example: Xpub not compatible with account currency.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountIncompatibleXpubBtc:
      properties:
        errorCode:
          description: Address.generation.failed.wrong.xpub
          example: address.generation.failed.wrong.xpub
          type: string
        message:
          description: Unable to generate address, wrong xpub and account type.
          example: Unable to generate address, wrong xpub and account type.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountAddressGeneral:
      properties:
        errorCode:
          description: Address.generation.failed
          example: address.generation.failed
          type: string
        message:
          description: Unable to generate address.
          example: Unable to generate address.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BnbFailed:
      properties:
        errorCode:
          description: bnb.failed
          example: bnb.failed
          type: string
        message:
          description: Unable to communicate with blockchain. ${error}
          example: Unable to communicate with blockchain. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BnbAddressFailed:
      properties:
        errorCode:
          description: Address.bnb.generation.failed.wrong.xpub
          example: address.bnb.generation.failed.wrong.xpub
          type: string
        message:
          description: Unable to generate BNB address, wrong xpub and account type.
          example: Unable to generate BNB address, wrong xpub and account type.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BnbBroadcatSigFailed:
      properties:
        errorCode:
          description: bnb.broadcast.bad.signature
          example: bnb.broadcast.bad.signature
          type: string
        message:
          description: Unable to broadcast BNB transaction, bad signature.
          example: Unable to broadcast BNB transaction, bad signature.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BnbTxStateFailed:
      properties:
        errorCode:
          description: bnb.broadcast.failed.tx.state
          example: bnb.broadcast.failed.tx.state
          type: string
        message:
          description: Unable to broadcast BNB transaction, tx ${hash} state not OK.
          example: Unable to broadcast BNB transaction, tx ${hash} state not OK.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BnbTxFailed:
      properties:
        errorCode:
          description: bnb.transfer.failed
          example: bnb.transfer.failed
          type: string
        message:
          description: Unable to transfer funds. ${error}
          example: Unable to transfer funds. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcTxFailed:
      properties:
        errorCode:
          description: transaction.failed
          example: transaction.failed
          type: string
        message:
          description: No spendable inputs.
          example: No spendable inputs.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcTx:
      properties:
        errorCode:
          description: transaction.invalid.body
          example: transaction.invalid.body
          type: string
        message:
          description: Either UTXO, or addresses must be present.
          example: Either UTXO, or addresses must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountNotExists:
      properties:
        errorCode:
          description: account.not.exists
          example: account.not.exists
          type: string
        message:
          description: No such account.
          example: No such account.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BlockageNotExists:
      properties:
        errorCode:
          description: blockage.not.exists
          example: blockage.not.exists
          type: string
        message:
          description: No such blockage.
          example: No such blockage.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BlockageAmount:
      properties:
        errorCode:
          description: blockage.amount.exceeded
          example: blockage.amount.exceeded
          type: string
        message:
          description: Amount to transfer is greater then amount of the blockage.
          example: Amount to transfer is greater then amount of the blockage.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SubscriptionNotExists:
      properties:
        errorCode:
          description: subscription.not.exists
          example: subscription.not.exists
          type: string
        message:
          description: No such subscription.
          example: No such subscription.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SubscriptionType:
      properties:
        errorCode:
          description: subscription.type.invalid
          example: subscription.type.invalid
          type: string
        message:
          description: Invalid subscription type.
          example: Invalid subscription type.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SubscriptionCurrency:
      properties:
        errorCode:
          description: subscription.attr.currency.invalid
          example: subscription.attr.currency.invalid
          type: string
        message:
          description: Invalid subscription attribute 'currency'.
          example: Invalid subscription attribute 'currency'.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SubscriptionInterval:
      properties:
        errorCode:
          description: subscription.attr.interval.invalid
          example: subscription.attr.interval.invalid
          type: string
        message:
          description: Invalid subscription attribute 'interval'.
          example: Invalid subscription attribute 'interval'.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SubscriptionBalance:
      properties:
        errorCode:
          description: subscription.attr.balance.invalid
          example: subscription.attr.balance.invalid
          type: string
        message:
          description: Invalid subscription attribute 'limit' or 'typeOfBalance'.
          example: Invalid subscription attribute 'limit' or 'typeOfBalance'.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SubscriptionId:
      properties:
        errorCode:
          description: subscription.attr.incoming.invalid
          example: subscription.attr.incoming.invalid
          type: string
        message:
          description: Invalid subscription attribute 'id' or 'url'.
          example: Invalid subscription attribute 'id' or 'url'.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SubscriptionPendingId:
      properties:
        errorCode:
          description: subscription.attr.pending.invalid
          example: subscription.attr.pending.invalid
          type: string
        message:
          description: Invalid subscription attribute 'id' or 'url'.
          example: Invalid subscription attribute 'id' or 'url'.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403ReportNotAvailable:
      properties:
        errorCode:
          description: report.invalid
          example: report.invalid
          type: string
        message:
          description: Unsupported report type.
          example: Unsupported report type.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountInactive:
      properties:
        errorCode:
          description: account.inactive
          example: account.inactive
          type: string
        message:
          description: Unable to deactivate inactive account.
          example: Unable to deactivate inactive account.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountActive:
      properties:
        errorCode:
          description: account.active
          example: account.active
          type: string
        message:
          description: Unable to activate active account.
          example: Unable to activate active account.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountFrozen:
      properties:
        errorCode:
          description: account.frozen
          example: account.frozen
          type: string
        message:
          description: Unable to freeze frozen account.
          example: Unable to freeze frozen account.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountNotFrozen:
      properties:
        errorCode:
          description: account.not.frozen
          example: account.not.frozen
          type: string
        message:
          description: Unable to unfreeze unfrozen account.
          example: Unable to unfreeze unfrozen account.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403CustomerInternalNotExists:
      properties:
        errorCode:
          description: customer.internal.not.exists
          example: customer.internal.not.exists
          type: string
        message:
          description: No such customer.
          example: No such customer.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403CustomerActive:
      properties:
        errorCode:
          description: customer.active
          example: customer.active
          type: string
        message:
          description: Unable to activate active customer.
          example: Unable to activate active customer.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403CustomerInactive:
      properties:
        errorCode:
          description: customer.inactive
          example: customer.inactive
          type: string
        message:
          description: Unable to perform operation on inactive customer.
          example: Unable to perform operation on inactive customer.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403CustomerDisabled:
      properties:
        errorCode:
          description: customer.disabled
          example: customer.disabled
          type: string
        message:
          description: Unable to disable disabled customer.
          example: Unable to disable disabled customer.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403CustomerEnabled:
      properties:
        errorCode:
          description: customer.enabled
          example: customer.enabled
          type: string
        message:
          description: Unable to enable enabled customer.
          example: Unable to enable enabled customer.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403CustomerDeactivateActiveAccounts:
      properties:
        errorCode:
          description: customer.deactivate.account.active
          example: customer.deactivate.account.active
          type: string
        message:
          description: Unable to deactivate customer, accounts not deactivated.
          example: Unable to deactivate customer, accounts not deactivated.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403CustomerNotExists:
      properties:
        errorCode:
          description: customer.not.exists
          example: customer.not.exists
          type: string
        message:
          description: No customer with given external ID ${externalId} exists.
          example: No customer with given external ID ${externalId} exists.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BlockDelete:
      properties:
        errorCode:
          description: customer.blockage.inactive
          example: customer.blockage.inactive
          type: string
        message:
          description: Unable to delete blockages on account for inactive customer.
          example: Unable to delete blockages on account for inactive customer.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403CustomerNotActive:
      properties:
        errorCode:
          description: customer.not.active
          example: customer.not.active
          type: string
        message:
          description: Customer not active.
          example: Customer not active.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VCNoAccount:
      properties:
        errorCode:
          description: virtual.account.notValid
          example: virtual.account.notValid
          type: string
        message:
          description: >-
            Unable to perform operation on virtual currency, account does not
            exists.
          example: >-
            Unable to perform operation on virtual currency, account does not
            exists.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VCTxFailed:
      properties:
        errorCode:
          description: virtual.tx.failed
          example: virtual.tx.failed
          type: string
        message:
          description: >-
            Unable to perform operation on virtual currency, impossible to store
            transaction.
          example: >-
            Unable to perform operation on virtual currency, impossible to store
            transaction.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VCRevokeBalance:
      properties:
        errorCode:
          description: virtual.account.balance
          example: virtual.account.balance
          type: string
        message:
          description: Insufficient balance to revoke virtual currency on account.
          example: Insufficient balance to revoke virtual currency on account.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VCCreateFailed:
      properties:
        errorCode:
          description: virtual.creation.error
          example: virtual.creation.error
          type: string
        message:
          description: It is not possible to create virtual currency.
          example: It is not possible to create virtual currency.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VCPrefix:
      properties:
        errorCode:
          description: virtual.name.prefix
          example: virtual.name.prefix
          type: string
        message:
          description: Virtual currency has wrong name, must start with VC_.
          example: Virtual currency has wrong name, must start with VC_.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VCDuplicate:
      properties:
        errorCode:
          description: virtual.duplicate
          example: virtual.duplicate
          type: string
        message:
          description: Virtual currency with given name already exists.
          example: Virtual currency with given name already exists.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountCustomerInactive:
      properties:
        errorCode:
          description: account.customer.inactive
          example: account.customer.inactive
          type: string
        message:
          description: Unable to activate account, customer inactive.
          example: Unable to activate account, customer inactive.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountBalanceNonZero:
      properties:
        errorCode:
          description: account.balance.non.zero
          example: account.balance.non.zero
          type: string
        message:
          description: Unable to deactivate account with non-zero balance.
          example: Unable to deactivate account with non-zero balance.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TradeBalanceNonZero:
      properties:
        errorCode:
          description: account.trade.non.zero
          example: account.trade.non.zero
          type: string
        message:
          description: Unable to deactivate account with non-zero exchange trades.
          example: Unable to deactivate account with non-zero exchange trades.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AmountFormat:
      properties:
        errorCode:
          description: amount.format
          example: amount.format
          type: string
        message:
          description: Amount has incorrect format.
          example: Amount has incorrect format.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403RecipientFormat:
      properties:
        errorCode:
          description: withdrawal.recipient.format
          example: withdrawal.recipient.format
          type: string
        message:
          description: Recipient blockchain address has incorrect format.
          example: Recipient blockchain address has incorrect format.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AccountCurrencyVC:
      properties:
        errorCode:
          description: account.currency.missing
          example: account.currency.missing
          type: string
        message:
          description: No such virtual currency ${currency} for account ${account}.
          example: No such virtual currency ${currency} for account ${account}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VCNotFound:
      properties:
        errorCode:
          description: vc.not.found
          example: vc.not.found
          type: string
        message:
          description: No such virtual currency.
          example: No such virtual currency.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AddressUsed:
      properties:
        errorCode:
          description: Address.used
          example: address.used
          type: string
        message:
          description: Address and currency already in use.
          example: Address and currency already in use.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AddressNotFound:
      properties:
        errorCode:
          description: Address.not.found
          example: address.not.found
          type: string
        message:
          description: No such address exists.
          example: No such address exists.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AddressAccountXpubMissing:
      properties:
        errorCode:
          description: account.xpub.missing
          example: account.xpub.missing
          type: string
        message:
          description: >-
            No xpub assigned to account, it is not possible to generate address.
            Use assignAddress method instead.
          example: >-
            No xpub assigned to account, it is not possible to generate address.
            Use assignAddress method instead.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AddressIndexUsed:
      properties:
        errorCode:
          description: Address.index.used
          example: address.index.used
          type: string
        message:
          description: Unable to create address, derivation index is already used.
          example: Unable to create address, derivation index is already used.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcBlockchain:
      properties:
        errorCode:
          description: blockchain.error.code
          example: blockchain.error.code
          type: string
        message:
          description: '${error.message} Code: ${error.code}'
          example: '${error.message} Code: ${error.code}'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error404BlockNotExists:
      properties:
        errorCode:
          description: block.hash.not.exists
          example: block.hash.not.exists
          type: string
        message:
          description: No such block.
          example: No such block.
          type: string
        statusCode:
          description: '404'
          example: 404
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403Broadcast:
      properties:
        errorCode:
          description: blockchain.broadcast.error
          example: blockchain.broadcast.error
          type: string
        message:
          description: Unable to broadcast transaction, wrong input data.
          example: Unable to broadcast transaction, wrong input data.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BlockchainPrivateFailed:
      properties:
        errorCode:
          description: key.generation.failed.wrong.mnemonic
          example: key.generation.failed.wrong.mnemonic
          type: string
        message:
          description: Unable to generate address, wrong mnemonic and index.
          example: Unable to generate address, wrong mnemonic and index.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcUTXO:
      properties:
        errorCode:
          description: tx.hash.index.spent
          example: tx.hash.index.spent
          type: string
        message:
          description: No such UTXO for transaction and index.
          example: No such UTXO for transaction and index.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BcashBroadcast:
      properties:
        errorCode:
          description: bch.broadcast.failed
          example: bch.broadcast.failed
          type: string
        message:
          description: 'Unable to broadcast transaction. Error from blockchain: ${error}'
          example: 'Unable to broadcast transaction. Error from blockchain: ${error}'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403WithdrawalNotFound:
      properties:
        errorCode:
          description: withdrawal.missing
          example: withdrawal.missing
          type: string
        message:
          description: No such withdrawal.
          example: No such withdrawal.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KMSNotExists:
      properties:
        errorCode:
          description: kms.missing
          example: kms.missing
          type: string
        message:
          description: No such KMS signature with id '{id}'.
          example: No such KMS signature with id '{id}'.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OffchainNotCancelled:
      properties:
        errorCode:
          description: withdrawal.not.cancelled.transaction.failed
          example: withdrawal.not.cancelled.transaction.failed
          type: string
        message:
          description: >-
            Unable to broadcast transaction, and impossible to cancel
            withdrawal. ID is attached, "${withdrawalId}", cancel it manually.
          example: >-
            Unable to broadcast transaction, and impossible to cancel
            withdrawal. ID is attached, "${withdrawalId}", cancel it manually.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XlmFailed:
      properties:
        errorCode:
          description: xlm.failed
          example: xlm.failed
          type: string
        message:
          description: Unable to communicate with blockchain. ${error}
          example: Unable to communicate with blockchain. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XrpFailed:
      properties:
        errorCode:
          description: xrp.failed
          example: xrp.failed
          type: string
        message:
          description: Unable to communicate with blockchain. ${error}
          example: Unable to communicate with blockchain. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XrpCode:
      properties:
        errorCode:
          description: xrp.account.failed
          example: xrp.account.failed
          type: string
        message:
          description: '${error} Code: ${code}'
          example: '${error} Code: ${code}'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XrpLedger:
      properties:
        errorCode:
          description: xrp.ledger.failed
          example: xrp.ledger.failed
          type: string
        message:
          description: '${error} Code: ${code}'
          example: '${error} Code: ${code}'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XrpBroadcast:
      properties:
        errorCode:
          description: xrp.broadcast.failed
          example: xrp.broadcast.failed
          type: string
        message:
          description: Xrp submit tx failed. ${error}
          example: Xrp submit tx failed. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XrpMultiple:
      properties:
        errorCode:
          description: xrp.settings.multiple
          example: xrp.settings.multiple
          type: string
        message:
          description: It is possible to set 1 parameter at a time.
          example: It is possible to set 1 parameter at a time.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XrpAttr:
      properties:
        errorCode:
          description: attr.wrong.format
          example: attr.wrong.format
          type: string
        message:
          description: Wrong attr of withdrawal, should be of uint32 type.
          example: Wrong attr of withdrawal, should be of uint32 type.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XrpFee:
      properties:
        errorCode:
          description: xrp.fee
          example: xrp.fee
          type: string
        message:
          description: Unable to calculate fee.
          example: Unable to calculate fee.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XrpSign:
      properties:
        errorCode:
          description: xrp.sign.failed
          example: xrp.sign.failed
          type: string
        message:
          description: Unable to sign tx. ${error}
          example: Unable to sign tx. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XlmTxFailed:
      properties:
        errorCode:
          description: xlm.tx.failed
          example: xlm.tx.failed
          type: string
        message:
          description: Unable to construct transaction. ${error}
          example: Unable to construct transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VetFailed:
      properties:
        errorCode:
          description: vet.failed
          example: vet.failed
          type: string
        message:
          description: Unable to communicate with blockchain. ${error}
          example: Unable to communicate with blockchain. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VetGas:
      properties:
        errorCode:
          description: vet.transaction.gas
          example: vet.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403VetTxHash:
      properties:
        errorCode:
          description: vet.transaction.hash
          example: vet.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash.
          example: Unable to calculate transaction hash.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    TransactionFeeEgldBlockchain:
      type: object
      properties:
        sender:
          description: Account address of the sender
          example: erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq7
          maxLength: 62
          minLength: 62
          type: string
        receiver:
          description: Account address of the receiver or smart contract
          example: erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq6
          maxLength: 62
          minLength: 62
          type: string
        value:
          type: string
          description: Value to be sent.
          example: '0.1'
        data:
          type: string
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
      required:
        - sender
        - receiver
        - value
    Error403EgldGasCalculation:
      properties:
        errorCode:
          description: egld.transaction.gas
          example: egld.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OffchainBroadcastState:
      properties:
        errorCode:
          description: withdrawal.unexpected.state
          example: withdrawal.unexpected.state
          type: string
        message:
          description: Unable to complete withdrawal, which is not in InProgress state.
          example: Unable to complete withdrawal, which is not in InProgress state.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OffchainCancelled:
      properties:
        errorCode:
          description: withdrawal.prepare.failed
          example: withdrawal.prepare.failed
          type: string
        message:
          description: Unable to prepare transaction, withdrawal cancelled.
          example: Unable to prepare transaction, withdrawal cancelled.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OffchainNotSupported:
      properties:
        errorCode:
          description: offchain.not.supported
          example: offchain.not.supported
          type: string
        message:
          description: >-
            Offchain not supported for account with ${account.currency}
            currency.
          example: >-
            Offchain not supported for account with ${account.currency}
            currency.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403AddressAccountXpubUsed:
      properties:
        errorCode:
          description: xpub.used
          example: xpub.used
          type: string
        message:
          description: XPub already used registered within Tatum
          example: XPub already used registered within Tatum
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403RateNotFound:
      properties:
        errorCode:
          description: rate.not.found
          example: rate.not.found
          type: string
        message:
          description: No such currency rate.
          example: No such currency rate.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OffchainBroadcast:
      properties:
        errorCode:
          description: broadcast.failed.withdrawalId
          example: broadcast.failed.withdrawalId
          type: string
        message:
          description: WithdrawalId must be present.
          example: WithdrawalId must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OffchainCheck:
      properties:
        errorCode:
          description: withdrawal.check.currency
          example: withdrawal.check.currency
          type: string
        message:
          description: Withdrawal check available only for ETH based currencies.
          example: Withdrawal check available only for ETH based currencies.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcTxUtxoFailed:
      properties:
        errorCode:
          description: transaction.preparation.failed.utxo
          example: transaction.preparation.failed.utxo
          type: string
        message:
          description: Impossible to find last UTXO.
          example: Impossible to find last UTXO.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BtcMnemonicTxFailed:
      properties:
        errorCode:
          description: transaction.preparation.failed
          example: transaction.preparation.failed
          type: string
        message:
          description: >-
            Impossible to prepare transaction. Either mnemonic or keyPair and
            attr must be present.
          example: >-
            Impossible to prepare transaction. Either mnemonic or keyPair and
            attr must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403WithdrawalFailed:
      properties:
        errorCode:
          description: withdrawal.failed.transaction.failed
          example: withdrawal.failed.transaction.failed
          type: string
        message:
          description: Unable to store withdrawal, it is impossible to create transaction.
          example: Unable to store withdrawal, it is impossible to create transaction.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403WithdrawalCancelled:
      properties:
        errorCode:
          description: withdrawal.not.cancelled.transaction.failed
          example: withdrawal.not.cancelled.transaction.failed
          type: string
        message:
          description: >-
            Unable to cancel withdrawal ${id}, it is impossible to create refund
            transaction.
          example: >-
            Unable to cancel withdrawal ${id}, it is impossible to create refund
            transaction.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403FeeFormat:
      properties:
        errorCode:
          description: fee.format
          example: fee.format
          type: string
        message:
          description: Fee has incorrect format.
          example: Fee has incorrect format.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxSenderNotFound:
      properties:
        errorCode:
          description: senderAccount.not.exists
          example: senderAccount.not.exists
          type: string
        message:
          description: Unable to find sender account ${transaction.senderAccountId}.
          example: Unable to find sender account ${transaction.senderAccountId}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxSenderFrozen:
      properties:
        errorCode:
          description: senderAccount.frozen
          example: senderAccount.frozen
          type: string
        message:
          description: >-
            Sender account ${transaction.senderAccountId} is frozen, unable to
            perform payment.
          example: >-
            Sender account ${transaction.senderAccountId} is frozen, unable to
            perform payment.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxSenderCustomerDisabled:
      properties:
        errorCode:
          description: senderAccount.customer.disabled
          example: senderAccount.customer.disabled
          type: string
        message:
          description: >-
            Sender accounts customer ${senderAccount.customerId} is disabled,
            unable to perform payment.
          example: >-
            Sender accounts customer ${senderAccount.customerId} is disabled,
            unable to perform payment.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxRecipientNotFound:
      properties:
        errorCode:
          description: recipientAccount.not.exists
          example: recipientAccount.not.exists
          type: string
        message:
          description: Unable to find recipient account ${transaction.recipientAccountId}.
          example: Unable to find recipient account ${transaction.recipientAccountId}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxCurrency:
      properties:
        errorCode:
          description: transaction.currency.incompatible
          example: transaction.currency.incompatible
          type: string
        message:
          description: >-
            Incompatible currencies for sender account
            ${transaction.senderAccountId} and recipient account
            ${transaction.recipientAccountId}.
          example: >-
            Incompatible currencies for sender account
            ${transaction.senderAccountId} and recipient account
            ${transaction.recipientAccountId}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxBalance:
      properties:
        errorCode:
          description: balance.insufficient
          example: balance.insufficient
          type: string
        message:
          description: >-
            Insufficient balance for account ${transaction.senderAccountId} and
            payment amount ${transaction.amount}. Sender balance is
            ${senderAccount.balance.availableBalance as string}, amount is
            ${amount}
          example: >-
            Insufficient balance for account ${transaction.senderAccountId} and
            payment amount ${transaction.amount}. Sender balance is
            ${senderAccount.balance.availableBalance as string}, amount is
            ${amount}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxAmountBtc:
      properties:
        errorCode:
          description: amount.btc
          example: amount.btc
          type: string
        message:
          description: >-
            BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not
            ${transaction.amount}.
          example: >-
            BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not
            ${transaction.amount}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxAmountBtcOffchain:
      properties:
        errorCode:
          description: transaction.amount.btc
          example: transaction.amount.btc
          type: string
        message:
          description: >-
            BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not
            ${transaction.amount}.
          example: >-
            BTC|LTC|BCH|DOGE payment amount must be at least 0.00000001, not
            ${transaction.amount}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxAmountAda:
      properties:
        errorCode:
          description: transaction.amount.ada
          example: transaction.amount.ada
          type: string
        message:
          description: >-
            ADA payment amount must be at least 0.000001, not
            ${transaction.amount}.
          example: >-
            ADA payment amount must be at least 0.000001, not
            ${transaction.amount}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxAmountAdaOffchain:
      properties:
        errorCode:
          description: amount.ada
          example: amount.ada
          type: string
        message:
          description: >-
            ADA payment amount must be at least 0.000000000001, not
            ${transaction.amount}.
          example: >-
            ADA payment amount must be at least 0.000000000001, not
            ${transaction.amount}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403WithdrawalPending:
      properties:
        errorCode:
          description: withdrawal.pending
          example: withdrawal.pending
          type: string
        message:
          description: >-
            Unable to prepare withdrawal, last withdrawal with id ${id} is not
            yet processed by blockchain.
          example: >-
            Unable to prepare withdrawal, last withdrawal with id ${id} is not
            yet processed by blockchain.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxAmountEth:
      properties:
        errorCode:
          description: amount.eth
          example: amount.eth
          type: string
        message:
          description: >-
            ETH payment amount must be at least 0.000000000001, not
            ${transaction.amount}.
          example: >-
            ETH payment amount must be at least 0.000000000001, not
            ${transaction.amount}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxAmountEthOffchain:
      properties:
        errorCode:
          description: transaction.amount.eth
          example: transaction.amount.eth
          type: string
        message:
          description: >-
            ETH payment amount must be at least 0.000000000000000001, not
            ${transaction.amount}.
          example: >-
            ETH payment amount must be at least 0.000000000000000001, not
            ${transaction.amount}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403TxNotCompliant:
      properties:
        errorCode:
          description: transaction.not.compliant
          example: transaction.not.compliant
          type: string
        message:
          description: >-
            Transaction not compliant, recipient account customer country is not
            defined.
          example: >-
            Transaction not compliant, recipient account customer country is not
            defined.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403WithdrawalVC:
      properties:
        errorCode:
          description: withdrawal.account.virtual
          example: withdrawal.account.virtual
          type: string
        message:
          description: Sender account cannot be virtual.
          example: Sender account cannot be virtual.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403Erc20Prefix:
      properties:
        errorCode:
          description: erc20.symbol.prefix
          example: erc20.symbol.prefix
          type: string
        message:
          description: ERC20 token cannot start with VC_.
          example: ERC20 token cannot start with VC_.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403Erc20XpubBoth:
      properties:
        errorCode:
          description: erc20.address.xpub.both
          example: erc20.address.xpub.both
          type: string
        message:
          description: Either xpub or address must be present, not both.
          example: Either xpub or address must be present, not both.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403Erc20XpubMissing:
      properties:
        errorCode:
          description: erc20.address.xpub.missing
          example: erc20.address.xpub.missing
          type: string
        message:
          description: Either xpub or address must be present.
          example: Either xpub or address must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403Erc20NameDuplicate:
      properties:
        errorCode:
          description: erc20.duplicate.name
          example: erc20.duplicate.name
          type: string
        message:
          description: ERC20 token with given name already exists.
          example: ERC20 token with given name already exists.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency1NotFound:
      properties:
        errorCode:
          description: trade.currency1AccountId.not.exists
          example: trade.currency1AccountId.not.exists
          type: string
        message:
          description: Unable to find currency1 account ${trade.currency1AccountId}.
          example: Unable to find currency1 account ${trade.currency1AccountId}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderFeeNotFound:
      properties:
        errorCode:
          description: trade.feeAccount
          example: trade.feeAccount
          type: string
        message:
          description: Unable to find fee account ${trade.feeAccountId}.
          example: Unable to find fee account ${trade.feeAccountId}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderFeeIncompatible:
      properties:
        errorCode:
          description: trade.currency.fee
          example: trade.currency.fee
          type: string
        message:
          description: Incompatible currencies for currency1 and fee account.
          example: Incompatible currencies for currency1 and fee account.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency1Frozen:
      properties:
        errorCode:
          description: trade.currency1AccountId.frozen
          example: trade.currency1AccountId.frozen
          type: string
        message:
          description: >-
            Currency1 account ${trade.currency1AccountId} is frozen, unable to
            perform trade.
          example: >-
            Currency1 account ${trade.currency1AccountId} is frozen, unable to
            perform trade.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency1CustomerDisabled:
      properties:
        errorCode:
          description: trade.currency1AccountId.customer.disabled
          example: trade.currency1AccountId.customer.disabled
          type: string
        message:
          description: >-
            Currency1 account's customer ${currency1Account.customerId} is
            disabled, unable to perform exchange trade.
          example: >-
            Currency1 account's customer ${currency1Account.customerId} is
            disabled, unable to perform exchange trade.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency2NotFound:
      properties:
        errorCode:
          description: trade.currency2AccountId.not.exists
          example: trade.currency2AccountId.not.exists
          type: string
        message:
          description: Unable to find currency2 account ${trade.currency2AccountId}.
          example: Unable to find currency2 account ${trade.currency2AccountId}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency2Frozen:
      properties:
        errorCode:
          description: trade.currency2AccountId.frozen
          example: trade.currency2AccountId.frozen
          type: string
        message:
          description: >-
            Currency2 account ${trade.currency2AccountId} is frozen, unable to
            perform trade.
          example: >-
            Currency2 account ${trade.currency2AccountId} is frozen, unable to
            perform trade.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency2CustomerDisabled:
      properties:
        errorCode:
          description: trade.currency2AccountId.customer.disabled
          example: trade.currency2AccountId.customer.disabled
          type: string
        message:
          description: >-
            Currency2 account's customer ${currency2Account.customerId} is
            disabled, unable to perform exchange trade.
          example: >-
            Currency2 account's customer ${currency2Account.customerId} is
            disabled, unable to perform exchange trade.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency1Pair:
      properties:
        errorCode:
          description: trade.currency1.pair
          example: trade.currency1.pair
          type: string
        message:
          description: >-
            Incompatible currencies for currency1 account
            ${trade.currency1AccountId} and trading pair.
          example: >-
            Incompatible currencies for currency1 account
            ${trade.currency1AccountId} and trading pair.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency2Pair:
      properties:
        errorCode:
          description: trade.currency2.pair
          example: trade.currency2.pair
          type: string
        message:
          description: >-
            Incompatible currencies for currency2 account
            ${trade.currency2AccountId} and trading pair.
          example: >-
            Incompatible currencies for currency2 account
            ${trade.currency2AccountId} and trading pair.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency1Balance:
      properties:
        errorCode:
          description: trade.currency1.balance
          example: trade.currency1.balance
          type: string
        message:
          description: >-
            Insufficient balance on currency1 account
            ${trade.currency1AccountId}.
          example: >-
            Insufficient balance on currency1 account
            ${trade.currency1AccountId}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OrderCurrency2Balance:
      properties:
        errorCode:
          description: trade.currency2.balance
          example: trade.currency2.balance
          type: string
        message:
          description: >-
            Insufficient balance on currency2 account
            ${trade.currency2AccountId}.
          example: >-
            Insufficient balance on currency2 account
            ${trade.currency2AccountId}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error500:
      properties:
        message:
          example: Internal server error
          description: Internal server error
          type: string
        statusCode:
          example: 500
          description: '500'
          type: number
      required:
        - statusCode
        - message
      type: object
    Error403:
      properties:
        message:
          example: Forbidden
          description: Forbidden
          type: string
        statusCode:
          example: 403
          description: '403'
          type: number
      required:
        - statusCode
        - message
      type: object
    Error401:
      properties:
        message:
          example: Unauthorized
          description: Unauthorized
          type: string
        statusCode:
          example: 401
          description: '401'
          type: number
      required:
        - statusCode
        - message
      type: object
    FeeEvmBased:
      type: object
      required:
        - gasLimit
        - gasPrice
      properties:
        gasLimit:
          type: number
          description: Gas limit for transaction in gas price.
          example: 40000
        gasPrice:
          type: number
          description: Gas price in Gwei.
          example: 20
    FeeBtcBased:
      type: object
      required:
        - fast
        - medium
        - slow
      properties:
        fast:
          type: string
          description: >-
            Transaction fee in BTC|LTC to be paid, if transaction should be
            included in next 1-2 blocks.
          example: '0.006584'
        medium:
          type: string
          description: >-
            Transaction fee in BTC|LTC to be paid, if transaction should be
            included in next 5-6 blocks.
          example: '0.004584'
        slow:
          type: string
          description: >-
            Transaction fee in BTC|LTC to be paid, if transaction should be
            included in next 7+ blocks.
          example: '0.002584'
    EstimateFee:
      type: object
      required:
        - chain
        - type
      properties:
        chain:
          type: string
          description: The blockchain to estimate the fee for
          enum:
            - CELO
            - ETH
            - BSC
            - XDC
            - ONE
            - MATIC
            - KLAY
        type:
          type: string
          description: The type of the transaction
          enum:
            - DEPLOY_ERC20
            - DEPLOY_NFT
            - MINT_NFT
            - BURN_NFT
            - TRANSFER_NFT
            - TRANSFER_ERC20
            - DEPLOY_AUCTION
            - DEPLOY_MARKETPLACE
        sender:
          type: string
          maxLength: 42
          minLength: 42
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          description: >-
            (Only if <code>type=TRANSFER_ERC20</code>) The blockchain address of
            the sender address
        recipient:
          description: >-
            (Only if <code>type=TRANSFER_ERC20</code>) The blockchain address of
            the recipient address
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        contractAddress:
          description: >-
            (Only if <code>type=TRANSFER_ERC20</code>) The blockchain address of
            the smart address of the fungible token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: >-
            (Only if <code>type=TRANSFER_ERC20</code>) The amount of the
            fungible token to be sent
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
    EstimateFeeDeployCustodialWallet:
      type: object
      required:
        - chain
        - type
        - batchCount
      properties:
        chain:
          type: string
          description: Blockchain to estimate fee for.
          enum:
            - CELO
            - ETH
            - BSC
            - XDC
            - ONE
            - MATIC
            - KLAY
        type:
          type: string
          description: Type of transaction
          enum:
            - DEPLOY_CUSTODIAL_WALLET_BATCH
        batchCount:
          description: Number of addresses to create
          example: 10
          minimum: 1
          maximum: 300
          type: number
    EstimateFeeBatchMintNft:
      type: object
      required:
        - chain
        - type
        - sender
        - recipients
        - tokenIds
        - urls
        - contractAddress
      properties:
        chain:
          type: string
          description: Blockchain to estimate fee for.
          enum:
            - CELO
            - ETH
            - BSC
            - XDC
            - ONE
            - MATIC
            - KLAY
        type:
          type: string
          description: Type of transaction
          enum:
            - MINT_NFT_BATCH
        sender:
          type: string
          maxLength: 42
          minLength: 43
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          description: Address of the minter
        recipients:
          type: array
          description: Blockchain addresses to mint tokens to
          items:
            example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
            maxLength: 42
            minLength: 43
            type: string
        contractAddress:
          description: Contract address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 43
          type: string
        tokenIds:
          type: array
          description: Token IDs
          items:
            example: '100000'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
            type: string
        urls:
          type: array
          description: Metadata URLs
          items:
            example: ipfs://QmXJJ6UF5WkF4WTJvsdhiA1etGwBLfpva7Vr9AudGMe3pj
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
            type: string
    EstimateFeeTransferFromCustodial:
      type: object
      required:
        - chain
        - type
        - sender
        - recipient
        - custodialAddress
        - amount
        - tokenType
      properties:
        chain:
          type: string
          description: The blockchain to estimate the fee for
          enum:
            - CELO
            - ETH
            - BSC
            - XDC
            - KLAY
            - ONE
            - MATIC
        type:
          type: string
          description: The type of the transaction
          enum:
            - TRANSFER_CUSTODIAL
        sender:
          type: string
          maxLength: 42
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          minLength: 42
          description: The blockchain address of the sender
        recipient:
          description: The blockchain address of the recipient
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        contractAddress:
          description: Contract address of the token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        custodialAddress:
          description: The blockchain address of the custodial wallet contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        tokenType:
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent), or <code>3</code> for native blockchain currencies.
          example: 0
          type: number
          minimum: 0
          maximum: 3
          enum:
            - 0
            - 1
            - 2
            - 3
        amount:
          description: >
            <ul><li>If the asset to transfer is a fungible token, Multi Token,
            or a native blockchain currency, set this parameter to the amount to
            transfer.</li>

            <li>If the asset to transfer is an NFT, set this parameter to
            <code>1</code>.</li></ul>
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: (only if tokenType = 1 or 2) Token id
          example: '1234'
          type: string
          minimum: 1
    OffchainEstimateFee:
      type: object
      required:
        - senderAccountId
        - address
        - amount
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, and DOGE, it is
            possible to enter list of multiple recipient blockchain addresses as
            a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, and DOGE, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        attr:
          description: >-
            Used to parametrize withdrawal as a change address for left coins
            from transaction. XPub or attr must be used.
          maxLength: 256
          minLength: 1
          type: string
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
    EstimateFeeFromAddress:
      type: object
      required:
        - chain
        - type
        - fromAddress
        - to
      properties:
        chain:
          type: string
          description: Blockchain to estimate fee for.
          enum:
            - BTC
            - DOGE
            - LTC
        type:
          type: string
          description: Type of transaction
          enum:
            - TRANSFER
        fromAddress:
          description: >-
            Array of addresses. Tatum will automatically scan last 100
            transactions for each address and will use all of the unspent
            values. We advise to use this option if you have 1 address per 1
            transaction only.
          type: array
          items:
            type: string
            example: 2N9bBiH2qrTDrPCzrNhaFGdkNKS86PJAAAS
            minimum: 30
            maximum: 50
        to:
          description: >-
            Array of addresses and values to send bitcoins to. Values must be
            set in BTC. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: Amount to be sent, in BTC.
                type: number
                minimum: 0
                example: 0.02969944
    EstimateFeeFromUTXO:
      type: object
      required:
        - chain
        - type
        - fromUTXO
        - to
      properties:
        chain:
          type: string
          description: Blockchain to estimate fee for.
          enum:
            - BTC
            - DOGE
            - LTC
        type:
          type: string
          description: Type of transaction
          enum:
            - TRANSFER
        fromUTXO:
          description: >-
            Array of transaction hashes, index of UTXO in it and corresponding
            private keys. Use this option if you want to calculate amount to
            send manually. Either fromUTXO or fromAddress must be present.
          type: array
          items:
            type: object
            required:
              - txHash
              - index
            properties:
              txHash:
                description: Transaction hash of the UTXO to be spent.
                type: string
                example: >-
                  53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc
                minLength: 64
                maxLength: 64
              index:
                description: Index of the UTXO to be spent.
                type: number
                example: 0
                minimum: 0
                maximum: 2147483647
        to:
          description: >-
            Array of addresses and values to send bitcoins to. Values must be
            set in BTC. Difference between from and to is transaction fee.
          type: array
          items:
            type: object
            required:
              - address
              - value
            properties:
              address:
                description: Destination address.
                type: string
                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7
                minimum: 30
                maximum: 60
              value:
                description: Amount to be sent, in BTC.
                type: number
                minimum: 0
                example: 0.02969944
    MarketValue:
      description: FIAT value of transaction.
      properties:
        amount:
          description: Value of transaction in given base pair.
          example: '1235.56'
          type: string
        currency:
          description: Base pair.
          example: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        sourceDate:
          description: Date of validity of rate in UTC.
          example: 1572031674384
          type: number
        source:
          description: Source of base pair.
          example: fixer.io
          type: string
      type: object
      required:
        - amount
        - currency
        - sourceDate
        - source
    BlockchainFee:
      description: Recommended fees to perform blockchain transaction
      properties:
        fast:
          description: >-
            Fast transaction acceptance time into block. For btc-based chains -
            fee per byte. For evm-based chains - gas price in wei
          example: 14766927339
          type: number
        medium:
          description: >-
            Medium transaction acceptance time into block. For btc-based chains
            - fee per byte. For evm-based chains - gas price in wei
          example: 13333333333
          type: number
        slow:
          description: >-
            Slow transaction acceptance time into block. For btc-based chains -
            fee per byte. For evm-based chains - gas price in wei
          example: 12953333333
          type: number
        baseFee:
          description: >-
            (evm-based only) This is the minimum fee needs to paid in order for
            the tx to be accepted into block.
          example: 12657357496
          type: number
        time:
          description: Last time fees were recalculated
          example: '2022-12-08T08:42:04.518Z'
          type: string
        block:
          description: Last used to calculate fee from
          example: 16138867
          type: number
      type: object
      required:
        - fast
        - medium
        - slow
        - time
        - block
    ExchangeRate:
      description: FIAT value in EURO of the FIAT or crypto asset.
      properties:
        id:
          description: FIAT or crypto asset.
          example: BTC
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        value:
          description: FIAT value of the asset in given base pair.
          example: '1235.56'
          type: string
        basePair:
          description: Base pair.
          example: EUR
          default: EUR
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
        timestamp:
          description: Date of validity of rate in UTC.
          example: 1572031674384
          type: number
        source:
          description: Source of base pair.
          example: fixer.io
          type: string
        batchId:
          description: Used for identification in batch calls
          example: one
          type: string
      type: object
      required:
        - id
        - value
        - basePair
        - timestamp
        - source
    RateQuery:
      type: object
      properties:
        batchId:
          description: Used for identification, will be returned with result pair
          example: one
          type: string
        basePair:
          description: Base pair.
          example: EUR
          $ref: '#/components/schemas/FiatCurrency'
        currency:
          description: FIAT or crypto asset.
          example: BTC
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
      required:
        - batchId
        - basePair
        - currency
    Object:
      type: object
    Consumption:
      type: object
      properties:
        day:
          type: string
          description: The date in the MM/DD/YYYY format
          example: 10/25/2020
        usage:
          type: number
          description: The number of credits used on the specified day
          example: 123
    PrivKey:
      type: object
      properties:
        key:
          description: Generated private key.
          example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
          type: string
    PrivKeyRequest:
      type: object
      properties:
        index:
          description: Derivation index of private key to generate.
          example: 0
          maximum: 2147483647
          type: integer
        mnemonic:
          maxLength: 500
          minLength: 1
          description: Mnemonic to generate private key from.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
      required:
        - mnemonic
        - index
    EthBalance:
      type: object
      properties:
        balance:
          type: string
          description: Balance in ETH
          example: '10.52'
    Transaction:
      properties:
        accountId:
          description: Source account - source of transaction(s)
          example: 5e6645712b55823de7ea82f1
          type: string
        counterAccountId:
          description: >-
            Counter account - transaction(s) destination account. In case of
            blockchain recipient, this is addess of blockchain account.
          example: 5e6645712b55823de7ea82f1
          type: string
        currency:
          description: Transaction currency
          example: BTC
          type: string
        amount:
          description: Amount in account's currency
          example: '0.1'
          type: string
        anonymous:
          description: >-
            Whether the transaction is anonymous. If true, counter account owner
            does not see source account.
          example: false
          type: boolean
        created:
          description: Time in UTC of transaction.
          example: 1572031674384
          type: number
        marketValue:
          $ref: '#/components/schemas/MarketValue'
        operationType:
          description: Type of operation.
          enum:
            - PAYMENT
            - WITHDRAWAL
            - BLOCKCHAIN_TRANSACTION
            - EXCHANGE
            - FAILED
            - DEPOSIT
            - MINT
            - REVOKE
          example: PAYMENT
          type: string
        transactionType:
          description: Type of payment.
          enum:
            - FAILED
            - DEBIT_PAYMENT
            - CREDIT_PAYMENT
            - CREDIT_DEPOSIT
            - DEBIT_WITHDRAWAL
            - CANCEL_WITHDRAWAL
            - DEBIT_OUTGOING_PAYMENT
            - CREDIT_INCOMING_PAYMENT
            - EXCHANGE_BUY
            - EXCHANGE_SELL
          example: CREDIT_PAYMENT
          type: string
        reference:
          description: >-
            Transaction internal reference - unique identifier within Tatum
            ledger. In order of failure, use this value to search for problems.
          example: 5e6be8e9e6aa436299950c41
          type: string
        transactionCode:
          description: For bookkeeping to distinct transaction purpose.
          example: 1_01_EXTERNAL_CODE
          type: string
        senderNote:
          description: Note visible for sender.
          example: Sender note
          type: string
        recipientNote:
          description: Note visible for both sender and recipient.
          example: Private note
          type: string
        paymentId:
          description: Payment ID defined in payment order by sender.
          example: '65426'
          type: string
        attr:
          example: '123'
          description: >-
            Present only for operationType WITHDRAWAL and XLM / XRP based
            accounts it represents message or destinationTag of the recipient,
            if present.
          type: string
        address:
          type: string
          description: >-
            For operationType DEPOSIT it represents address, on which was
            deposit credited for the account.
          example: qrppgud79n5h5ehqt9s7x8uc82pcag82es0w9tada0
        txId:
          type: string
          description: >-
            For operationType DEPOSIT, BLOCKCHAIN_TRANSACTION it represents
            transaction id, for which deposit occured.
          example: c6c176e3f6705596d58963f0ca79b34ffa5b78874a65df9c974e22cf86a7ba67
      type: object
      required:
        - accountId
        - reference
        - anonymous
        - amount
        - marketValue
        - created
        - operationType
        - transactionType
        - currency
    TransactionFilter:
      properties:
        id:
          description: Account ID - source of transaction(s).
          example: 5e6be8e9e6aa436299950c41
          maxLength: 24
          minLength: 24
          type: string
        counterAccount:
          description: Counter account - transaction(s) destination account.
          example: 5e6be8e9e6aa436299950c41
          maxLength: 24
          minLength: 24
          type: string
        from:
          description: >-
            Starting date to search for transactions from in UTC millis. If not
            present, search all history.
          example: 1571833231000
          type: integer
          format: int64
          minimum: 0
        to:
          description: >-
            Date until to search for transactions in UTC millis. If not present,
            search up till now.
          example: 1571833231000
          type: integer
          format: int64
          minimum: 0
        currency:
          description: Currency of the transactions.
          example: BTC
          minLength: 1
          maxLength: 50
          type: string
        amount:
          type: array
          description: Amount of the transaction. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        currencies:
          description: List of currencies of the transactions.
          type: array
          items:
            example: BTC
            minLength: 1
            maxLength: 50
            type: string
        transactionType:
          description: Type of payment
          enum:
            - FAILED
            - DEBIT_PAYMENT
            - CREDIT_PAYMENT
            - CREDIT_DEPOSIT
            - DEBIT_WITHDRAWAL
            - CANCEL_WITHDRAWAL
            - DEBIT_OUTGOING_PAYMENT
            - EXCHANGE_BUY
            - EXCHANGE_SELL
            - DEBIT_TRANSACTION
            - CREDIT_INCOMING_PAYMENT
        transactionTypes:
          description: Types of payment
          type: array
          items:
            type: string
            example: CREDIT_PAYMENT
            enum:
              - FAILED
              - DEBIT_PAYMENT
              - CREDIT_PAYMENT
              - CREDIT_DEPOSIT
              - DEBIT_WITHDRAWAL
              - CANCEL_WITHDRAWAL
              - DEBIT_OUTGOING_PAYMENT
              - EXCHANGE_BUY
              - EXCHANGE_SELL
              - DEBIT_TRANSACTION
              - CREDIT_INCOMING_PAYMENT
        opType:
          description: Type of operation
          enum:
            - PAYMENT
            - WITHDRAWAL
            - BLOCKCHAIN_TRANSACTION
            - EXCHANGE
            - FAILED
            - DEPOSIT
            - MINT
            - REVOKE
          example: PAYMENT
          type: string
        transactionCode:
          description: For bookkeeping to distinct transaction purpose.
          example: 1_01_EXTERNAL_CODE
          maxLength: 100
          minLength: 1
          type: string
        paymentId:
          description: Payment ID defined in payment order by sender.
          example: '65426'
          maxLength: 100
          minLength: 1
          type: string
        recipientNote:
          description: Recipient note defined in payment order by sender.
          example: '65426'
          maxLength: 500
          minLength: 1
          type: string
        senderNote:
          description: Sender note defined in payment order by sender.
          example: '65426'
          maxLength: 500
          minLength: 1
          type: string
      required:
        - id
      type: object
    TransactionFilterCustomer:
      properties:
        id:
          description: Customer internal ID to search for.
          example: 5e6be8e9e6aa436299950c41
          maxLength: 24
          minLength: 24
          type: string
        account:
          description: Source account - source of transaction(s).
          example: 5e6be8e9e6aa436299950c41
          maxLength: 24
          minLength: 24
          type: string
        counterAccount:
          description: Counter account - transaction(s) destination account.
          example: 5e6be8e9e6aa436299950c41
          maxLength: 24
          minLength: 24
          type: string
        currency:
          description: Currency of the transactions.
          example: BTC
          minLength: 1
          maxLength: 50
          type: string
        from:
          description: >-
            Starting date to search for transactions from in UTC millis. If not
            present, search all history.
          example: 1571833231000
          type: integer
          format: int64
          minimum: 0
        to:
          description: >-
            Date until to search for transactions in UTC millis. If not present,
            search up till now.
          example: 1571833231000
          type: integer
          format: int64
          minimum: 0
        amount:
          type: array
          description: Amount of the transaction. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        currencies:
          description: List of currencies of the transactions.
          type: array
          items:
            example: BTC
            minLength: 1
            maxLength: 50
            type: string
        transactionType:
          description: Type of payment
          enum:
            - FAILED
            - DEBIT_PAYMENT
            - CREDIT_PAYMENT
            - CREDIT_DEPOSIT
            - DEBIT_WITHDRAWAL
            - CANCEL_WITHDRAWAL
            - DEBIT_OUTGOING_PAYMENT
            - EXCHANGE_BUY
            - EXCHANGE_SELL
            - DEBIT_TRANSACTION
            - CREDIT_INCOMING_PAYMENT
        transactionTypes:
          description: Types of payment
          type: array
          items:
            type: string
            example: CREDIT_PAYMENT
            enum:
              - FAILED
              - DEBIT_PAYMENT
              - CREDIT_PAYMENT
              - CREDIT_DEPOSIT
              - DEBIT_WITHDRAWAL
              - CANCEL_WITHDRAWAL
              - DEBIT_OUTGOING_PAYMENT
              - EXCHANGE_BUY
              - EXCHANGE_SELL
              - DEBIT_TRANSACTION
              - CREDIT_INCOMING_PAYMENT
        opType:
          description: Type of operation.
          enum:
            - PAYMENT
            - WITHDRAWAL
            - BLOCKCHAIN_TRANSACTION
            - EXCHANGE
            - FAILED
            - DEPOSIT
            - MINT
            - REVOKE
          example: PAYMENT
          type: string
        transactionCode:
          description: For bookkeeping to distinct transaction purpose.
          example: 1_01_EXTERNAL_CODE
          maxLength: 100
          minLength: 1
          type: string
        paymentId:
          description: Payment ID defined in payment order by sender.
          example: '65426'
          maxLength: 100
          minLength: 1
          type: string
        recipientNote:
          description: Recipient note defined in payment order by sender.
          example: '65426'
          maxLength: 500
          minLength: 1
          type: string
        senderNote:
          description: Sender note defined in payment order by sender.
          example: '65426'
          maxLength: 500
          minLength: 1
          type: string
      required:
        - id
      type: object
    TransactionFilterLedger:
      properties:
        account:
          description: Source account - source of transaction(s).
          example: 5e6be8e9e6aa436299950c41
          maxLength: 24
          minLength: 24
          type: string
        counterAccount:
          description: Counter account - transaction(s) destination account.
          example: 5e6be8e9e6aa436299950c41
          maxLength: 24
          minLength: 24
          type: string
        currency:
          description: Currency of the transactions.
          example: BTC
          minLength: 1
          maxLength: 50
          type: string
        from:
          description: >-
            Starting date to search for transactions from in UTC millis. If not
            present, search all history.
          example: 1571833231000
          type: integer
          format: int64
          minimum: 0
        amount:
          type: array
          description: Amount of the transaction. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        currencies:
          description: List of currencies of the transactions.
          type: array
          items:
            example: BTC
            minLength: 1
            maxLength: 50
            type: string
        transactionType:
          description: Type of payment
          enum:
            - FAILED
            - DEBIT_PAYMENT
            - CREDIT_PAYMENT
            - CREDIT_DEPOSIT
            - DEBIT_WITHDRAWAL
            - CANCEL_WITHDRAWAL
            - DEBIT_OUTGOING_PAYMENT
            - EXCHANGE_BUY
            - EXCHANGE_SELL
            - DEBIT_TRANSACTION
            - CREDIT_INCOMING_PAYMENT
        transactionTypes:
          description: Types of payment
          type: array
          items:
            type: string
            example: CREDIT_PAYMENT
            enum:
              - FAILED
              - DEBIT_PAYMENT
              - CREDIT_PAYMENT
              - CREDIT_DEPOSIT
              - DEBIT_WITHDRAWAL
              - CANCEL_WITHDRAWAL
              - DEBIT_OUTGOING_PAYMENT
              - EXCHANGE_BUY
              - EXCHANGE_SELL
              - DEBIT_TRANSACTION
              - CREDIT_INCOMING_PAYMENT
        opType:
          description: Type of operation.
          enum:
            - PAYMENT
            - WITHDRAWAL
            - BLOCKCHAIN_TRANSACTION
            - EXCHANGE
            - FAILED
            - DEPOSIT
            - MINT
            - REVOKE
          example: PAYMENT
          type: string
        transactionCode:
          description: For bookkeeping to distinct transaction purpose.
          example: 1_01_EXTERNAL_CODE
          maxLength: 100
          minLength: 1
          type: string
        paymentId:
          description: Payment ID defined in payment order by sender.
          example: '65426'
          maxLength: 100
          minLength: 1
          type: string
        recipientNote:
          description: Recipient note defined in payment order by sender.
          example: '65426'
          maxLength: 500
          minLength: 1
          type: string
        senderNote:
          description: Sender note defined in payment order by sender.
          example: '65426'
          maxLength: 500
          minLength: 1
          type: string
        to:
          description: >-
            Date until to search for transactions in UTC millis. If not present,
            search up till now.
          example: 1571833231000
          type: integer
          format: int64
          minimum: 0
      type: object
    TransactionResult:
      properties:
        reference:
          description: >-
            The internal reference to the transaction (a unique identifier of
            the transaction within the virtual account); if the transaction
            fails, use this reference to search through the logs
          example: 0c64cc04-5412-4e57-a51c-ee5727939bcb
          type: string
      type: object
    BatchTransactionResult:
      type: array
      items:
        description: >-
          The internal reference to the transaction (a unique identifier of the
          transaction within the virtual account); if the transaction fails, use
          this reference to search through the logs
        example: 0c64cc04-5412-4e57-a51c-ee5727939bcb
        type: string
    TransferBnbBlockchain:
      type: object
      properties:
        to:
          description: Blockchain address to send assets.
          example: tbnb138u9djee6fwphhd2a3628q2h0j5w97yx48zqex
          maxLength: 100
          minLength: 1
          type: string
        currency:
          description: Currency to transfer from Binance Blockchain Account.
          enum:
            - BNB
          example: BNB
          type: string
        amount:
          description: Amount to be sent in BNB.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 100
          minLength: 1
          example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
          description: Private key of sender address.
        message:
          maxLength: 50
          minLength: 1
          description: Message to recipient.
          example: Message to recipient
          type: string
      required:
        - to
        - amount
        - fromPrivateKey
        - currency
    TransferBnbBlockchainKMS:
      type: object
      properties:
        to:
          description: Blockchain address to send assets.
          example: tbnb138u9djee6fwphhd2a3628q2h0j5w97yx48zqex
          maxLength: 100
          minLength: 1
          type: string
        currency:
          description: Currency to transfer from Binance Blockchain Account.
          enum:
            - BNB
          example: BNB
          type: string
        amount:
          description: Amount to be sent in BNB.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Signature hash of the mnemonic, which will be used to sign
            transactions locally.

            All signature Ids should be present, which might be used to sign
            transaction.
        fromAddress:
          description: Blockchain address to send from
          example: tbnb1q82g2h9q0kfe7sysnj5w7nlak92csfjztymp39
          maxLength: 50
          minLength: 42
          type: string
        message:
          maxLength: 50
          minLength: 1
          description: Message to recipient.
          example: Message to recipient
          type: string
      required:
        - to
        - amount
        - signatureId
        - fromAddress
        - currency
    TransferLtcMnemonic:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 0.0005 LTC is used. Minimum fee is 0.00001
            LTC.
          example: '0.0005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >
            Mnemonic seed - usually 12-24 words with access to whole wallet.

            Either mnemonic, keyPair or signature Id must be present - depends
            on the type of account and xpub.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts. Should be present, when mnemonic is used.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - mnemonic
        - xpub
      type: object
    TransferLtcKeyPair:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 0.0005 LTC is used. Minimum fee is 0.00001
            LTC.
          example: '0.0005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        keyPair:
          description: >
            Array of assigned blockchain addresses with their private keys.

            Either mnemonic, keyPair or signature Id must be present - depends
            on the type of account and xpub.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: >-
                  Blockchain address assigned to account withdrawal is made
                  from.
                maxLength: 50
                minLength: 30
              privateKey:
                type: string
                description: Private key of blockchain address.
                maxLength: 52
                example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
                minLength: 52
        attr:
          description: >-
            Used to parametrize withdrawal as a change address for left coins
            from transaction.
          maxLength: 256
          minLength: 1
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - keyPair
        - attr
      type: object
    TransferLtcKMS:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 0.0005 LTC is used. Minimum fee is 0.00001
            LTC.
          example: '0.0005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Signature hash of the mnemonic, which will be used to sign
            transactions locally.

            All signature Ids should be present, which might be used to sign
            transaction.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts. Should be present, when mnemonic is used.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - signatureId
        - xpub
      type: object
    TransferDogeMnemonic:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 1 DOGE is used.
          example: '1'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >
            Mnemonic seed - usually 12-24 words with access to whole wallet.

            Either mnemonic, keyPair or signature Id must be present - depends
            on the type of account and xpub.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts. Should be present, when mnemonic is used.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - mnemonic
        - xpub
      type: object
    TransferDogeKeyPair:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 1 DOGE is used.
          example: '1'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        keyPair:
          description: >
            Array of assigned blockchain addresses with their private keys.

            Either mnemonic, keyPair or signature Id must be present - depends
            on the type of account and xpub.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: >-
                  Blockchain address assigned to account withdrawal is made
                  from.
                maxLength: 50
                minLength: 30
              privateKey:
                type: string
                description: Private key of blockchain address.
                maxLength: 52
                example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
                minLength: 52
        attr:
          description: >-
            Used to parametrize withdrawal as a change address for left coins
            from transaction.
          maxLength: 256
          minLength: 1
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - keyPair
        - attr
      type: object
    TransferDogeKMS:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 1 DOGE is used.
          example: '1'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Signature hash of the mnemonic, which will be used to sign
            transactions locally.

            All signature Ids should be present, which might be used to sign
            transaction.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts. Should be present, when mnemonic is used.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - signatureId
        - xpub
      type: object
    TransferBtcMnemonic:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 0.0005 BTC is used. Minimum fee is 0.00001
            BTC.
          example: '0.0005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >
            Mnemonic seed - usually 12-24 words with access to whole wallet.

            Either mnemonic, keyPair or signature Id must be present - depends
            on the type of account and xpub.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts and used mnemonic. Should be present, when mnemonic is
            used.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - mnemonic
        - xpub
      type: object
    TransferBtcKeyPair:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 0.0005 BTC is used. Minimum fee is 0.00001
            BTC.
          example: '0.0005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        keyPair:
          description: >
            Array of assigned blockchain addresses with their private keys.

            Either mnemonic, keyPair or signature Id must be present - depends
            on the type of account and xpub.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: >-
                  Blockchain address assigned to account withdrawal is made
                  from.
                maxLength: 50
                minLength: 30
              privateKey:
                type: string
                description: Private key of blockchain address.
                example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
                maxLength: 52
                minLength: 52
        attr:
          description: >-
            Used to parametrize withdrawal as a change address for left coins
            from transaction.
          maxLength: 256
          minLength: 1
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - keyPair
        - attr
      type: object
    TransferBtcKMS:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 0.0005 BTC is used. Minimum fee is 0.00001
            BTC.
          example: '0.0005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Signature hash of the mnemonic, which will be used to sign
            transactions locally.

            All signature Ids should be present, which might be used to sign
            transaction.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts. Should be present, when mnemonic is used.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - signatureId
        - xpub
      type: object
    TransferBchMnemonic:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 0.00005 BCH is used.
          example: '0.00005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >
            Mnemonic seed - usually 12-24 words with access to whole wallet.

            Either mnemonic, keyPair or signature Id must be present - depends
            on the type of account and xpub.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts. Should be present, when mnemonic is used.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - mnemonic
        - xpub
      type: object
    TransferBchKeyPair:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 0.00005 BCH is used.
          example: '0.00005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        keyPair:
          description: >
            Array of assigned blockchain addresses with their private keys.

            Either mnemonic, keyPair or signature Id must be present - depends
            on the type of account and xpub.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: >-
                  Blockchain address assigned to account withdrawal is made
                  from.
                example: bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez
                maxLength: 50
                minLength: 30
              privateKey:
                type: string
                description: Private key of blockchain address.
                example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
                maxLength: 52
                minLength: 52
        attr:
          description: >-
            Used to parametrize withdrawal as a change address for left coins
            from transaction.
          maxLength: 256
          minLength: 1
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - keyPair
        - attr
      type: object
    TransferBchKMS:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: bitcoincash:qrd9khmeg4nqag3h5gzu8vjt537pm7le85lcauzez
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 0.00005 BCH is used.
          example: '0.00005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Signature hash of the mnemonic, which will be used to sign
            transactions locally.

            All signature Ids should be present, which might be used to sign
            transaction.

            Tatum KMS does not support keyPair type of off-chain transaction,
            only mnemonic based.
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts. Should be present, when mnemonic is used.
          maxLength: 150
          minLength: 1
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - signatureId
        - xpub
      type: object
    TransferErc20Blockchain:
      type: object
      properties:
        to:
          maxLength: 50
          minLength: 1
          description: Blockchain address to send ERC20 token to
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          type: string
        amount:
          description: Amount to be sent.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC20 token
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          type: string
        digits:
          description: Number of decimal points that ERC20 token has.
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to XDC transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - contractAddress
        - digits
        - fromPrivateKey
        - amount
    TransferErc20BlockchainKMS:
      type: object
      properties:
        to:
          maxLength: 50
          minLength: 1
          description: Blockchain address to send ERC20 token to
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          type: string
        amount:
          description: Amount to be sent.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC20 token
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          type: string
        digits:
          description: Number of decimal points that ERC20 token has.
          example: 18
          maximum: 30
          minimum: 1
          type: number
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to XDC transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - contractAddress
        - signatureId
        - digits
        - amount
    CallSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: object
          description: Parameters of the method to be invoked.
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
    CustomFee:
      description: The custom defined fee; if not present, will be calculated automatically
      type: object
      required:
        - gasLimit
        - gasPrice
      properties:
        gasPrice:
          type: string
          description: The price for one gas unit (in Gwei)
          pattern: ^[+]?\d+$
          example: '20'
        gasLimit:
          type: string
          description: >-
            The maximum number of gas units that you are willing to spend on
            processing the transaction at the provided gas price
          pattern: ^[+]?\d+$
          example: '40000'
    CallEthSmartContractMethodCaller:
      type: object
      properties:
        caller:
          maxLength: 42
          minLength: 42
          description: >-
            The address of the account, which will be sender and fee payer of
            this transaction
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0xC9c8ba8C7e2EAF43e84330Db08915A8106d7bD74'
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
        - caller
    CallReadSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: object
          description: Parameters of the method to be invoked.
      required:
        - contractAddress
        - params
        - methodABI
        - methodName
    CallSmartContractMethodKMS:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          items:
            type: object
          description: Parameters of the method to be invoked.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - signatureId
        - methodName
    TransferErc721:
      type: object
      properties:
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC721 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example: '100000'
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - contractAddress
        - tokenId
        - fromPrivateKey
    GenerateMarketplace:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - KLAY
            - BSC
            - MATIC
          example: ETH
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Address of the recipient of the fee for the trade.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - feeRecipient
        - chain
        - marketplaceFee
        - fromPrivateKey
    GenerateMarketplaceSolana:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        from:
          description: The address that will be the owner of the marketplace
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        treasuryMint:
          description: Address of a SPL token contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        treasuryWithdrawalDestination:
          description: >-
            The address that will be able to withdraw funds from the marketplace
            treasury account to own address
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        feeWithdrawalDestination:
          description: >-
            The address that will be able to withdraw funds from the marketplace
            fee account to own address
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        requiresSignOff:
          description: >-
            Set to "false" if you do not want the marketplace to sign all
            operations related to the listings and sales; if not set, defaults
            to "true" (the marketplace must sign all the operations)
          example: true
          type: boolean
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
      required:
        - chain
        - marketplaceFee
        - from
        - fromPrivateKey
    GenerateMarketplaceSolanaKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        from:
          description: The address that will be the owner of the marketplace
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        treasuryMint:
          description: Address of a SPL token contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        treasuryWithdrawalDestination:
          description: >-
            The address that will be able to withdraw funds from the marketplace
            treasury account to own address
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        feeWithdrawalDestination:
          description: >-
            The address that will be able to withdraw funds from the marketplace
            fee account to own address
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        requiresSignOff:
          description: >-
            Set to "false" if you do not want the marketplace to sign all
            operations related to the listings and sales; if not set, defaults
            to "true" (the marketplace must sign all the operations)
          example: true
          type: boolean
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
      required:
        - chain
        - marketplaceFee
        - from
        - signatureId
    GenerateMarketplaceCelo:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Address of the recipient of the fee for the trade.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - feeRecipient
        - marketplaceFee
        - chain
        - feeCurrency
        - fromPrivateKey
    GenerateMarketplaceKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - KLAY
            - BSC
            - MATIC
          example: ETH
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Address of the recipient of the fee for the trade.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - feeRecipient
        - chain
        - marketplaceFee
        - signatureId
    GenerateMarketplaceCeloKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Address of the recipient of the fee for the trade.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - feeRecipient
        - marketplaceFee
        - chain
        - feeCurrency
        - signatureId
    GenerateAuction:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - KLAY
            - BSC
            - MATIC
          example: ETH
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Address of the recipient of the fee for the trade.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        auctionFee:
          type: number
          description: Percentage of the selling amount of the NFT asset. 100 - 1%
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - feeRecipient
        - chain
        - auctionFee
        - fromPrivateKey
    GenerateAuctionCelo:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Address of the recipient of the fee for the trade.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        auctionFee:
          type: number
          description: Percentage of the selling amount of the NFT asset. 100 - 1%
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - feeRecipient
        - auctionFee
        - chain
        - feeCurrency
        - fromPrivateKey
    GenerateAuctionKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - KLAY
            - BSC
            - MATIC
          example: ETH
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Address of the recipient of the fee for the trade.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        auctionFee:
          type: number
          description: Percentage of the selling amount of the NFT asset. 100 - 1%
          example: 150
          minimum: 0
          maximum: 10000
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - feeRecipient
        - chain
        - auctionFee
        - signatureId
    GenerateAuctionCeloKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Address of the recipient of the fee for the trade.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        auctionFee:
          type: number
          description: Percentage of the selling amount of the NFT asset. 100 - 1%
          example: 150
          minimum: 0
          maximum: 10000
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - feeRecipient
        - auctionFee
        - chain
        - feeCurrency
        - signatureId
    GenerateMarketplaceTron:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        feeRecipient:
          maxLength: 34
          minLength: 34
          description: Address of the recipient of the fee for the trade.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - from
        - feeRecipient
        - marketplaceFee
        - fromPrivateKey
    GenerateMarketplaceTronKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        feeRecipient:
          maxLength: 34
          minLength: 34
          description: Address of the recipient of the fee for the trade.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        from:
          maxLength: 34
          minLength: 34
          description: Address of the recipient of the fee for the trade.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - from
        - feeRecipient
        - marketplaceFee
        - signatureId
    SellAssetOnMarketplace:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nftAddress:
          maxLength: 42
          minLength: 42
          description: Address of the NFT asset to sell smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        seller:
          maxLength: 42
          minLength: 42
          description: Address of the seller of the NFT asset.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: >-
            Amount of the assets to be sent. For ERC-721 tokens, enter amount
            only in case of native currency cashback. In case of ERC-1155 this
            field is required and must be greater than 0
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        price:
          description: >-
            Price of the asset to sell. Marketplace fee will be obtained on top
            of this price.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: The private key of the seller's blockchain address
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - listingId
        - seller
        - price
        - fromPrivateKey
    SellAssetOnMarketplaceSolana:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        nftAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the asset to sell
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the seller
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        price:
          description: >-
            Price of the asset to sell. Marketplace fee will be obtained on top
            of this price.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        authorityPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: >-
            The private key used for signing transactions as authority; required
            if <code>requiresSignOff</code> is set to "true" for the marketplace
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: The private key of the seller
      required:
        - chain
        - contractAddress
        - nftAddress
        - price
        - from
        - fromPrivateKey
    SellAssetOnMarketplaceSolanaKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        nftAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the asset to sell
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the seller
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        price:
          description: >-
            Price of the asset to sell. Marketplace fee will be obtained on top
            of this price.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        authoritySignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key used for signing transactions
            as authority; required if <code>requiresSignOff</code> is set to
            "true" for the marketplace
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: The KMS identifier of the private key of the seller
      required:
        - chain
        - contractAddress
        - nftAddress
        - price
        - from
        - signatureId
    SellAssetOnMarketplaceCelo:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nftAddress:
          maxLength: 42
          minLength: 42
          description: Address of the NFT asset to sell smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        seller:
          maxLength: 42
          minLength: 42
          description: Address of the seller of the NFT asset.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: >-
            Amount of the assets to be sent. For ERC-721 tokens, enter amount
            only in case of native currency cashback.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        price:
          description: >-
            Price of the asset to sell. Marketplace fee will be obtained on top
            of this price.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: The private key of the seller's blockchain address
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - listingId
        - seller
        - price
        - feeCurrency
        - fromPrivateKey
    SellAssetOnMarketplaceKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nftAddress:
          maxLength: 42
          minLength: 42
          description: Address of the NFT asset to sell smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        seller:
          maxLength: 42
          minLength: 42
          description: Address of the seller of the NFT asset.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: >-
            Amount of the assets to be sent. For ERC-721 tokens, enter amount
            only in case of natiev currency cashback.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        price:
          description: >-
            Price of the asset to sell. Marketplace fee will be obtained on top
            of this price.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the seller's blockchain
            address
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - listingId
        - seller
        - price
        - signatureId
    SellAssetOnMarketplaceCeloKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nftAddress:
          maxLength: 42
          minLength: 42
          description: Address of the NFT asset to sell smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        seller:
          maxLength: 42
          minLength: 42
          description: Address of the seller of the NFT asset.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: >-
            Amount of the assets to be sent. For ERC-721 tokens, enter amount
            only in case of natiev currency cashback.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        price:
          description: >-
            Price of the asset to sell. Marketplace fee will be obtained on top
            of this price.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the seller's blockchain
            address
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - listingId
        - seller
        - price
        - feeCurrency
        - signatureId
    WithdrawFromMarketplaceSolana:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the marketplace fee recipient
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        amount:
          description: Amount of funds to withdraw.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: The private key of the marketplace fee recipient
      required:
        - chain
        - contractAddress
        - nftAddress
        - amount
        - from
        - fromPrivateKey
    WithdrawFromMarketplaceSolanaKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the marketplace fee recipient
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        amount:
          description: Amount of funds to withdraw.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the marketplace fee
            recipient
      required:
        - chain
        - contractAddress
        - nftAddress
        - amount
        - from
        - signatureId
    CreateAuction:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the auction smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nftAddress:
          maxLength: 42
          minLength: 42
          description: Address of the NFT asset to sell smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        seller:
          maxLength: 42
          minLength: 42
          description: Address of the seller of the NFT asset.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: ID of the auction. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: Amount of the assets to be sent. For ERC-721 tokens, enter 1.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        endedAt:
          description: Last block, where auction accepts bids.
          example: 100000
          minimum: 0
          type: number
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - id
        - seller
        - endedAt
        - fromPrivateKey
    CreateAuctionCelo:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the auction smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nftAddress:
          maxLength: 42
          minLength: 42
          description: Address of the NFT asset to sell smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        seller:
          maxLength: 42
          minLength: 42
          description: Address of the seller of the NFT asset.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: ID of the auction. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: Amount of the assets to be sent. For ERC-721 tokens, enter 1.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        endedAt:
          description: Last block, where auction accepts bids.
          example: 100000
          minimum: 0
          type: number
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - id
        - seller
        - endedAt
        - feeCurrency
        - fromPrivateKey
    CreateAuctionKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the auction smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nftAddress:
          maxLength: 42
          minLength: 42
          description: Address of the NFT asset to sell smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        seller:
          maxLength: 42
          minLength: 42
          description: Address of the seller of the NFT asset.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: ID of the auction. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: Amount of the assets to be sent. For ERC-721 tokens, enter 1.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        endedAt:
          description: Last block, where auction accepts bids.
          example: 100000
          minimum: 0
          type: number
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - id
        - seller
        - endedAt
        - signatureId
    CreateAuctionCeloKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the auction smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nftAddress:
          maxLength: 42
          minLength: 42
          description: Address of the NFT asset to sell smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        seller:
          maxLength: 42
          minLength: 42
          description: Address of the seller of the NFT asset.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: ID of the auction. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: Amount of the assets to be sent. For ERC-721 tokens, enter 1.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        endedAt:
          description: Last block, where auction accepts bids.
          example: 100000
          minimum: 0
          type: number
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - id
        - seller
        - endedAt
        - feeCurrency
        - signatureId
    SellAssetOnMarketplaceTron:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        nftAddress:
          maxLength: 34
          minLength: 34
          description: Address of the NFT asset to sell smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        seller:
          maxLength: 34
          minLength: 34
          description: Address of the seller of the NFT asset.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        erc20Address:
          maxLength: 34
          minLength: 34
          description: >-
            Optional address of the TRC20 token, which will be used as a selling
            currency of the NFT.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: Amount of the assets to be sent. For ERC-721 tokens, enter 1.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        price:
          description: >-
            Price of the asset to sell. Marketplace fee will be obtained on top
            of this price.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - listingId
        - seller
        - price
        - fromPrivateKey
    SellAssetOnMarketplaceTronKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        from:
          maxLength: 34
          minLength: 34
          description: Address of the recipient of the fee for the trade.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nftAddress:
          maxLength: 34
          minLength: 34
          description: Address of the NFT asset to sell smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        seller:
          maxLength: 34
          minLength: 34
          description: Address of the seller of the NFT asset.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        erc20Address:
          maxLength: 34
          minLength: 34
          description: >-
            Optional address of the TRC20 token, which will be used as a selling
            currency of the NFT.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: Amount of the assets to be sent. For ERC-721 tokens, enter 1.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: ID of token, if transaction is for ERC-721 or ERC-1155.
          example: '100000'
          type: string
          maxLength: 256
        price:
          description: >-
            Price of the asset to sell. Marketplace fee will be obtained on top
            of this price.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155.
          example: true
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - nftAddress
        - chain
        - contractAddress
        - tokenId
        - isErc721
        - listingId
        - seller
        - price
        - from
        - signatureId
    BuyAssetOnMarketplace:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: The ID of the listing with the asset that you want to buy
          minLength: 1
          maxLength: 200
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        amount:
          description: >-
            (Only if you pay with the native blockchain currency) The price of
            the asset that you want to buy plus the marketplace fee. Do not use
            if you pay with fungible tokens.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if you pay with the fungible tokens) The blockchain address of
            the fungible tokens. Do not use if you pay with the native
            blockchain currency.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        buyer:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if you want to buy the asset on behalf of someone else and
            this person wants to pay with the fungible tokens; for example, for
            buying the asset from a custodial wallet address) The blockchain
            address of the buyer on whose behalf you are buying the
            asset<br/>The buyer must <a
            href="https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Approve"
            target="_blank">allow the marketplace smart contract to access their
            tokens</a> before you make the purchase.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - listingId
        - fromPrivateKey
    BuyAssetOnMarketplaceSolana:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        listingId:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the listing with the asset that you want
            to buy
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the buyer
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        authorityPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: >-
            The private key used for signing transactions as authority; required
            if <code>requiresSignOff</code> is set to "true" for the marketplace
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: The private key of the buyer
      required:
        - chain
        - contractAddress
        - listingId
        - from
        - fromPrivateKey
    BuyAssetOnMarketplaceSolanaKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        listingId:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the listing with the asset that you want
            to buy
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the buyer
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        authoritySignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key used for signing transactions
            as authority; required if <code>requiresSignOff</code> is set to
            "true" for the marketplace
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: The KMS identifier of the private key of the buyer
      required:
        - chain
        - contractAddress
        - listingId
        - from
        - signatureId
    BuyAssetOnMarketplaceCelo:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: The ID of the listing with the asset that you want to buy
          minLength: 1
          maxLength: 200
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        amount:
          description: >-
            (Only if you pay with the native blockchain currency) The price of
            the asset that you want to buy plus the marketplace fee. Do not use
            if you pay with fungible tokens.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if you pay with the fungible tokens) The blockchain address of
            the fungible tokens. Do not use if you pay with the native
            blockchain currency.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        buyer:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if you want to buy the asset on behalf of someone else and
            this person wants to pay with the fungible tokens; for example, for
            buying the asset from a custodial wallet address) The blockchain
            address of the buyer on whose behalf you are buying the
            asset<br/>The buyer must <a
            href="https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Approve"
            target="_blank">allow the marketplace smart contract to access their
            tokens</a> before you make the purchase.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - listingId
        - feeCurrency
        - fromPrivateKey
    BuyAssetOnMarketplaceKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: The ID of the listing with the asset that you want to buy
          minLength: 1
          maxLength: 200
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        amount:
          description: >-
            (Only if you pay with the native blockchain currency) The price of
            the asset that you want to buy plus the marketplace fee. Do not use
            if you pay with fungible tokens.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if you pay with the fungible tokens) The blockchain address of
            the fungible tokens. Do not use if you pay with the native
            blockchain currency.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        buyer:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if you want to buy the asset on behalf of someone else and
            this person wants to pay with the fungible tokens; for example, for
            buying the asset from a custodial wallet address) The blockchain
            address of the buyer on whose behalf you are buying the
            asset<br/>The buyer must <a
            href="https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Approve"
            target="_blank">allow the marketplace smart contract to access their
            tokens</a> before you make the purchase.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - nftAddress
        - chain
        - listingId
        - signatureId
        - contractAddress
    BuyAssetOnMarketplaceCeloKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: The ID of the listing with the asset that you want to buy
          minLength: 1
          maxLength: 200
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        amount:
          description: >-
            (Only if you pay with the native blockchain currency) The price of
            the asset that you want to buy plus the marketplace fee. Do not use
            if you pay with fungible tokens.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if you pay with the fungible tokens) The blockchain address of
            the fungible tokens. Do not use if you pay with the native
            blockchain currency.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        buyer:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if you want to buy the asset on behalf of someone else and
            this person wants to pay with the fungible tokens; for example, for
            buying the asset from a custodial wallet address) The blockchain
            address of the buyer on whose behalf you are buying the
            asset<br/>The buyer must <a
            href="https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Approve"
            target="_blank">allow the marketplace smart contract to access their
            tokens</a> before you make the purchase.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - listingId
        - feeCurrency
        - signatureId
    ApproveNftSpending:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
          example: ETH
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction/marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        isErc721:
          type: boolean
          description: >-
            Set to "true" if the asset is an NFT; set to "false" is the asset is
            a Multi Token
          example: true
        tokenId:
          description: The ID of the asset (NFT or Multi Token)
          example: '100000'
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address of the smart contract from which the asset
            (NFT or Multi Token) was minted
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - spender
        - fromPrivateKey
        - isErc721
        - tokenId
    ApproveNftSpendingCelo:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction/marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        isErc721:
          type: boolean
          description: >-
            Set to "true" if the asset is an NFT; set to "false" is the asset is
            a Multi Token
          example: true
        tokenId:
          description: The ID of the asset (NFT or Multi Token)
          example: '100000'
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address of the smart contract from which the asset
            (NFT or Multi Token) was minted
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - spender
        - tokenId
        - isErc721
        - feeCurrency
        - fromPrivateKey
    ApproveNftSpendingKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
          example: ETH
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction/marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        isErc721:
          type: boolean
          description: >-
            Set to "true" if the asset is an NFT; set to "false" is the asset is
            a Multi Token
          example: true
        tokenId:
          description: The ID of the asset (NFT or Multi Token)
          example: '100000'
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address of the smart contract from which the asset
            (NFT or Multi Token) was minted
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - chain
        - spender
        - tokenId
        - isErc721
        - signatureId
    ApproveNftSpendingCeloKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction/marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        isErc721:
          type: boolean
          description: >-
            Set to "true" if the asset is an NFT; set to "false" is the asset is
            a Multi Token
          example: true
        tokenId:
          description: The ID of the asset (NFT or Multi Token)
          example: '100000'
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address of the smart contract from which the asset
            (NFT or Multi Token) was minted
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        feeCurrency:
          type: string
          description: >-
            The currency in which the transaction fee will be paid - CELO - CUSD
            - CEUR
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - spender
        - isErc721
        - tokenId
        - feeCurrency
        - signatureId
    BidOnAuction:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the auction smart contract.
          example: '0x487422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        bidder:
          maxLength: 42
          minLength: 42
          description: >-
            In case of the ERC20 auction, it's possible to bid on behalf of
            someone else. This value is the address of the bidder, which should
            approve spending of the ERC20 tokens for the Auction contract. This
            could be used for a bidding from the custodial wallet address.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: ID of the auction.
          minLength: 1
          maxLength: 200
        bidValue:
          description: Amount of the assets to be bid. This must include auction fee.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - chain
        - contractAddress
        - id
        - amount
        - fromPrivateKey
        - bidValue
    BidOnAuctionCelo:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the auction smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        bidder:
          maxLength: 42
          minLength: 42
          description: >-
            In case of the ERC20 auction, it's possible to bid on behalf of
            someone else. This value is the address of the bidder, which should
            approve spending of the ERC20 tokens for the Auction contract. This
            could be used for a bidding from the custodial wallet address.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: ID of the auction.
          minLength: 1
          maxLength: 200
        bidValue:
          description: Amount of the assets to be bid. This must include auction fee.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - id
        - amount
        - feeCurrency
        - fromPrivateKey
        - bidValue
    BidOnAuctionKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the auction smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        bidder:
          maxLength: 42
          minLength: 42
          description: >-
            In case of the ERC20 auction, it's possible to bid on behalf of
            someone else. This value is the address of the bidder, which should
            approve spending of the ERC20 tokens for the Auction contract. This
            could be used for a bidding from the custodial wallet address.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: ID of the auction.
          minLength: 1
          maxLength: 200
        bidValue:
          description: Amount of the assets to be bid. This must include auction fee.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - nftAddress
        - chain
        - id
        - amount
        - signatureId
        - bidValue
    BidOnAuctionCeloKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the auction smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        bidder:
          maxLength: 42
          minLength: 42
          description: >-
            In case of the ERC20 auction, it's possible to bid on behalf of
            someone else. This value is the address of the bidder, which should
            approve spending of the ERC20 tokens for the Auction contract. This
            could be used for a bidding from the custodial wallet address.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: ID of the auction.
          minLength: 1
          maxLength: 200
        bidValue:
          description: Amount of the assets to be bid. This must include auction fee.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - id
        - amount
        - feeCurrency
        - signatureId
        - bidValue
    CancelAuction:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: The ID of the auction
          minLength: 1
          maxLength: 200
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
      required:
        - chain
        - contractAddress
        - id
        - fromPrivateKey
    CancelAuctionCelo:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: The ID of the auction
          minLength: 1
          maxLength: 200
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
      required:
        - chain
        - contractAddress
        - id
        - feeCurrency
        - fromPrivateKey
    CancelAuctionKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: The ID of the auction
          minLength: 1
          maxLength: 200
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
      required:
        - contractAddress
        - chain
        - id
        - signatureId
    CancelAuctionCeloKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: The ID of the auction
          minLength: 1
          maxLength: 200
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
      required:
        - chain
        - contractAddress
        - id
        - feeCurrency
        - signatureId
    SettleAuction:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: The ID of the auction
          minLength: 1
          maxLength: 200
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - id
        - fromPrivateKey
    SettleAuctionCelo:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: The ID of the auction
          minLength: 1
          maxLength: 200
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - id
        - feeCurrency
        - fromPrivateKey
    SettleAuctionKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: The ID of the auction
          minLength: 1
          maxLength: 200
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - chain
        - id
        - signatureId
    SettleAuctionCeloKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        id:
          type: string
          description: The ID of the auction
          minLength: 1
          maxLength: 200
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - id
        - feeCurrency
        - signatureId
    BuyAssetOnMarketplaceTron:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        erc20Address:
          maxLength: 34
          minLength: 34
          description: >-
            Optional address of the TRC20 token, which will be used as a selling
            currency of the NFT.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        buyer:
          maxLength: 42
          minLength: 42
          description: >-
            In case of the ERC20 listing, it's possible to buy on behalf of
            someone else. This value is the address of the buyer, which should
            approve spending of the ERC20 tokens for the Marketplace contract.
            This could be used for a buying from the custodial wallet address.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        amount:
          description: Amount of the assets to be sent. For ERC-721 tokens, enter 1.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - chain
        - contractAddress
        - listingId
        - fromPrivateKey
    BuyAssetOnMarketplaceTronKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        from:
          maxLength: 34
          minLength: 34
          description: Address of the recipient of the fee for the trade.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        buyer:
          maxLength: 42
          minLength: 42
          description: >-
            In case of the ERC20 listing, it's possible to buy on behalf of
            someone else. This value is the address of the buyer, which should
            approve spending of the ERC20 tokens for the Marketplace contract.
            This could be used for a buying from the custodial wallet address.
          example: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        erc20Address:
          maxLength: 34
          minLength: 34
          description: >-
            Optional address of the TRC20 token, which will be used as a selling
            currency of the NFT.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        amount:
          description: Amount of the assets to be sent. For ERC-721 tokens, enter 1.
          example: '1'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - chain
        - contractAddress
        - listingId
        - from
        - signatureId
    UpdateFeeRecipient:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Recipient address of the marketplace fee.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - chain
        - contractAddress
        - feeRecipient
        - fromPrivateKey
    UpdateFeeRecipientSolana:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        treasuryWithdrawalDestination:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the new marketplace fee recipient
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace authority
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: The private key of the marketspace authority
      required:
        - chain
        - contractAddress
        - treasuryWithdrawalDestination
        - from
        - fromPrivateKey
    UpdateFeeRecipientSolanaKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        treasuryWithdrawalDestination:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the new marketplace fee recipient
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace authority
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: The KMS identifier of the private key of the marketspace authority
      required:
        - chain
        - contractAddress
        - treasuryWithdrawalDestination
        - from
        - signatureId
    UpdateFeeRecipientCelo:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Recipient address of the marketplace fee.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - feeRecipient
        - feeCurrency
        - fromPrivateKey
    UpdateFeeRecipientKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Recipient address of the marketplace fee.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - nftAddress
        - chain
        - feeRecipient
        - signatureId
        - contractAddress
    UpdateFeeRecipientCeloKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        feeRecipient:
          maxLength: 42
          minLength: 42
          description: Recipient address of the marketplace fee.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - feeRecipient
        - feeCurrency
        - signatureId
    UpdateFeeRecipientTron:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        feeRecipient:
          maxLength: 34
          minLength: 34
          description: Recipient address of the marketplace fee.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - chain
        - contractAddress
        - feeRecipient
        - fromPrivateKey
    UpdateFeeRecipientTronKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        from:
          maxLength: 34
          minLength: 34
          description: Address of the recipient of the fee for the trade.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        feeRecipient:
          maxLength: 34
          minLength: 34
          description: Recipient address of the marketplace fee.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - chain
        - contractAddress
        - feeRecipient
        - from
        - signatureId
    UpdateFee:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - marketplaceFee
        - fromPrivateKey
    UpdateFeeSolana:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        marketplaceFee:
          type: number
          description: >-
            The new percentage of the amount that an NFT was sold for that will
            be sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace authority
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: The private key of the marketspace authority
      required:
        - chain
        - contractAddress
        - marketplaceFee
        - from
        - fromPrivateKey
    UpdateFeeSolanaKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        marketplaceFee:
          type: number
          description: >-
            The new percentage of the amount that an NFT was sold for that will
            be sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace authority
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: The KMS identifier of the private key of the marketspace authority
      required:
        - chain
        - contractAddress
        - marketplaceFee
        - from
        - signatureId
    UpdateFeeCelo:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - marketplaceFee
        - feeCurrency
        - fromPrivateKey
    UpdateFeeKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - nftAddress
        - chain
        - marketplaceFee
        - signatureId
        - contractAddress
    UpdateFeeCeloKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the marketplace smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - marketplaceFee
        - feeCurrency
        - signatureId
    UpdateFeeTron:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - chain
        - contractAddress
        - marketplaceFee
        - fromPrivateKey
    UpdateFeeTronKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        from:
          maxLength: 34
          minLength: 34
          description: Address of the recipient of the fee for the trade.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - chain
        - contractAddress
        - marketplaceFee
        - from
        - signatureId
    UpdateFeeAuction:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        auctionFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the auction as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - auctionFee
        - fromPrivateKey
    UpdateFeeAuctionKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        auctionFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the auction as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - nftAddress
        - chain
        - auctionFee
        - signatureId
        - contractAddress
    UpdateFeeAuctionCelo:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        auctionFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the auction as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - auctionFee
        - feeCurrency
        - fromPrivateKey
    UpdateFeeAuctionCeloKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the auction smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        auctionFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the auction as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - auctionFee
        - feeCurrency
        - signatureId
    UpdateMarketplaceSolana:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace authority
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        treasuryWithdrawalDestination:
          description: >-
            The address that will be able to withdraw funds from the marketplace
            treasury account to own address
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        feeWithdrawalDestination:
          description: >-
            The address that will be able to withdraw funds from the marketplace
            fee account to own address
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        requiresSignOff:
          description: >-
            Set to "false" if you do not want the marketplace to sign all
            operations related to the listings and sales; if not set, defaults
            to "true" (the marketplace must sign all the operations)
          example: true
          type: boolean
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: The private key of the marketplace authority
      required:
        - chain
        - contractAddress
        - from
        - fromPrivateKey
    UpdateMarketplaceSolanaKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        marketplaceFee:
          type: number
          description: >-
            The percentage of the amount that an NFT was sold for that will be
            sent to the marketplace as a fee. To set the fee to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.
          example: 150
          minimum: 0
          maximum: 10000
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the marketplace authority
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        treasuryWithdrawalDestination:
          description: >-
            The address that will be able to withdraw funds from the marketplace
            treasury account to own address
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        feeWithdrawalDestination:
          description: >-
            The address that will be able to withdraw funds from the marketplace
            fee account to own address
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        requiresSignOff:
          description: >-
            Set to "false" if you do not want the marketplace to sign all
            operations related to the listings and sales; if not set, defaults
            to "true" (the marketplace must sign all the operations)
          example: true
          type: boolean
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: The KMS identifier of the private key of the marketplace authority
      required:
        - chain
        - contractAddress
        - from
        - signatureId
    CancelSellAssetOnMarketplace:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - chain
        - contractAddress
        - listingId
        - fromPrivateKey
    CancelSellAssetOnMarketplaceSolana:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        listingId:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the listing
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        from:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the asset owner
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        authorityPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: >-
            The private key used for signing transactions as authority; required
            if <code>requiresSignOff</code> is set to "true" for the marketplace
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: The private key of the asset owner
      required:
        - chain
        - contractAddress
        - listingId
        - from
        - fromPrivateKey
    CancelSellAssetOnMarketplaceSolanaKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - SOL
          example: SOL
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the smart contract
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          type: string
        listingId:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the listing
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        from:
          maxLength: 44
          minLength: 32
          description: Blockchain address of the asset owner
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
        authoritySignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key used for signing transactions
            as authority; required if <code>requiresSignOff</code> is set to
            "true" for the marketplace
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: The KMS identifier of the private key of the asset owner
      required:
        - chain
        - contractAddress
        - listingId
        - from
        - signatureId
    CancelSellAssetOnMarketplaceCelo:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - listingId
        - feeCurrency
        - fromPrivateKey
    CancelSellAssetOnMarketplaceKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - KLAY
            - MATIC
          example: ETH
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - nftAddress
        - chain
        - listingId
        - signatureId
        - contractAddress
    CancelSellAssetOnMarketplaceCeloKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of the marketplace smart contract.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        erc20Address:
          maxLength: 42
          minLength: 42
          description: >-
            Optional address of the ERC20 token, which will be used as a selling
            currency of the NFT.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        listingId:
          type: string
          description: ID of the listing. It's up to the developer to generate unique ID
          minLength: 1
          maxLength: 200
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - listingId
        - feeCurrency
        - signatureId
    CancelSellAssetOnMarketplaceTron:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        erc20Address:
          maxLength: 34
          minLength: 34
          description: >-
            Optional address of the TRC20 token, which will be used as a selling
            currency of the NFT.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - chain
        - contractAddress
        - listingId
        - fromPrivateKey
    CancelSellAssetOnMarketplaceTronKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of the marketplace smart contract.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        from:
          maxLength: 34
          minLength: 34
          description: Address of the recipient of the fee for the trade.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        erc20Address:
          maxLength: 34
          minLength: 34
          description: >-
            Optional address of the TRC20 token, which will be used as a selling
            currency of the NFT.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
      required:
        - feeLimit
        - chain
        - contractAddress
        - listingId
        - from
        - signatureId
    ApproveTransferCustodialWallet:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
            - XDC
          example: ETH
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: The gas pump address that holds the asset
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address to allow the transfer of the asset from the
            gas pump address
          example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), or <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent).
          example: 0
          enum:
            - 0
            - 1
            - 2
        tokenAddress:
          maxLength: 42
          minLength: 42
          description: The address of the asset to transfer
          example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token or Multi Token) The amount of
            the asset to transfer. Do not use if the asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is a Multi Token or NFT) The ID of the token to
            transfer. Do not use if the asset is a fungible token.
          example: '100000'
          type: string
          maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that owns the gas pump
            address ("master address")
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - spender
        - fromPrivateKey
        - tokenAddress
    ApproveTransferCustodialWalletCelo:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: The gas pump address that holds the asset
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address to allow the transfer of the asset from the
            gas pump address
          example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), or <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent).
          example: 0
          enum:
            - 0
            - 1
            - 2
        tokenAddress:
          maxLength: 42
          minLength: 42
          description: The address of the asset to transfer
          example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token or Multi Token) The amount of
            the asset to transfer. Do not use if the asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is a Multi Token or NFT) The ID of the token to
            transfer. Do not use if the asset is a fungible token.
          example: '100000'
          type: string
          maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that owns the gas pump
            address ("master address")
        feeCurrency:
          type: string
          default: CELO
          description: The currency in which the gas fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - spender
        - fromPrivateKey
        - tokenAddress
    ApproveTransferCustodialWalletCeloKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: The gas pump address that holds the asset
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address to allow the transfer of the asset from the
            gas pump address
          example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), or <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent).
          example: 0
          enum:
            - 0
            - 1
            - 2
        tokenAddress:
          maxLength: 42
          minLength: 42
          description: The address of the asset to transfer
          example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token or Multi Token) The amount of
            the asset to transfer. Do not use if the asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is a Multi Token or NFT) The ID of the token to
            transfer. Do not use if the asset is a fungible token.
          example: '100000'
          type: string
          maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            owns the gas pump address key ("master address")
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            "master address"
        feeCurrency:
          type: string
          default: CELO
          description: The currency in which the gas fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - spender
        - signatureId
        - tokenAddress
    ApproveTransferCustodialWalletKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
            - XDC
          example: ETH
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: The gas pump address that holds the asset
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address to allow the transfer of the asset from the
            gas pump address
          example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), or <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent).
          example: 0
          enum:
            - 0
            - 1
            - 2
        tokenAddress:
          maxLength: 42
          minLength: 42
          description: The address of the asset to transfer
          example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token or Multi Token) The amount of
            the asset to transfer. Do not use if the asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is a Multi Token or NFT) The ID of the token to
            transfer. Do not use if the asset is a fungible token.
          example: '100000'
          type: string
          maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            owns the gas pump address key ("master address")
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            "master address"
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - spender
        - signatureId
        - tokenAddress
    TransferCustodialWallet:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
            - XDC
          example: ETH
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The gas pump address that transfers the asset; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        recipient:
          maxLength: 42
          minLength: 42
          description: The blockchain address that receives the asset
          example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent), or <code>3</code> for native blockchain currencies.
          example: 0
          enum:
            - 0
            - 1
            - 2
            - 3
        tokenAddress:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if the asset is a fungible token, NFT, or Multi Token) The
            address of the token to transfer. Do not use if the asset is a
            native blockchain currency.
          example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token, Multi Token, or native
            blockchain currency) The amount of the asset to transfer. Do not use
            if the asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is a Multi Token or NFT) The ID of the token to
            transfer. Do not use if the asset is a fungible token or native
            blockchain currency.
          example: '100000'
          type: string
          maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that owns the gas pump
            address ("master address")
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - recipient
        - fromPrivateKey
    TransferCustodialWalletCelo:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The gas pump address that transfers the asset; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        recipient:
          maxLength: 42
          minLength: 42
          description: The blockchain address that receives the asset
          example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent), or <code>3</code> for native blockchain currencies.
          example: 0
          enum:
            - 0
            - 1
            - 2
            - 3
        tokenAddress:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if the asset is a fungible token, NFT, or Multi Token) The
            address of the token to transfer. Do not use if the asset is a
            native blockchain currency.
          example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token, Multi Token, or native
            blockchain currency) The amount of the asset to transfer. Do not use
            if the asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is a Multi Token or NFT) The ID of the token to
            transfer. Do not use if the asset is a fungible token or native
            blockchain currency.
          example: '100000'
          type: string
          maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that owns the gas pump
            address ("master address")
        feeCurrency:
          type: string
          default: CELO
          description: The currency in which the gas fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - recipient
        - fromPrivateKey
    TransferCustodialWalletCeloKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The gas pump address that transfers the asset; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        recipient:
          maxLength: 42
          minLength: 42
          description: The blockchain address that receives the asset
          example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent), or <code>3</code> for native blockchain currencies.
          example: 0
          enum:
            - 0
            - 1
            - 2
            - 3
        tokenAddress:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if the asset is a fungible token, NFT, or Multi Token) The
            address of the token to transfer. Do not use if the asset is a
            native blockchain currency.
          example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token, Multi Token, or native
            blockchain currency) The amount of the asset to transfer. Do not use
            if the asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is a Multi Token or NFT) The ID of the token to
            transfer. Do not use if the asset is a fungible token or native
            blockchain currency.
          example: '100000'
          type: string
          maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            owns the gas pump address key ("master address")
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            "master address"
        feeCurrency:
          type: string
          default: CELO
          description: The currency in which the gas fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - recipient
        - signatureId
    TransferCustodialWalletKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
            - XDC
          example: ETH
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The gas pump address that transfers the asset; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        recipient:
          maxLength: 42
          minLength: 42
          description: The blockchain address that receives the asset
          example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent), or <code>3</code> for native blockchain currencies.
          example: 0
          enum:
            - 0
            - 1
            - 2
            - 3
        tokenAddress:
          maxLength: 42
          minLength: 42
          description: >-
            (Only if the asset is a fungible token, NFT, or Multi Token) The
            address of the token to transfer. Do not use if the asset is a
            native blockchain currency.
          example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token, Multi Token, or native
            blockchain currency) The amount of the asset to transfer. Do not use
            if the asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is a Multi Token or NFT) The ID of the token to
            transfer. Do not use if the asset is a fungible token or native
            blockchain currency.
          example: '100000'
          type: string
          maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            owns the gas pump address key ("master address")
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            "master address"
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - recipient
        - signatureId
    TransferCustodialWalletTronKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - TRON
          example: TRON
          type: string
        custodialAddress:
          maxLength: 34
          minLength: 34
          description: >-
            The gas pump address that transfers the asset; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        from:
          type: string
          minLength: 34
          maxLength: 34
          description: >-
            The blockchain address that owns the gas pump address ("master
            address") in the Base58 format
          example: TBAYy8ykFZqdzxMwaqacHvUvUzUTp6ZR5U
        recipient:
          maxLength: 34
          minLength: 34
          description: The blockchain address that receives the asset
          example: TYMcTVBz48okKLRczhwiDu22V6XG3yk6W9
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), or <code>3</code> for native blockchain currencies.
          example: 0
          enum:
            - 0
            - 1
            - 3
        tokenAddress:
          maxLength: 34
          minLength: 34
          description: >-
            (Only if the asset is a fungible token or NFT) The address of the
            token to transfer. Do not use if the asset is a native blockchain
            currency.
          example: TYMG3ykLRczh6W9cTVBz48wiDu22V6XokK
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token or native blockchain
            currency) The amount of the asset to transfer. Do not use if the
            asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is an NFT) The ID of the token to transfer. Do
            not use if the asset is a fungible token or native blockchain
            currency.
          example: '100000'
          type: string
          maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            owns the gas pump address key ("master address")
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            "master address"
        feeLimit:
          type: number
          minimum: 0
          description: The maximum amount to be paid as the gas fee (in TRX)
          example: 10
      required:
        - custodialAddress
        - chain
        - contractType
        - feeLimit
        - from
        - recipient
        - signatureId
    TransferCustodialWalletTron:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - TRON
          example: TRON
          type: string
        custodialAddress:
          maxLength: 34
          minLength: 34
          description: >-
            The gas pump address that transfers the asset; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        recipient:
          maxLength: 34
          minLength: 34
          description: The blockchain address that receives the asset
          example: TYMcTVBz48okKLRczhwiDu22V6XG3yk6W9
          type: string
        contractType:
          type: number
          description: >-
            The type of the asset to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), or <code>3</code> for native blockchain currencies.
          example: 0
          enum:
            - 0
            - 1
            - 3
        tokenAddress:
          maxLength: 34
          minLength: 34
          description: >-
            (Only if the asset is a fungible token or NFT) The address of the
            token to transfer. Do not use if the asset is a native blockchain
            currency.
          example: TYMG3ykLRczh6W9cTVBz48wiDu22V6XokK
          type: string
        amount:
          description: >-
            (Only if the asset is a fungible token or native blockchain
            currency) The amount of the asset to transfer. Do not use if the
            asset is an NFT.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        tokenId:
          description: >-
            (Only if the asset is an NFT) The ID of the token to transfer. Do
            not use if the asset is a fungible token or native blockchain
            currency.
          example: '100000'
          type: string
          maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            The private key of the blockchain address that owns the gas pump
            address ("master address")
        feeLimit:
          type: number
          minimum: 0
          description: The maximum amount to be paid as the gas fee (in TRX)
          example: 10
      required:
        - custodialAddress
        - chain
        - contractType
        - feeLimit
        - recipient
        - fromPrivateKey
    TransferCustodialWalletBatch:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
            - XDC
          example: ETH
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The gas pump address that transfers the assets; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        recipient:
          type: array
          description: The blockchain address that receives the assets
          items:
            maxLength: 42
            minLength: 42
            example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
            type: string
        contractType:
          type: array
          description: >-
            The type of the assets to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent), or <code>3</code> for native blockchain currencies.
          items:
            type: number
            example: 0
            enum:
              - 0
              - 1
              - 2
              - 3
        tokenAddress:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens, NFTs, or Multi Tokens, set this
            parameter to the array of the addresses of the tokens to
            transfer:<br/>

            <code>"tokenAddress":
            ["0x782919AFc85eEA2cB736874225456bB5d3e242bA","0x74225456bB5d3e242bA782919AFc85eEA2cB7368",...,"0x3e242bA78274225456bB52cB7368d919AFc85eEA"]</code>

            </li>

            <li>

            If the assets are a native blockchain currency, set this parameter
            to the array of zeros, a zero per currency:<br/>

            <code>"tokenAddress": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            maxLength: 42
            minLength: 42
            example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
            type: string
        amount:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens, Multi Tokens, or a native
            blockchain currency, set this parameter to the array of the amounts
            of the assets to transfer:<br/>

            <code>"amount": ["100000","15000",...,"250000"]</code>

            </li>

            <li>

            If the assets are NFTs, set this parameter to the array of zeros, a
            zero per NFT:<br/>

            <code>"amount": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
            type: string
        tokenId:
          type: array
          description: >
            <ul>

            <li>

            If the assets are Multi Tokens or NFTs, set this parameter to the
            array of the IDs of the tokens to transfer:<br/>

            <code>"tokenId": ["12","13",...,"24"]</code>
             </li>
            <li>

            If the assets are fungible tokens or a native blockchain currency,
            set this parameter to the array of zeros, a zero per fungible
            token/currency:<br/>

            <code>"tokenId": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            type: string
            maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that owns the gas pump
            address ("master address")
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - tokenAddress
        - amount
        - tokenId
        - recipient
        - fromPrivateKey
    TransferCustodialWalletBatchCelo:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The gas pump address that transfers the assets; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        recipient:
          type: array
          description: The blockchain address that receives the assets
          items:
            maxLength: 42
            minLength: 42
            example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
            type: string
        contractType:
          type: array
          description: >-
            The type of the assets to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent), or <code>3</code> for native blockchain currencies.
          items:
            type: number
            example: 0
            enum:
              - 0
              - 1
              - 2
              - 3
        tokenAddress:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens, NFTs, or Multi Tokens, set this
            parameter to the array of the addresses of the tokens to
            transfer:<br/>

            <code>"tokenAddress":
            ["0x782919AFc85eEA2cB736874225456bB5d3e242bA","0x74225456bB5d3e242bA782919AFc85eEA2cB7368",...,"0x3e242bA78274225456bB52cB7368d919AFc85eEA"]</code>

            </li>

            <li>

            If the assets are a native blockchain currency, set this parameter
            to the array of zeros, a zero per currency:<br/>

            <code>"tokenAddress": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            maxLength: 42
            minLength: 42
            example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
            type: string
        amount:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens, Multi Tokens, or a native
            blockchain currency, set this parameter to the array of the amounts
            of the assets to transfer:<br/>

            <code>"amount": ["100000","15000",...,"250000"]</code>

            </li>

            <li>

            If the assets are NFTs, set this parameter to the array of zeros, a
            zero per NFT:<br/>

            <code>"amount": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
            type: string
        tokenId:
          type: array
          description: >
            <ul>

            <li>

            If the assets are Multi Tokens or NFTs, set this parameter to the
            array of the IDs of the tokens to transfer:<br/>

            <code>"tokenId": ["12","13",...,"24"]</code>
             </li>
            <li>

            If the assets are fungible tokens or a native blockchain currency,
            set this parameter to the array of zeros, a zero per fungible
            token/currency:<br/>

            <code>"tokenId": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            type: string
            maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that owns the gas pump
            address ("master address")
        feeCurrency:
          type: string
          default: CELO
          description: The currency in which the gas fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - tokenAddress
        - amount
        - tokenId
        - recipient
        - fromPrivateKey
    TransferCustodialWalletBatchTron:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - TRON
          example: TRON
          type: string
        custodialAddress:
          maxLength: 34
          minLength: 34
          description: >-
            The gas pump address that transfers the assets; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        recipient:
          type: array
          description: The blockchain address that receives the assets
          items:
            maxLength: 34
            minLength: 34
            example: TYMcTVBz48okKLRczhwiDu22V6XG3yk6W9
            type: string
        contractType:
          type: array
          description: >-
            The type of the assets to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), or <code>3</code> for native blockchain currencies.
          items:
            type: number
            example: 0
            enum:
              - 0
              - 1
              - 3
        tokenAddress:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens or NFTs, set this parameter to the
            array of the addresses of the tokens to transfer:<br/>

            <code>"tokenAddress":
            ["0x782919AFc85eEA2cB736874225456bB5d3e242bA","0x74225456bB5d3e242bA782919AFc85eEA2cB7368",...,"0x3e242bA78274225456bB52cB7368d919AFc85eEA"]</code>

            </li>

            <li>

            If the assets are a native blockchain currency, set this parameter
            to the array of zeros, a zero per currency:<br/>

            <code>"tokenAddress": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            maxLength: 34
            minLength: 34
            example: TYMG3ykLRczh6W9cTVBz48wiDu22V6XokK
            type: string
        amount:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens or a native blockchain currency,
            set this parameter to the array of the amounts of the assets to
            transfer:<br/>

            <code>"amount": ["100000","15000",...,"250000"]</code>

            </li>

            <li>

            If the assets are NFTs, set this parameter to the array of zeros, a
            zero per NFT:<br/>

            <code>"amount": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
            type: string
        tokenId:
          type: array
          description: >
            <ul>

            <li>

            If the assets are NFTs, set this parameter to the array of the IDs
            of the tokens to transfer:<br/>

            <code>"tokenId": ["12","13",...,"24"]</code>
             </li>
            <li>

            If the assets are fungible tokens or a native blockchain currency,
            set this parameter to the array of zeros, a zero per fungible
            token/currency:<br/>

            <code>"tokenId": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            type: string
            maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2648ce5080c2
          minLength: 64
          description: >-
            The private key of the blockchain address that owns the gas pump
            address ("master address")
        feeLimit:
          type: number
          minimum: 0
          description: The maximum amount to be paid as the gas fee (in TRX)
          example: 10
      required:
        - custodialAddress
        - chain
        - contractType
        - tokenAddress
        - amount
        - tokenId
        - feeLimit
        - recipient
        - fromPrivateKey
    TransferCustodialWalletBatchCeloKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - CELO
          example: CELO
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The gas pump address that transfers the assets; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        recipient:
          type: array
          description: The blockchain address that receives the assets
          items:
            maxLength: 42
            minLength: 42
            example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
            type: string
        contractType:
          type: array
          description: >-
            The type of the assets to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent), or <code>3</code> for native blockchain currencies.
          items:
            type: number
            example: 0
            enum:
              - 0
              - 1
              - 2
              - 3
        tokenAddress:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens, NFTs, or Multi Tokens, set this
            parameter to the array of the addresses of the tokens to
            transfer:<br/>

            <code>"tokenAddress":
            ["0x782919AFc85eEA2cB736874225456bB5d3e242bA","0x74225456bB5d3e242bA782919AFc85eEA2cB7368",...,"0x3e242bA78274225456bB52cB7368d919AFc85eEA"]</code>

            </li>

            <li>

            If the assets are a native blockchain currency, set this parameter
            to the array of zeros, a zero per currency:<br/>

            <code>"tokenAddress": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            maxLength: 42
            minLength: 42
            example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
            type: string
        amount:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens, Multi Tokens, or a native
            blockchain currency, set this parameter to the array of the amounts
            of the assets to transfer:<br/>

            <code>"amount": ["100000","15000",...,"250000"]</code>

            </li>

            <li>

            If the assets are NFTs, set this parameter to the array of zeros, a
            zero per NFT:<br/>

            <code>"amount": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
            type: string
        tokenId:
          type: array
          description: >
            <ul>

            <li>

            If the assets are Multi Tokens or NFTs, set this parameter to the
            array of the IDs of the tokens to transfer:<br/>

            <code>"tokenId": ["12","13",...,"24"]</code>
             </li>
            <li>

            If the assets are fungible tokens or a native blockchain currency,
            set this parameter to the array of zeros, a zero per fungible
            token/currency:<br/>

            <code>"tokenId": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            type: string
            maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            owns the gas pump address key ("master address")
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            "master address"
        feeCurrency:
          type: string
          default: CELO
          description: The currency in which the gas fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - tokenAddress
        - amount
        - tokenId
        - recipient
        - signatureId
    TransferCustodialWalletBatchTronKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - TRON
          example: TRON
          type: string
        custodialAddress:
          maxLength: 34
          minLength: 34
          description: >-
            The gas pump address that transfers the assets; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
          type: string
        from:
          type: string
          minLength: 34
          maxLength: 34
          description: >-
            The blockchain address that owns the gas pump address ("master
            address") in the Base58 format
          example: TBAYy8ykFZqdzxMwaqacHvUvUzUTp6ZR5U
        recipient:
          type: array
          description: The blockchain address that receives the assets
          items:
            maxLength: 34
            minLength: 34
            example: TYMcTVBz48okKLRczhwiDu22V6XG3yk6W9
            type: string
        contractType:
          type: array
          description: >-
            The type of the assets to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), or <code>3</code> for native blockchain currencies.
          items:
            type: number
            example: 0
            enum:
              - 0
              - 1
              - 3
        tokenAddress:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens or NFTs, set this parameter to the
            array of the addresses of the tokens to transfer:<br/>

            <code>"tokenAddress":
            ["0x782919AFc85eEA2cB736874225456bB5d3e242bA","0x74225456bB5d3e242bA782919AFc85eEA2cB7368",...,"0x3e242bA78274225456bB52cB7368d919AFc85eEA"]</code>

            </li>

            <li>

            If the assets are a native blockchain currency, set this parameter
            to the array of zeros, a zero per currency:<br/>

            <code>"tokenAddress": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            maxLength: 34
            minLength: 34
            example: TYMG3ykLRczh6W9cTVBz48wiDu22V6XokK
            type: string
        amount:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens or a native blockchain currency,
            set this parameter to the array of the amounts of the assets to
            transfer:<br/>

            <code>"amount": ["100000","15000",...,"250000"]</code>

            </li>

            <li>

            If the assets are NFTs, set this parameter to the array of zeros, a
            zero per NFT:<br/>

            <code>"amount": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
            type: string
        tokenId:
          type: array
          description: >
            <ul>

            <li>

            If the assets are NFTs, set this parameter to the array of the IDs
            of the tokens to transfer:<br/>

            <code>"tokenId": ["12","13",...,"24"]</code>
             </li>
            <li>

            If the assets are fungible tokens or a native blockchain currency,
            set this parameter to the array of zeros, a zero per fungible
            token/currency:<br/>

            <code>"tokenId": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            type: string
            maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            owns the gas pump address key ("master address")
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            "master address"
        feeLimit:
          type: number
          minimum: 0
          description: The maximum amount to be paid as the gas fee (in TRX)
          example: 10
      required:
        - custodialAddress
        - chain
        - contractType
        - tokenAddress
        - amount
        - tokenId
        - feeLimit
        - from
        - recipient
        - signatureId
    TransferCustodialWalletBatchKMS:
      type: object
      properties:
        chain:
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
            - XDC
          example: ETH
          type: string
        custodialAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The gas pump address that transfers the assets; this is the address
            that you <a
            href="#operation/PrecalculateGasPumpAddresses">precalculated</a> and
            <a href="#operation/ActivateGasPumpAddresses">activated</a> earlier
            and that is assigned to a customer in your custodial application;
            this is not the "master address"
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        recipient:
          type: array
          description: The blockchain address that receives the assets
          items:
            maxLength: 42
            minLength: 42
            example: '0xe242bA5456b782919AFc85687422eEA2cB73B5d3'
            type: string
        contractType:
          type: array
          description: >-
            The type of the assets to transfer. Set <code>0</code> for fungible
            tokens (ERC-20 or equivalent), <code>1</code> for NFTs (ERC-721 or
            equivalent), <code>2</code> for Multi Tokens (ERC-1155 or
            equivalent), or <code>3</code> for native blockchain currencies.
          items:
            type: number
            example: 0
            enum:
              - 0
              - 1
              - 2
              - 3
        tokenAddress:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens, NFTs, or Multi Tokens, set this
            parameter to the array of the addresses of the tokens to
            transfer:<br/>

            <code>"tokenAddress":
            ["0x782919AFc85eEA2cB736874225456bB5d3e242bA","0x74225456bB5d3e242bA782919AFc85eEA2cB7368",...,"0x3e242bA78274225456bB52cB7368d919AFc85eEA"]</code>

            </li>

            <li>

            If the assets are a native blockchain currency, set this parameter
            to the array of zeros, a zero per currency:<br/>

            <code>"tokenAddress": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            maxLength: 42
            minLength: 42
            example: '0x782919AFc85eEA2cB736874225456bB5d3e242bA'
            type: string
        amount:
          type: array
          description: >
            <ul>

            <li>

            If the assets are fungible tokens, Multi Tokens, or a native
            blockchain currency, set this parameter to the array of the amounts
            of the assets to transfer:<br/>

            <code>"amount": ["100000","15000",...,"250000"]</code>

            </li>

            <li>

            If the assets are NFTs, set this parameter to the array of zeros, a
            zero per NFT:<br/>

            <code>"amount": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
            type: string
        tokenId:
          type: array
          description: >
            <ul>

            <li>

            If the assets are Multi Tokens or NFTs, set this parameter to the
            array of the IDs of the tokens to transfer:<br/>

            <code>"tokenId": ["12","13",...,"24"]</code>
             </li>
            <li>

            If the assets are fungible tokens or a native blockchain currency,
            set this parameter to the array of zeros, a zero per fungible
            token/currency:<br/>

            <code>"tokenId": ["0","0",...,"0"]</code>

            </li>

            </ul>
          items:
            example: '100000'
            type: string
            maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            owns the gas pump address key ("master address")
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            "master address"
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transfer transaction; if not present, the
            last known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - custodialAddress
        - chain
        - contractType
        - tokenAddress
        - amount
        - tokenId
        - recipient
        - signatureId
    TransferErc721KMS:
      type: object
      properties:
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC721 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example: '100000'
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - contractAddress
        - signatureId
        - tokenId
    KmsSignatureIds:
      type: object
      properties:
        signatureIds:
          description: List of the signature Ids to be used to sign transactions.
          example:
            - 6d78dad2-518f-4e76-8255-8f1df0de6886
            - 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          type: array
          items:
            type: string
            format: uuid
    PendingTransaction:
      type: object
      properties:
        id:
          description: ID of the pending transaction
          example: 5e6645712b55823de7ea82f1
          type: string
        chain:
          type: string
          example: ETH
          description: Blockchain of the transaction
          enum:
            - BNB
            - BTC
            - ETH
            - XLM
            - XRP
            - BCH
            - LTC
            - DOGE
            - VET
            - BSC
            - MATIC
            - CELO
            - FLOW
            - TRON
            - ONE
            - XDC
            - EGLD
            - KLAY
            - SOL
        hashes:
          type: array
          description: >-
            List of the signature Ids to be used to sign transaction. Those
            hashes should be in order of signing for the BTC, LTC or BCH
            blockchains.
          items:
            type: string
            description: >-
              Signature hash representing wallet or private key managed in the
              Tatum KMS instance.
            example: >-
              1234987askdjfb1o2873ryskajfb1234987askdjfb1o2873ryskajfb1234987askdjfb1o2873ryskajfb
        serializedTransaction:
          type: string
          example: alskdjfq8o27fbkasljfbq8o7b4fqo83f7bqejhafbo8q4f
          description: >-
            Serialized data of the transaction to be signed. It can be JSON, HEX
            or any other representation based on the blockchain.
        withdrawalId:
          description: ID of the pending off-chain withdrawal connected to this transaction
          example: 5e6645712b55823de7ea82f1
          type: string
        index:
          type: number
          description: >-
            In case of mnemonic type of signature Id, this is the index to the
            specific account that should be used for signature.
          example: 1
          minimum: 0
        txId:
          description: TX hash of successful transaction.
          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9
          type: string
        withdrawalResponses:
          items:
            $ref: '#/components/schemas/ResponseData'
          type: array
          description: >-
            Additional information used for BTC, LTC, DOGE and BCH off-chain to
            blockchain transactions.
      required:
        - id
        - chain
        - serializedTransaction
        - hashes
    MintErc721:
      type: object
      properties:
        tokenId:
          description: ID of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC721 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        url:
          description: >-
            Metadata of the token. See
            https://eips.ethereum.org/EIPS/eip-721#specification for more
            details.
          example: https://my_token_data.com
          type: string
          maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
    MintErc721KMS:
      type: object
      properties:
        tokenId:
          description: ID of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC721 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        url:
          description: >-
            Metadata of the token. See
            https://eips.ethereum.org/EIPS/eip-721#specification for more
            details.
          example: https://my_token_data.com
          type: string
          maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - url
        - contractAddress
        - signatureId
        - tokenId
    MintMultipleErc721:
      type: object
      properties:
        to:
          type: array
          description: Blockchain address to send ERC721 token to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '100000'
          items:
            type: string
            maxLength: 32
        url:
          type: array
          description: >-
            Metadata of the token. See
            https://eips.ethereum.org/EIPS/eip-721#specification for more
            details.
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
    MintMultipleErc721KMS:
      type: object
      properties:
        to:
          type: array
          description: Blockchain address to send ERC721 token to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '100000'
          items:
            type: string
            maxLength: 32
        url:
          type: array
          description: >-
            Metadata of the token. See
            https://eips.ethereum.org/EIPS/eip-721#specification for more
            details.
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - contractAddress
        - tokenId
        - url
        - signatureId
    BurnErc721:
      type: object
      properties:
        tokenId:
          description: ID of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
    BurnErc721KMS:
      type: object
      properties:
        tokenId:
          description: ID of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - url
        - contractAddress
        - tokenId
        - signatureId
    TransferEthBlockchain:
      type: object
      properties:
        to:
          description: The blockchain address of the recipient
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: The amount to be sent
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        currency:
          description: >-
            The currency in which the amount will be sent<br/>Fungible tokens
            (ERC-20) are available only on the mainnet.
          $ref: '#/components/schemas/Erc20Currency'
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address of the sender; the fee
            will be deducted from this address
        fee:
          $ref: '#/components/schemas/CustomFee'
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - to
        - currency
        - fromPrivateKey
        - amount
    EthEstimateGas:
      type: object
      properties:
        from:
          type: string
          maxLength: 42
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          minLength: 42
          description: Sender address.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        contractAddress:
          description: Contract address of ERC20 token, if transaction is ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in Ether or ERC20.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
          pattern: ^(0x|0h)?[0-9A-F]+$
      required:
        - to
        - amount
        - from
    EthEstimateGasArray:
      type: object
      required:
        - estimations
      properties:
        estimations:
          type: array
          items:
            $ref: '#/components/schemas/EthEstimateGas'
    EthGasEstimation:
      type: object
      required:
        - gasLimit
        - gasPrice
        - estimations
      properties:
        gasLimit:
          type: string
          description: Gas limit for transaction in gas price.
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in wei.
          example: '20000000000'
        estimations:
          $ref: '#/components/schemas/EthGasEstimationDetails'
    EthGasEstimationDetails:
      type: object
      description: >-
        Detailed estimations for safe (under 30 minutes), standard (under 5
        minutes) and fast (under 2 minutes) transaction times.
      required:
        - safe
        - standard
        - fast
        - baseFee
      properties:
        safe:
          type: string
          description: Safe gas price in wei.
          example: '20000000000'
        standard:
          type: string
          description: Standard gas price in wei.
          example: '40000000000'
        fast:
          type: string
          description: Fast gas price in wei.
          example: '55000000000'
        baseFee:
          type: string
          description: Base fee for EIP-1559 transactions in wei.
          example: '55000000000'
    EthGasEstimationBatch:
      type: object
      required:
        - error
        - result
      properties:
        error:
          type: boolean
          description: If all estimations succeeded.
          example: false
        result:
          type: array
          items:
            $ref: '#/components/schemas/EthGasEstimationBatchResult'
      example:
        error: true
        result:
          - error: true
            msg: >-
              Provided address 0xt16360210b423d3a5205923d6e64a2d142d9f426 is
              invalid, the capitalization checksum test failed, or it's an
              indirect IBAN address which can't be converted.
          - error: false
            contractAddress: '0xdac17f958d2ee523a2206206994597c13d831ec7'
            data:
              gasLimit: '63185'
              gasPrice: '119104833751'
              estimations:
                safe: '100833333333'
                standard: '104833333333'
                fast: '119104833751'
                baseFee: '119104833751'
    EthGasEstimationBatchResult:
      type: object
      required:
        - error
      properties:
        error:
          type: boolean
          description: If estimation succeeded.
          example: false
        contractAddress:
          description: Contract address of ERC20 token, if transaction is ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        data:
          $ref: '#/components/schemas/EthGasEstimationBatchResultData'
        msg:
          type: string
          description: Error message. Present only if error - true.
          example: >-
            Provided address 0xt16360210b423d3a5205923d6e64a2d142d9f426 is
            invalid, the capitalization checksum test failed, or it's an
            indirect IBAN address which can't be converted.
    EthGasEstimationBatchResultData:
      type: object
      required:
        - gasLimit
        - gasPrice
        - estimations
      properties:
        gasLimit:
          type: string
          description: Gas limit for transaction in gas price.
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in wei.
          example: '20000000000'
        estimations:
          $ref: '#/components/schemas/EthGasEstimationDetails'
    TransferEthBlockchainKMS:
      type: object
      properties:
        to:
          description: The blockchain address of the recipient
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: The amount to be sent
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        currency:
          description: >-
            The currency in which the amount will be sent<br/>Fungible tokens
            (ERC-20) are available only on the mainnet.
          $ref: '#/components/schemas/Erc20Currency'
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the sender's blockchain
            address; the fee will be deducted from this address
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        fee:
          $ref: '#/components/schemas/CustomFee'
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - to
        - amount
        - currency
        - signatureId
    CreateRecord:
      type: object
      properties:
        data:
          type: string
          minLength: 1
          maxLength: 130000
          description: The data to be stored on the blockchain
          example: My example log data
        chain:
          description: The blockchain to store the data on
          enum:
            - BSC
            - EGLD
            - ETH
            - KLAY
            - MATIC
            - ONE
            - XDC
          example: ETH
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the transaction
            will be made and the transaction fee will be deducted
        from:
          type: string
          maxLength: 62
          example: erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq7
          minLength: 42
          description: >-
            (Elrond only; required) The blockchain address from which the
            transaction will be made<br/>This is a mandatory parameter for
            Elrond. Do not use it with any other blockchain.
        to:
          description: >-
            The blockchain address to store the data on<br/>If not provided, the
            data will be stored on the address from which the transaction is
            made.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fromShardID:
          type: number
          minimum: 0
          maximum: 4
          description: >-
            (Harmony only) The ID of the shard from which the data should be
            read
        toShardID:
          type: number
          minimum: 0
          maximum: 4
          description: >-
            (Harmony only) The ID of the shard to which the data should be
            recorded
        ethFee:
          description: >-
            (Ethereum only) The custom defined fee; if not present, will be
            calculated automatically
          $ref: '#/components/schemas/CustomFee'
      required:
        - data
        - chain
        - fromPrivateKey
    CreateRecordKMS:
      type: object
      properties:
        data:
          type: string
          minLength: 1
          maxLength: 130000
          description: The data to be stored on the blockchain
          example: My example log data
        chain:
          description: The blockchain to store the data on
          enum:
            - ETH
          example: ETH
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        to:
          description: >-
            The blockchain address to store the data on<br/>If not provided, the
            data will be stored on the address from which the transaction is
            made.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - data
        - chain
        - signatureId
    CreateRecordCelo:
      type: object
      properties:
        data:
          type: string
          minLength: 1
          maxLength: 130000
          description: The data to be stored on the blockchain
          example: My example log data
        chain:
          description: The blockchain to store the data on
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of account, from which the transaction will be
            initiated. If not present, transaction fee will be debited from
            Tatum internal account and additional credits will be charged.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Ethereum transaction. If not present, last known
            nonce will be used.
        to:
          description: >-
            The blockchain address to store the data on<br/>If not provided, the
            data will be stored on the address from which the transaction is
            made.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
      required:
        - data
        - feeCurrency
        - chain
        - fromPrivateKey
    TransferErc20:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        address:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC20 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
        privateKey:
          type: string
          maxLength: 66
          minLength: 66
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          description: >-
            Private key of sender address. Either mnemonic and index, privateKey
            or signature Id must be present - depends on the type of account and
            xpub.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - privateKey
        - amount
    TransferErc20Mnemonic:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        address:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC20 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            Mnemonic to generate private key for sender address. Either mnemonic
            and index, or privateKey must be present - depends on the type of
            account and xpub.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - mnemonic
        - index
    TransferErc20KMS:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        address:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC20 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.

            Private key, mnemonic or signature Id must be present.
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - signatureId
    TransferEth:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in Ether | MATIC | XDC | KCS.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        privateKey:
          type: string
          maxLength: 66
          minLength: 66
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          description: >-
            Private key of sender address. Either mnemonic and index, privateKey
            or signature Id must be present - depends on the type of account and
            xpub.
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
      required:
        - senderAccountId
        - address
        - amount
        - privateKey
    TransferEthMnemonic:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in Ether | MATIC | XDC | KCS.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            Mnemonic to generate private key for sender address. Either mnemonic
            and index, privateKey or signature Id must be present - depends on
            the type of account and xpub.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - mnemonic
        - index
    TransferEthKMS:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in Ether | MATIC | XDC | KCS.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.

            Private key, mnemonic or signature Id must be present.
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
      required:
        - senderAccountId
        - address
        - signatureId
        - amount
    TransferKCS:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in KCS.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fromPrivateKey:
          type: string
          maxLength: 66
          minLength: 66
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          description: >-
            Private key of sender address. Either mnemonic and index, privateKey
            or signature Id must be present - depends on the type of account and
            xpub.
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
      required:
        - senderAccountId
        - address
        - amount
        - fromPrivateKey
    TransferKCSMnemonic:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in KCS.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            Mnemonic to generate private key for sender address. Either mnemonic
            and index, privateKey or signature Id must be present - depends on
            the type of account and xpub.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - mnemonic
        - index
    TransferKCSKMS:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in KCS.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.

            Private key, mnemonic or signature Id must be present.
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
      required:
        - senderAccountId
        - address
        - signatureId
        - amount
    TransferBsc:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        privateKey:
          type: string
          maxLength: 66
          minLength: 66
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          description: >-
            Private key of sender address. Either mnemonic and index, privateKey
            or signature Id must be present - depends on the type of account and
            xpub.
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
      required:
        - senderAccountId
        - address
        - amount
        - privateKey
    TransferBscMnemonic:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            Mnemonic to generate private key for sender address. Either mnemonic
            and index, privateKey or signature Id must be present - depends on
            the type of account and xpub.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - mnemonic
        - index
    TransferBscKMS:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.

            Private key, mnemonic or signature Id must be present.
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
      required:
        - senderAccountId
        - address
        - signatureId
        - amount
    TransferCelo:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        privateKey:
          type: string
          maxLength: 66
          minLength: 66
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          description: >-
            Private key of sender address. Either mnemonic and index, privateKey
            or signature Id must be present - depends on the type of account and
            xpub.
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
      required:
        - senderAccountId
        - address
        - amount
        - feeCurrency
        - privateKey
    TransferCeloMnemonic:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            Mnemonic to generate private key for sender address. Either mnemonic
            and index, privateKey or signature Id must be present - depends on
            the type of account and xpub.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - mnemonic
        - feeCurrency
        - index
    TransferCeloKMS:
      type: object
      properties:
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        address:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.

            Private key, mnemonic or signature Id must be present.
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
        gasLimit:
          type: string
          description: >-
            Gas limit for transaction in gas price. If not set, automatic
            calculation will be used.
          pattern: ^[+]?\d+$
          example: '40000'
        gasPrice:
          type: string
          description: Gas price in Gwei. If not set, automatic calculation will be used.
          pattern: ^[+]?\d+$
          example: '20'
      required:
        - senderAccountId
        - address
        - signatureId
        - feeCurrency
        - amount
    TransferTron:
      type: object
      properties:
        address:
          description: Blockchain address to send assets
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          maxLength: 34
          minLength: 34
          type: string
        amount:
          description: Amount to be sent in Tron.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fromPrivateKey:
          type: string
          maxLength: 64
          minLength: 64
          example: e75d702ce00987633f8009fbb1eabb5b187cb5b50fe9179a8d6cee6bab076b66
          description: >-
            Private key of sender address. Either mnemonic and index, privateKey
            or signature Id must be present - depends on the type of account and
            xpub.
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 2.5 TRX is used.
          example: '2.5'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - fromPrivateKey
    TransferTronMnemonic:
      type: object
      properties:
        address:
          description: Blockchain address to send assets
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          maxLength: 34
          minLength: 34
          type: string
        amount:
          description: Amount to be sent in Tron.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 2.5 TRX is used.
          example: '2.5'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            Mnemonic to generate private key for sender address. Either mnemonic
            and index, privateKey or signature Id must be present - depends on
            the type of account and xpub.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - mnemonic
        - index
    TransferTronKMS:
      type: object
      properties:
        address:
          description: Blockchain address to send assets to
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          maxLength: 34
          minLength: 34
          type: string
        amount:
          description: Amount to be sent in Tron.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 2.5 TRX is used.
          example: '2.5'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        from:
          description: Blockchain address to send assets from
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
          maxLength: 34
          minLength: 34
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.

            Private key, mnemonic or signature Id must be present.
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - from
        - address
        - signatureId
        - amount
    TransferAdaMnemonic:
      type: object
      properties:
        address:
          description: Blockchain address to send assets
          example: >-
            addr1qyyxyhaa2e7kxeqcc72w7f747zqlgwwwstlzsg9umuxc40wnhawldxl4nan95rhtlcnju9q2r8j9qz8vslwsmrkj5r4spxhep9
          maxLength: 90
          minLength: 110
          type: string
        amount:
          description: Amount to be sent in ADA.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 1 ADA is used.
          example: '2.5'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        mnemonic:
          maxLength: 500
          minLength: 1
          description: >-
            Mnemonic to generate private key for sender address. Either mnemonic
            and index, privateKey or signature Id must be present - depends on
            the type of account and xpub.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts. Should be present, when mnemonic is used.
          maxLength: 192
          minLength: 1
          example: >-
            41253768cd7c5831988e580cfc7eeecaa78bf52a1ede2bd2f245406605adfbadd5911ab567bc3dc7713e29c2c14bb898b24bb1f01a4992605343ad14703037b9
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - mnemonic
        - xpub
        - index
    TransferAdaKMS:
      type: object
      properties:
        address:
          description: Blockchain address to send assets to
          example: >-
            addr1qyyxyhaa2e7kxeqcc72w7f747zqlgwwwstlzsg9umuxc40wnhawldxl4nan95rhtlcnju9q2r8j9qz8vslwsmrkj5r4spxhep9
          maxLength: 90
          minLength: 110
          type: string
        amount:
          description: Amount to be sent in ADA.
          maxLength: 38
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: >-
            Fee to be submitted as a transaction fee to blockchain. If none is
            set, default value of 1 ADA is used.
          example: '2.5'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        from:
          description: Blockchain address to send assets from
          example: >-
            addr1qyyxyhaa2e7kxeqcc72w7f747zqlgwwwstlzsg9umuxc40wnhawldxl4nan95rhtlcnju9q2r8j9qz8vslwsmrkj5r4spxhep9
          maxLength: 90
          minLength: 110
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >
            Identifier of the mnemonic / private key associated in signing
            application.

            When hash identifies mnemonic, index must be present to represent
            specific account to pay from.

            Private key, mnemonic or signature Id must be present.
        xpub:
          description: >-
            Extended public key (xpub) of the wallet associated with the
            accounts. XPub or attr must be used with signatureId.
          maxLength: 192
          minLength: 1
          example: >-
            41253768cd7c5831988e580cfc7eeecaa78bf52a1ede2bd2f245406605adfbadd5911ab567bc3dc7713e29c2c14bb898b24bb1f01a4992605343ad14703037b9
          type: string
        index:
          description: Derivation index of sender address.
          maximum: 2147483647
          example: 0
          type: integer
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account
          example: Sender note
          type: string
      required:
        - senderAccountId
        - from
        - address
        - signatureId
        - amount
        - xpub
    TransferXrp:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        account:
          maxLength: 100
          minLength: 1
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        address:
          description: Blockchain address to send assets
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          maxLength: 100
          minLength: 1
          type: string
        amount:
          description: Amount to be sent, in XRP.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        attr:
          description: >-
            Destination tag of the recipient account, if any. Must be
            stringified uint32.
          example: '12355'
          type: string
        sourceTag:
          description: Source tag of sender account, if any.
          example: 12355
          type: integer
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        secret:
          maxLength: 29
          minLength: 29
          description: Secret for account. Secret, or signature Id must be present.
          example: snSFTHdvSYQKKkYntvEt8cnmZuPJB
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - account
        - senderAccountId
        - address
        - amount
        - secret
    TransferXrpKMS:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        account:
          maxLength: 100
          minLength: 1
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        address:
          description: Blockchain address to send assets
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          maxLength: 100
          minLength: 1
          type: string
        amount:
          description: Amount to be sent, in XRP.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        attr:
          description: >-
            Destination tag of the recipient account, if any. Must be
            stringified uint32.
          example: '12355'
          type: string
        sourceTag:
          description: Source tag of sender account, if any.
          example: 12355
          type: integer
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - account
        - senderAccountId
        - address
        - signatureId
        - amount
    TransferBnb:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        address:
          description: Blockchain address to send assets
          example: tbnb1q82g2h9q0kfe7sysnj5w7nlak92csfjztymp39
          maxLength: 100
          minLength: 1
          type: string
        amount:
          description: Amount to be sent, in BNB.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        attr:
          description: Memo of the recipient account, if any.
          example: '12355'
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          minLength: 64
          example: 8ac4b14b38d8a5af58019088ce5a24b764536bccd1981cf79d3e09e9d1f2ad31
          description: Private key of sender address.
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - fromPrivateKey
    TransferBnbKMS:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        address:
          description: Blockchain address to send assets
          example: tbnb1q82g2h9q0kfe7sysnj5w7nlak92csfjztymp39
          maxLength: 100
          minLength: 1
          type: string
        amount:
          description: Amount to be sent, in BNB.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        attr:
          description: Memo of the recipient account, if any.
          example: '12355'
          type: string
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        fromAddress:
          description: Blockchain address to send from.
          example: tbnb1q82g2h9q0kfe7sysnj5w7nlak92csfjztymp39
          maxLength: 50
          minLength: 42
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - senderAccountId
        - fromAddress
        - address
        - amount
        - signatureId
    CreateXlmAsset:
      type: object
      properties:
        issuerAccount:
          description: Blockchain address of the issuer of the assets.
          example: GC5LAVZ5UPLIFDH6SI33PNVL5TKWA4ODXTI3WEF5JM6LRM5MNGVJ56TT
          maxLength: 56
          minLength: 56
          type: string
        token:
          description: Asset name.
          example: TOKEN123
          type: string
          pattern: ^[a-zA-Z0-9]{1,12}$
          maxLength: 12
          minLength: 1
        basePair:
          description: >-
            Base pair for Asset. Transaction value will be calculated according
            to this base pair. e.g. 1 TOKEN123 is equal to 1 EUR, if basePair is
            set to EUR.
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: EUR
      required:
        - basePair
        - issuerAccount
        - token
    CreateBnbAsset:
      type: object
      properties:
        token:
          description: Asset name.
          example: NNB-B90
          type: string
          pattern: ^[a-zA-Z0-9\-]{1,12}$
          maxLength: 12
          minLength: 1
        basePair:
          description: >-
            Base pair for Asset. Transaction value will be calculated according
            to this base pair. e.g. 1 TOKEN123 is equal to 1 EUR, if basePair is
            set to EUR.
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: EUR
      required:
        - basePair
        - token
    CreateXrpAsset:
      type: object
      properties:
        issuerAccount:
          description: Blockchain address of the issuer of the assets.
          example: rsCZjvenhxsFycrb33gPSfXdrTNAS5uiR1
          maxLength: 34
          minLength: 33
          type: string
        token:
          description: Asset name.
          example: DA39A3EE5E6B4B0D3255BFEF95601890AFD80709
          type: string
          pattern: ^[A-F0-9]{40}$
          maxLength: 40
          minLength: 40
        basePair:
          description: >-
            Base pair for Asset. Transaction value will be calculated according
            to this base pair. e.g. 1 TOKEN123 is equal to 1 EUR, if basePair is
            set to EUR.
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: EUR
      required:
        - basePair
        - issuerAccount
        - token
    TransferXlm:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        fromAccount:
          description: Blockchain account to send from
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        address:
          description: Blockchain address to send assets
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        amount:
          description: Amount to be sent, in XLM or XLM-based Asset.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        secret:
          maxLength: 56
          minLength: 56
          description: Secret for account. Secret, or signature Id must be present.
          example: SCVVKNLBHOWBNJYHD3CNROOA2P3K35I5GNTYUHLLMUHMHWQYNEI7LVED
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        attr:
          description: >-
            Short message to recipient. Usually used as an account
            discriminator. It can be either 28 characters long ASCII text, 64
            characters long HEX string or uint64 number. When using as an
            account disciminator in Tatum Offchain ledger, can be in format of
            destination_acc|source_acc.
          example: '12355'
          pattern: ^[ -~]{0,64}$
          type: string
          maxLength: 64
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - fromAccount
        - senderAccountId
        - address
        - secret
        - amount
    TransferXlmKMS:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        fromAccount:
          description: Blockchain account to send from
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        address:
          description: Blockchain address to send assets
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        amount:
          description: Amount to be sent, in XLM or XLM-based Asset.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        attr:
          description: >-
            Short message to recipient. Usually used as an account
            discriminator. It can be either 28 characters long ASCII text, 64
            characters long HEX string or uint64 number. When using as an
            account disciminator in Tatum Offchain ledger, can be in format of
            destination_acc|source_acc.
          example: '12355'
          pattern: ^[ -~]{0,64}$
          type: string
          maxLength: 64
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - fromAccount
        - senderAccountId
        - address
        - amount
        - signatureId
    TransferSol:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        from:
          description: Blockchain account to send from
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        address:
          description: Blockchain address to send assets
          example: 9B5XszUGdMaxCZ7uSQhPzdks5ZQSmWxrmzCSvtJ6Ns6g
          maxLength: 44
          minLength: 32
          type: string
        amount:
          description: >-
            Amount to be sent, in SOL / USDC_SOL or custom SPL token based on
            the senderAccountId currency type.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        privateKey:
          maxLength: 128
          minLength: 87
          description: >-
            Private key for account. Private key, or signature Id must be
            present.
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          type: string
        fee:
          description: >-
            Fee to be charged for the operation. For SOL, fee is decided by the
            blockchain, but default SOL fee is 0.000005. This fee will be only
            charged on top of the withdrawal amount to the virtual account.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - from
        - senderAccountId
        - address
        - privateKey
        - amount
    TransferSolKMS:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        from:
          description: Blockchain account to send from
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        address:
          description: Blockchain address to send assets
          example: 9B5XszUGdMaxCZ7uSQhPzdks5ZQSmWxrmzCSvtJ6Ns6g
          maxLength: 44
          minLength: 32
          type: string
        amount:
          description: Amount to be sent, in SOL.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        fee:
          description: >-
            Fee to be charged for the operation. For SOL, fee is decided by the
            blockchain, but default SOL fee is 0.000005. This fee will be only
            charged on top of the withdrawal amount to the virtual account.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - from
        - senderAccountId
        - address
        - signatureId
        - amount
    TransferFlowPK:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        address:
          description: Blockchain address to send assets
          example: 10762710243615955000
          maxLength: 18
          minLength: 18
          type: string
        amount:
          description: Amount to be sent, in Flow.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        privateKey:
          maxLength: 64
          minLength: 64
          description: Secret for account. Secret, or signature Id must be present.
          example: 37afa218d41d9cd6a2c6f2b96d9eaa3ad96c598252bc50e4d45d62f9356a51f8
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - account
        - senderAccountId
        - address
        - privateKey
        - amount
    TransferFlowKMS:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        address:
          description: Blockchain address to send assets
          example: 10762710243615955000
          maxLength: 18
          minLength: 18
          type: string
        amount:
          description: Amount to be sent, in Flow.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - account
        - senderAccountId
        - address
        - amount
        - signatureId
    TransferAlgo:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: The ID of the virtual account to send Algos from
          example: 61b3bffddfb389cde19c73be
          type: string
        address:
          description: The blockchain address to send Algos to
          example: 5YVZBUH3STSQ5ABCTLEIEIJ7QOZFILM2DLAEEA4ZL6CU55ODZIQXO5EMYM
          maxLength: 58
          minLength: 58
          type: string
        amount:
          description: The amount to send in Algos
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fee:
          description: The transaction fee in Algos
          type: string
          default: '0.001'
          example: '0.001'
        privateKey:
          maxLength: 103
          minLength: 103
          description: >-
            The secret of the Algorand wallet (account). Secret, or signature Id
            must be present.
          example: >-
            NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q
          type: string
        compliant:
          description: >-
            Compliance check; if the withdrawal is not compliant, it will not be
            processed
          example: false
          type: boolean
        paymentId:
          description: >-
            The identifier of the Algo transfer that is shown on the virtual
            account for the created transaction
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: The note for the recipient; must not contain spaces
          example: Helloworld
          type: string
      required:
        - senderAccountId
        - address
        - privateKey
        - amount
    TransferAlgoKMS:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: The ID of the virtual account to send Algos from
          example: 61b3bffddfb389cde19c73be
          type: string
        address:
          description: The blockchain address to send Algos to
          example: 5YVZBUH3STSQ5ABCTLEIEIJ7QOZFILM2DLAEEA4ZL6CU55ODZIQXO5EMYM
          maxLength: 58
          minLength: 58
          type: string
        amount:
          description: The amount to send in Algos
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
          default: '0.001'
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The identifier of the secret of the Algorand wallet (account) in the
            signing application. Secret, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        compliant:
          description: >-
            Compliance check; if the withdrawal is not compliant, it will not be
            processed
          example: false
          type: boolean
        paymentId:
          description: >-
            The identifier of the Algo transfer that is shown on the virtual
            account for the created transaction
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: The note for the recipient; must not contain spaces
          example: Helloworld
          type: string
      required:
        - senderAccountId
        - address
        - amount
        - signatureId
    TransferFlowMnemonic:
      type: object
      properties:
        senderAccountId:
          maxLength: 24
          minLength: 24
          description: Sender account ID
          example: 61b3bffddfb389cde19c73be
          type: string
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        address:
          description: Blockchain address to send assets
          example: '0x955cd3f17b2fd8ae'
          maxLength: 18
          minLength: 18
          type: string
        amount:
          description: Amount to be sent, in Flow.
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        mnemonic:
          maxLength: 500
          minLength: 1
          description: Mnemonic to generate private key.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          type: number
          minimum: 0
          description: Index to the specific address from mnemonic.
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '1234'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          maxLength: 500
          minLength: 1
          description: Note visible to owner of withdrawing account.
          example: Sender note
          type: string
      required:
        - account
        - senderAccountId
        - address
        - amount
        - mnemonic
        - index
    FlowTransactionPK:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        currency:
          type: string
          description: Type of asset to send
          enum:
            - FLOW
            - FUSD
        to:
          description: Blockchain address to send assets
          example: '0x955cd3f17b2fd8ae'
          maxLength: 18
          minLength: 18
          type: string
        amount:
          description: Amount to be sent
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        privateKey:
          maxLength: 64
          minLength: 64
          description: Secret for account. Secret, or signature Id must be present.
          example: 37afa218d41d9cd6a2c6f2b96d9eaa3ad96c598252bc50e4d45d62f9356a51f8
          type: string
      required:
        - account
        - address
        - to
        - privateKey
        - currency
        - amount
        - to
    FlowTransactionKMS:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        currency:
          type: string
          description: Type of asset to send
          enum:
            - FLOW
            - FUSD
        to:
          description: Blockchain address to send assets
          example: '0x955cd3f17b2fd8ae'
          maxLength: 18
          minLength: 18
          type: string
        amount:
          description: Amount to be sent
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
      required:
        - account
        - currency
        - address
        - to
        - amount
        - signatureId
        - to
    FlowTransactionMnemonic:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        currency:
          type: string
          description: Type of asset to send
          enum:
            - FLOW
            - FUSD
        to:
          description: Blockchain address to send assets
          example: '0x955cd3f17b2fd8ae'
          maxLength: 18
          minLength: 18
          type: string
        amount:
          description: Amount to be sent
          maxLength: 38
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        mnemonic:
          maxLength: 500
          minLength: 1
          description: Mnemonic to generate private key.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          type: number
          minimum: 0
          description: Index to the specific address from mnemonic.
      required:
        - account
        - currency
        - address
        - amount
        - to
        - mnemonic
        - index
        - to
    FlowCustomTransactionPK:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        transaction:
          description: Transaction string to send to the chain.
          example: |
            transaction(publicKey: String) {
              prepare(signer: AuthAccount) {
                signer.addPublicKey(publicKey.decodeHex())
              }
            }
          maxLength: 500000
          minLength: 1
          type: string
        args:
          type: array
          items:
            type: object
            properties:
              value:
                description: >-
                  The value of the argument; can be a string or an array of
                  strings
                oneOf:
                  - type: string
                  - type: array
              type:
                description: Type of the argument
                maxLength: 38
                type: string
                enum:
                  - Identity
                  - UInt
                  - Int
                  - UInt8
                  - Int8
                  - UInt16
                  - Int16
                  - UInt32
                  - Int32
                  - UInt64
                  - Int64
                  - UInt128
                  - Int128
                  - UInt256
                  - Int256
                  - Word8
                  - Word16
                  - Word32
                  - Word64
                  - UFix64
                  - Fix64
                  - String
                  - Character
                  - Bool
                  - Address
                  - Void
                  - Optional
                  - Reference
                  - Array
                  - Dictionary
                  - Event
                  - Resource
                  - Struct
              subType:
                description: Type of the argument
                maxLength: 38
                type: string
                enum:
                  - Identity
                  - UInt
                  - Int
                  - UInt8
                  - Int8
                  - UInt16
                  - Int16
                  - UInt32
                  - Int32
                  - UInt64
                  - Int64
                  - UInt128
                  - Int128
                  - UInt256
                  - Int256
                  - Word8
                  - Word16
                  - Word32
                  - Word64
                  - UFix64
                  - Fix64
                  - String
                  - Character
                  - Bool
                  - Address
                  - Void
                  - Optional
                  - Reference
                  - Array
                  - Dictionary
                  - Event
                  - Resource
                  - Struct
            required:
              - type
              - value
        privateKey:
          maxLength: 64
          minLength: 64
          description: Secret for account. Secret, or signature Id must be present.
          example: 37afa218d41d9cd6a2c6f2b96d9eaa3ad96c598252bc50e4d45d62f9356a51f8
          type: string
      required:
        - account
        - transaction
        - privateKey
        - currency
        - args
    FlowCustomTransactionKMS:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        transaction:
          description: Transaction string to send to the chain.
          example: |
            transaction(publicKey: String) {
              prepare(signer: AuthAccount) {
                signer.addPublicKey(publicKey.decodeHex())
              }
            }
          maxLength: 500000
          minLength: 1
          type: string
        args:
          type: array
          items:
            type: object
            properties:
              value:
                description: >-
                  The value of the argument; can be a string or an array of
                  strings
                oneOf:
                  - type: string
                  - type: array
              type:
                description: Type of the argument
                maxLength: 38
                type: string
                enum:
                  - Identity
                  - UInt
                  - Int
                  - UInt8
                  - Int8
                  - UInt16
                  - Int16
                  - UInt32
                  - Int32
                  - UInt64
                  - Int64
                  - UInt128
                  - Int128
                  - UInt256
                  - Int256
                  - Word8
                  - Word16
                  - Word32
                  - Word64
                  - UFix64
                  - Fix64
                  - String
                  - Character
                  - Bool
                  - Address
                  - Void
                  - Optional
                  - Reference
                  - Array
                  - Dictionary
                  - Event
                  - Resource
                  - Struct
              subType:
                description: Type of the argument
                maxLength: 38
                type: string
                enum:
                  - Identity
                  - UInt
                  - Int
                  - UInt8
                  - Int8
                  - UInt16
                  - Int16
                  - UInt32
                  - Int32
                  - UInt64
                  - Int64
                  - UInt128
                  - Int128
                  - UInt256
                  - Int256
                  - Word8
                  - Word16
                  - Word32
                  - Word64
                  - UFix64
                  - Fix64
                  - String
                  - Character
                  - Bool
                  - Address
                  - Void
                  - Optional
                  - Reference
                  - Array
                  - Dictionary
                  - Event
                  - Resource
                  - Struct
            required:
              - type
              - value
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
      required:
        - account
        - currency
        - transaction
        - args
        - signatureId
    FlowCustomTransactionMnemonic:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        transaction:
          description: Transaction string to send to the chain.
          example: |
            transaction(publicKey: String) {
              prepare(signer: AuthAccount) {
                signer.addPublicKey(publicKey.decodeHex())
              }
            }
          maxLength: 500000
          minLength: 1
          type: string
        args:
          type: array
          items:
            type: object
            properties:
              value:
                description: >-
                  The value of the argument; can be a string or an array of
                  strings
                oneOf:
                  - type: string
                  - type: array
              type:
                description: Type of the argument
                maxLength: 38
                type: string
                enum:
                  - Identity
                  - UInt
                  - Int
                  - UInt8
                  - Int8
                  - UInt16
                  - Int16
                  - UInt32
                  - Int32
                  - UInt64
                  - Int64
                  - UInt128
                  - Int128
                  - UInt256
                  - Int256
                  - Word8
                  - Word16
                  - Word32
                  - Word64
                  - UFix64
                  - Fix64
                  - String
                  - Character
                  - Bool
                  - Address
                  - Void
                  - Optional
                  - Reference
                  - Array
                  - Dictionary
                  - Event
                  - Resource
                  - Struct
              subType:
                description: Type of the argument
                maxLength: 38
                type: string
                enum:
                  - Identity
                  - UInt
                  - Int
                  - UInt8
                  - Int8
                  - UInt16
                  - Int16
                  - UInt32
                  - Int32
                  - UInt64
                  - Int64
                  - UInt128
                  - Int128
                  - UInt256
                  - Int256
                  - Word8
                  - Word16
                  - Word32
                  - Word64
                  - UFix64
                  - Fix64
                  - String
                  - Character
                  - Bool
                  - Address
                  - Void
                  - Optional
                  - Reference
                  - Array
                  - Dictionary
                  - Event
                  - Resource
                  - Struct
            required:
              - type
              - value
        mnemonic:
          maxLength: 500
          minLength: 1
          description: Mnemonic to generate private key.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          type: number
          minimum: 0
          description: Index to the specific address from mnemonic.
      required:
        - account
        - transaction
        - args
        - mnemonic
        - index
    FlowCreateAddressFromPubKeySecret:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        publicKey:
          description: >-
            Public key to be used; will be assigned to a newly created address
            and will have a weight of 1000
          example: >-
            968c3ce11e871cb2b7161b282655ee5fcb051f3c04894705d771bf11c6fbebfc6556ab8a0c04f45ea56281312336d0668529077c9d66891a6cad3db877acbe90
          maxLength: 128
          minLength: 128
          type: string
        privateKey:
          maxLength: 64
          minLength: 64
          description: Secret for account. Secret, or signature Id must be present.
          example: 37afa218d41d9cd6a2c6f2b96d9eaa3ad96c598252bc50e4d45d62f9356a51f8
          type: string
        weight:
          description: Weight of the key. If not set, default 1000 will be used.
          example: 1000
          minimum: 0
          maximum: 1000
          type: number
      required:
        - account
        - privateKey
        - publicKey
    FlowCreateAddressFromPubKeyKMS:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        publicKey:
          description: >-
            Public key to be used; will be assigned to a newly created address
            and will have a weight of 1000
          example: >-
            968c3ce11e871cb2b7161b282655ee5fcb051f3c04894705d771bf11c6fbebfc6556ab8a0c04f45ea56281312336d0668529077c9d66891a6cad3db877acbe90
          maxLength: 128
          minLength: 128
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        weight:
          description: Weight of the key. If not set, default 1000 will be used.
          example: 1000
          minimum: 0
          maximum: 1000
          type: number
      required:
        - account
        - publicKey
        - signatureId
    FlowCreateAddressFromPubKeyMnemonic:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        publicKey:
          description: >-
            Public key to be used; will be assigned to a newly created address
            and will have a weight of 1000
          example: >-
            968c3ce11e871cb2b7161b282655ee5fcb051f3c04894705d771bf11c6fbebfc6556ab8a0c04f45ea56281312336d0668529077c9d66891a6cad3db877acbe90
          maxLength: 128
          minLength: 128
          type: string
        mnemonic:
          maxLength: 500
          minLength: 1
          description: Mnemonic to generate private key.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          type: number
          minimum: 0
          description: Index to the specific address from mnemonic.
      required:
        - account
        - publicKey
        - mnemonic
        - index
    FlowAddPubKeySecret:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        publicKey:
          description: Public key to be used
          example: >-
            968c3ce11e871cb2b7161b282655ee5fcb051f3c04894705d771bf11c6fbebfc6556ab8a0c04f45ea56281312336d0668529077c9d66891a6cad3db877acbe90
          maxLength: 128
          minLength: 128
          type: string
        privateKey:
          maxLength: 64
          minLength: 64
          description: Secret for account. Secret, or signature Id must be present.
          example: 37afa218d41d9cd6a2c6f2b96d9eaa3ad96c598252bc50e4d45d62f9356a51f8
          type: string
        weight:
          description: Weight of the key. If not set, default 1000 will be used.
          example: 1000
          minimum: 0
          maximum: 1000
          type: number
      required:
        - account
        - privateKey
        - publicKey
    FlowAddPubKeySecretKMS:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        publicKey:
          description: Public key to be used
          example: >-
            968c3ce11e871cb2b7161b282655ee5fcb051f3c04894705d771bf11c6fbebfc6556ab8a0c04f45ea56281312336d0668529077c9d66891a6cad3db877acbe90
          maxLength: 128
          minLength: 128
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        weight:
          description: Weight of the key. If not set, default 1000 will be used.
          example: 1000
          minimum: 0
          maximum: 1000
          type: number
      required:
        - account
        - publicKey
        - signatureId
    FlowAddPubKeyMnemonic:
      type: object
      properties:
        account:
          description: Blockchain account to send from
          example: '0x955cd3f17b2fd8ad'
          maxLength: 18
          minLength: 18
          type: string
        publicKey:
          description: Public key to be used
          example: >-
            968c3ce11e871cb2b7161b282655ee5fcb051f3c04894705d771bf11c6fbebfc6556ab8a0c04f45ea56281312336d0668529077c9d66891a6cad3db877acbe90
          maxLength: 128
          minLength: 128
          type: string
        mnemonic:
          maxLength: 500
          minLength: 1
          description: Mnemonic to generate private key.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        index:
          type: number
          minimum: 0
          description: Index to the specific address from mnemonic.
        weight:
          description: Weight of the key. If not set, default 1000 will be used.
          example: 1000
          minimum: 0
          maximum: 1000
          type: number
      required:
        - account
        - publicKey
        - mnemonic
        - index
    TransferXrpBlockchain:
      type: object
      properties:
        fromAccount:
          maxLength: 34
          minLength: 33
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        to:
          description: Blockchain address to send assets
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          maxLength: 34
          minLength: 33
          type: string
        amount:
          description: Amount to be sent, in XRP.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromSecret:
          maxLength: 29
          minLength: 29
          description: Secret for account. Secret, or signature Id must be present.
          example: snSFTHdvSYQKKkYntvEt8cnmZuPJB
          type: string
        fee:
          description: Fee to be paid, in XRP. If omitted, current fee will be calculated.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        sourceTag:
          description: Source tag of sender account, if any.
          example: 12355
          type: integer
        destinationTag:
          description: Destination tag of recipient account, if any.
          example: 12355
          type: integer
      required:
        - fromAccount
        - to
        - amount
        - fromSecret
    TransferXrpBlockchainAsset:
      type: object
      properties:
        fromAccount:
          maxLength: 34
          minLength: 33
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        to:
          description: Blockchain address to send assets
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          maxLength: 34
          minLength: 33
          type: string
        amount:
          description: Amount to be sent, in XRP.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromSecret:
          maxLength: 29
          minLength: 29
          description: Secret for account. Secret, or signature Id must be present.
          example: snSFTHdvSYQKKkYntvEt8cnmZuPJB
          type: string
        fee:
          description: Fee to be paid, in XRP. If omitted, current fee will be calculated.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        sourceTag:
          description: Source tag of sender account, if any.
          example: 12355
          type: integer
        destinationTag:
          description: Destination tag of recipient account, if any.
          example: 12355
          type: integer
        issuerAccount:
          description: >-
            Blockchain address of the issuer of the assets to create trust line
            for.
          example: rsP3mgGb2tcYUrxiLFiHJiQXhsziegtwBc
          maxLength: 34
          minLength: 33
          type: string
        token:
          description: Asset name. Must be 160bit HEX string, e.g. SHA1.
          example: DA39A3EE5E6B4B0D3255BFEF95601890AFD80709
          type: string
          pattern: ^[A-F0-9]{40}$
          maxLength: 40
          minLength: 40
      required:
        - fromAccount
        - to
        - amount
        - fromSecret
        - issuerAccount
        - token
    TransferXrpBlockchainKMS:
      type: object
      properties:
        fromAccount:
          maxLength: 34
          minLength: 33
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        to:
          description: Blockchain address to send assets
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          maxLength: 34
          minLength: 33
          type: string
        amount:
          description: Amount to be sent, in XRP.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        fee:
          description: Fee to be paid, in XRP. If omitted, current fee will be calculated.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        sourceTag:
          description: Source tag of sender account, if any.
          example: 12355
          type: integer
        destinationTag:
          description: Destination tag of recipient account, if any.
          example: 12355
          type: integer
      required:
        - fromAccount
        - to
        - amount
        - signatureId
    TransferXrpBlockchainAssetKMS:
      type: object
      properties:
        fromAccount:
          maxLength: 34
          minLength: 33
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        to:
          description: Blockchain address to send assets
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          maxLength: 34
          minLength: 33
          type: string
        amount:
          description: Amount to be sent, in XRP.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        fee:
          description: Fee to be paid, in XRP. If omitted, current fee will be calculated.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        sourceTag:
          description: Source tag of sender account, if any.
          example: 12355
          type: integer
        destinationTag:
          description: Destination tag of recipient account, if any.
          example: 12355
          type: integer
        issuerAccount:
          description: >-
            Blockchain address of the issuer of the assets to create trust line
            for.
          example: rsP3mgGb2tcYUrxiLFiHJiQXhsziegtwBc
          maxLength: 34
          minLength: 33
          type: string
        token:
          description: Asset name. Must be 160bit HEX string, e.g. SHA1.
          example: DA39A3EE5E6B4B0D3255BFEF95601890AFD80709
          type: string
          pattern: ^[A-F0-9]{40}$
          maxLength: 40
          minLength: 40
      required:
        - fromAccount
        - to
        - amount
        - signatureId
        - issuerAccount
        - token
    TransferXlmBlockchain:
      type: object
      properties:
        fromAccount:
          description: Blockchain account to send assets from
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        to:
          description: Blockchain address to send assets
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        amount:
          description: Amount to be sent, in XLM.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromSecret:
          maxLength: 56
          minLength: 56
          description: Secret for account. Secret, or signature Id must be present.
          example: SCVVKNLBHOWBNJYHD3CNROOA2P3K35I5GNTYUHLLMUHMHWQYNEI7LVED
          type: string
        initialize:
          type: boolean
          default: false
          example: false
          description: >-
            Set to true, if the destination address is not yet initialized and
            should be funded for the first time.
        message:
          description: >-
            Short message to recipient. It can be either 28 characters long
            ASCII text, 64 characters long HEX string or uint64 number.
          example: '12355'
          pattern: ^[ -~]{0,64}$
          type: string
          maxLength: 64
      required:
        - fromAccount
        - fromSecret
        - to
        - amount
    TransferXlmBlockchainAsset:
      type: object
      properties:
        fromAccount:
          description: Blockchain account to send assets from
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        to:
          description: Blockchain address to send assets
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        amount:
          description: Amount to be sent, in XLM.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromSecret:
          maxLength: 56
          minLength: 56
          description: Secret for account. Secret, or signature Id must be present.
          example: SCVVKNLBHOWBNJYHD3CNROOA2P3K35I5GNTYUHLLMUHMHWQYNEI7LVED
          type: string
        initialize:
          type: boolean
          default: false
          example: false
          description: >-
            Set to true, if the destination address is not yet initialized and
            should be funded for the first time.
        token:
          description: >-
            Asset name. If not defined, transaction is being sent in native XLM
            asset.
          example: TOKEN123
          type: string
          pattern: ^[a-zA-Z0-9]{1,12}$
          maxLength: 12
          minLength: 1
        issuerAccount:
          description: >-
            Blockchain address of the issuer of the assets to send, if not
            native XLM asset.
          example: GC5LAVZ5UPLIFDH6SI33PNVL5TKWA4ODXTI3WEF5JM6LRM5MNGVJ56TT
          maxLength: 56
          minLength: 56
          type: string
        message:
          description: >-
            Short message to recipient. It can be either 28 characters long
            ASCII text, 64 characters long HEX string or uint64 number.
          example: '12355'
          pattern: ^[ -~]{0,64}$
          type: string
          maxLength: 64
      required:
        - fromAccount
        - fromSecret
        - token
        - issuerAccount
        - to
        - amount
    TransferXlmBlockchainKMS:
      type: object
      properties:
        fromAccount:
          description: Blockchain account to send assets from
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        to:
          description: Blockchain address to send assets
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        amount:
          description: Amount to be sent, in XLM.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        initialize:
          type: boolean
          default: false
          example: false
          description: >-
            Set to true, if the destination address is not yet initialized and
            should be funded for the first time.
        message:
          description: >-
            Short message to recipient. It can be either 28 characters long
            ASCII text, 64 characters long HEX string or uint64 number.
          example: '12355'
          pattern: ^[ -~]{0,64}$
          type: string
          maxLength: 64
      required:
        - fromAccount
        - signatureId
        - to
        - amount
    TransferXlmBlockchainKMSAsset:
      type: object
      properties:
        fromAccount:
          description: Blockchain account to send assets from
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        to:
          description: Blockchain address to send assets
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          maxLength: 56
          minLength: 56
          type: string
        amount:
          description: Amount to be sent, in XLM.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        initialize:
          type: boolean
          default: false
          example: false
          description: >-
            Set to true, if the destination address is not yet initialized and
            should be funded for the first time.
        token:
          description: >-
            Asset name. If not defined, transaction is being sent in native XLM
            asset.
          example: TOKEN123
          type: string
          pattern: ^[a-zA-Z0-9]{1,12}$
          maxLength: 12
          minLength: 1
        issuerAccount:
          description: >-
            Blockchain address of the issuer of the assets to send, if not
            native XLM asset.
          example: GC5LAVZ5UPLIFDH6SI33PNVL5TKWA4ODXTI3WEF5JM6LRM5MNGVJ56TT
          maxLength: 56
          minLength: 56
          type: string
        message:
          description: >-
            Short message to recipient. It can be either 28 characters long
            ASCII text, 64 characters long HEX string or uint64 number.
          example: '12355'
          pattern: ^[ -~]{0,64}$
          type: string
          maxLength: 64
      required:
        - fromAccount
        - signatureId
        - token
        - issuerAccount
        - to
        - amount
    TrustLineXlmBlockchain:
      type: object
      properties:
        fromAccount:
          maxLength: 56
          minLength: 56
          description: >-
            XLM account address. Must be the one used for generating deposit
            tags.
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          type: string
        issuerAccount:
          description: >-
            Blockchain address of the issuer of the assets to create trust line
            for.
          example: GC5LAVZ5UPLIFDH6SI33PNVL5TKWA4ODXTI3WEF5JM6LRM5MNGVJ56TT
          maxLength: 56
          minLength: 56
          type: string
        token:
          description: Asset name.
          example: TOKEN123
          type: string
          pattern: ^[a-zA-Z0-9]{1,12}$
          maxLength: 12
          minLength: 1
        fromSecret:
          maxLength: 56
          minLength: 56
          description: Secret for account. Secret, or signature Id must be present.
          example: SCVVKNLBHOWBNJYHD3CNROOA2P3K35I5GNTYUHLLMUHMHWQYNEI7LVED
          type: string
        limit:
          description: >-
            Amount of the assets to be permitted to send over this trust line. 0
            means deletion of the trust line. When no limit is specified,
            maximum amount available is permitted.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - fromAccount
        - issuerAccount
        - fromSecret
        - token
    TrustLineXlmBlockchainKMS:
      type: object
      properties:
        fromAccount:
          maxLength: 56
          minLength: 56
          description: >-
            XLM account address. Must be the one used for generating deposit
            tags.
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
          type: string
        issuerAccount:
          description: >-
            Blockchain address of the issuer of the assets to create trust line
            for.
          example: GC5LAVZ5UPLIFDH6SI33PNVL5TKWA4ODXTI3WEF5JM6LRM5MNGVJ56TT
          maxLength: 56
          minLength: 56
          type: string
        token:
          description: Asset name.
          example: TOKEN123
          type: string
          pattern: ^[a-zA-Z0-9]{1,12}$
          maxLength: 12
          minLength: 1
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        limit:
          description: >-
            Amount of the assets to be permitted to send over this trust line. 0
            means deletion of the trust line. When no limit is specified,
            maximum amount available is permitted.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - fromAccount
        - issuerAccount
        - signatureId
        - token
    TrustLineXrpBlockchain:
      type: object
      properties:
        fromAccount:
          maxLength: 34
          minLength: 33
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        issuerAccount:
          description: >-
            Blockchain address of the issuer of the assets to create trust line
            for.
          example: rsP3mgGb2tcYUrxiLFiHJiQXhsziegtwBc
          maxLength: 34
          minLength: 33
          type: string
        limit:
          description: >-
            Amount of the assets to be permitted to send over this trust line. 0
            means deletion of the trust line.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        token:
          description: Asset name. Must be 160bit HEX string, e.g. SHA1.
          example: DA39A3EE5E6B4B0D3255BFEF95601890AFD80709
          type: string
          pattern: ^[A-F0-9]{40}$
          maxLength: 40
          minLength: 40
        fromSecret:
          maxLength: 29
          minLength: 29
          description: Secret for account. Secret, or signature Id must be present.
          example: snSFTHdvSYQKKkYntvEt8cnmZuPJB
          type: string
        fee:
          description: Fee to be paid, in XRP. If omitted, current fee will be calculated.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - fromAccount
        - issuerAccount
        - limit
        - token
        - fromSecret
    TrustLineXrpBlockchainKMS:
      type: object
      properties:
        fromAccount:
          maxLength: 34
          minLength: 33
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        issuerAccount:
          description: >-
            Blockchain address of the issuer of the assets to create trust line
            for.
          example: rsP3mgGb2tcYUrxiLFiHJiQXhsziegtwBc
          maxLength: 34
          minLength: 33
          type: string
        limit:
          description: >-
            Amount of the assets to be permitted to send over this trust line. 0
            means deletion of the trust line.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        token:
          description: Asset name. Must be 160bit HEX string, e.g. SHA1.
          example: DA39A3EE5E6B4B0D3255BFEF95601890AFD80709
          type: string
          pattern: ^[A-F0-9]{40}$
          maxLength: 40
          minLength: 40
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the secret associated in signing application. Secret,
            or signature Id must be present.
        fee:
          description: Fee to be paid, in XRP. If omitted, current fee will be calculated.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - fromAccount
        - issuerAccount
        - limit
        - token
        - signatureId
    AccountSettingsXrpBlockchain:
      type: object
      properties:
        fromAccount:
          maxLength: 34
          minLength: 33
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        fromSecret:
          maxLength: 29
          minLength: 29
          description: Secret for account. Secret, or signature Id must be present.
          example: snSFTHdvSYQKKkYntvEt8cnmZuPJB
          type: string
        fee:
          description: Fee to be paid, in XRP. If omitted, current fee will be calculated.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        rippling:
          description: Should be true, if an account is the issuer of assets.
          example: true
          type: boolean
        requireDestinationTag:
          description: Should be true, if an account should support off-chain processing.
          example: true
          type: boolean
      required:
        - fromAccount
        - fromSecret
    AccountSettingsXrpBlockchainKMS:
      type: object
      properties:
        fromAccount:
          maxLength: 34
          minLength: 33
          description: >-
            XRP account address. Must be the one used for generating deposit
            tags.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Secret or signature Id must be present.
        fee:
          description: Fee to be paid, in XRP. If omitted, current fee will be calculated.
          example: '10000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        rippling:
          description: Should be true, if an account is the issuer of assets.
          example: true
          type: boolean
        requireDestinationTag:
          description: Should be true, if an account should support off-chain processing.
          example: true
          type: boolean
      required:
        - fromAccount
        - signatureId
    DeployCeloErc20OffchainMnemXpub:
      allOf:
        - type: object
          required:
            - feeCurrency
          properties:
            feeCurrency:
              type: string
              description: The currency in which the transaction fee will be paid
              enum:
                - CELO
                - CUSD
                - CEUR
        - $ref: '#/components/schemas/DeployErc20OffchainMnemXpub'
    DeployCeloErc20OffchainMnemonicAddress:
      allOf:
        - type: object
          required:
            - feeCurrency
          properties:
            feeCurrency:
              type: string
              description: The currency in which the transaction fee will be paid
              enum:
                - CELO
                - CUSD
                - CEUR
        - $ref: '#/components/schemas/DeployErc20OffchainMnemonicAddress'
    DeployCeloErc20OffchainPKXpub:
      allOf:
        - type: object
          required:
            - feeCurrency
          properties:
            feeCurrency:
              type: string
              description: The currency in which the transaction fee will be paid
              enum:
                - CELO
                - CUSD
                - CEUR
        - $ref: '#/components/schemas/DeployErc20OffchainPKXpub'
    DeployCeloErc20OffchainPKAddress:
      allOf:
        - type: object
          required:
            - feeCurrency
          properties:
            feeCurrency:
              type: string
              description: The currency in which the transaction fee will be paid
              enum:
                - CELO
                - CUSD
                - CEUR
        - $ref: '#/components/schemas/DeployErc20OffchainPKAddress'
    DeployCeloErc20OffchainKMSAddress:
      allOf:
        - type: object
          required:
            - feeCurrency
          properties:
            feeCurrency:
              type: string
              description: The currency in which the transaction fee will be paid
              enum:
                - CELO
                - CUSD
                - CEUR
        - $ref: '#/components/schemas/DeployErc20OffchainKMSAddress'
    DeployCeloErc20OffchainKMSXpub:
      allOf:
        - type: object
          required:
            - feeCurrency
          properties:
            feeCurrency:
              type: string
              description: The currency in which the transaction fee will be paid
              enum:
                - CELO
                - CUSD
                - CEUR
        - $ref: '#/components/schemas/DeployErc20OffchainKMSXpub'
    VetEstimateGas:
      type: object
      required:
        - from
        - to
        - value
      properties:
        from:
          description: Sender account address.
          type: string
          maxLength: 50
          example: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
        to:
          type: string
          description: Recipient account address.
          maxLength: 50
          example: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
        value:
          type: string
          description: Amount to send.
          maxLength: 50
          example: '140'
        data:
          type: string
          description: Data to send to Smart Contract
          maxLength: 10000
        nonce:
          type: number
          description: Nonce
          example: 12345
    TransferVetBlockchain:
      type: object
      properties:
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 100
          minLength: 1
          type: string
        amount:
          description: Amount to be sent in VET
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          minLength: 6
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        data:
          type: string
          maxLength: 10000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction.
              example: '40000'
              pattern: ^[+]?\d+$
      required:
        - to
        - amount
        - fromPrivateKey
    TransferVetBlockchainKMS:
      type: object
      properties:
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 100
          minLength: 1
          type: string
        amount:
          description: Amount to be sent in VET
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        data:
          type: string
          maxLength: 10000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction.
              example: '40000'
              pattern: ^[+]?\d+$
      required:
        - to
        - amount
        - signatureId
    XlmWallet:
      type: object
      required:
        - address
        - secret
      properties:
        address:
          description: Generated account address.
          example: GDKYMXOAJ5MK4EVIHHNWRGAAOUZMNZYAETMHFCD6JCVBPZ77TUAZFPKT
          type: string
        secret:
          description: Generated secret for account.
          example: SCVVKNLBHOWBNJYHD3CNROOA2P3K35I5GNTYUHLLMUHMHWQYNEI7LVED
          type: string
    BnbWallet:
      type: object
      properties:
        address:
          description: Generated account address.
          example: tbnb1sfj9981j2eo1ij2e09
          type: string
        privateKey:
          description: Generated private key for account.
          example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ
          type: string
    XlmTx:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this transaction.
          example: 749e4f8933221b9942ef38a02856803f379789ec8d971f1f60535db70135673e
        paging_token:
          type: string
          description: A cursor value for use in pagination.
          example: '438086668288'
        successful:
          type: boolean
          description: Indicates if this transaction was successful or not.
          example: true
        hash:
          type: string
          description: A hex-encoded SHA-256 hash of this transaction’s XDR-encoded form.
          example: 749e4f8933221b9942ef38a02856803f379789ec8d971f1f60535db70135673e
        ledger:
          type: number
          description: >-
            The sequence number of the ledger that this transaction was included
            in.
          example: 102
        created_at:
          type: string
          description: The date this transaction was created.
          example: '2019-10-30T09:34:07Z'
        source_account:
          type: string
          description: The account that originates the transaction.
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
        source_account_sequence:
          type: string
          description: The source account’s sequence number that this transaction consumed.
          example: '1'
        fee_paid:
          type: number
          description: >-
            The fee (in stroops) paid by the source account to apply this
            transaction to the ledger.
          example: 1000
        fee_charged:
          type: number
          example: 1000
        max_fee:
          type: number
          description: >-
            The maximum fee (in stroops) that the source account was willing to
            pay.
          example: 1000
        operation_count:
          type: number
          description: The number of operations contained within this transaction.
          example: 10
        envelope_xdr:
          type: string
          description: >-
            A base64 encoded string of the raw TransactionEnvelope XDR struct
            for this transaction.
          example: >-
            AAAAAGL8HQvQkbK2HA3WVjRrKmjX00fG8sLI7m0ERwJW/AX3AAAD6AAAAAAAAAABAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAEH3Rayw4M0iCLoEe96rPFNGYim8AVHJU0z4ebYZW4JwBY0V4XYoAAAAAAAAAAAAAAAAAAN2+SherpNcNX0imC680fIBdpQfgBwIuqFOgmlobpwLJAAAAF0h26AAAAAAAAAAAAAAAAAAAlRt2go9sp7E1a5ZWvr7vin4UPrFQThpQax1lOFm33AAAABdIdugAAAAAAAAAAAAAAAAAmv+knlR6JR2VqWeU0k/4FgvZ/tSV5DEY4gu0iOTKgpUAAAAXSHboAAAAAAAAAAAAAAAAANpaWLojuOtfC0cmMh+DvQTfPDrkfXhblQTdFXrGYc0bAAAAF0h26AAAAAABAAAAAACVG3aCj2ynsTVrlla+vu+KfhQ+sVBOGlBrHWU4WbfcAAAABgAAAAFURVNUAAAAANpaWLojuOtfC0cmMh+DvQTfPDrkfXhblQTdFXrGYc0bf/////////8AAAABAAAAAJr/pJ5UeiUdlalnlNJP+BYL2f7UleQxGOILtIjkyoKVAAAABgAAAAFURVNUAAAAANpaWLojuOtfC0cmMh+DvQTfPDrkfXhblQTdFXrGYc0bf/////////8AAAABAAAAANpaWLojuOtfC0cmMh+DvQTfPDrkfXhblQTdFXrGYc0bAAAAAQAAAAAAlRt2go9sp7E1a5ZWvr7vin4UPrFQThpQax1lOFm33AAAAAFURVNUAAAAANpaWLojuOtfC0cmMh+DvQTfPDrkfXhblQTdFXrGYc0bAAAJGE5yoAAAAAABAAAAANpaWLojuOtfC0cmMh+DvQTfPDrkfXhblQTdFXrGYc0bAAAAAQAAAACa/6SeVHolHZWpZ5TST/gWC9n+1JXkMRjiC7SI5MqClQAAAAFURVNUAAAAANpaWLojuOtfC0cmMh+DvQTfPDrkfXhblQTdFXrGYc0bAAAJGE5yoAAAAAAAAAAAAAAAAABKBB+2UBMP/abwcm/M1TXO+/JQWhPwkalgqizKmXyRIQx9cN3sY5YAAAAAAAAAAARW/AX3AAAAQDX5vrTLWyUxzrvpeEghwlfZYjb8PhnV+vjXAQE+iCNotx2S0qDtnNppNy9p0qlsXtKKyZqn036kHMFGQ7RxBQ3GYc0bAAAAQOquRvJeUiQ8uDcNGUnIxXT0xaHe91JZHCVjPEm6j9Biii954p9o7Muer9B9ipn6O4Y+4oiF9NbUxyeqh1VJnQw4WbfcAAAAQG/GEctb+uefyEvdeP8V61fCvvdGCW7KoH7iLXxtvanGk9CyydtRGEIxu66hPdUKKbXpXPEKWvnAAp5V+XQqjQnkyoKVAAAAQNTyKwB94kyBjjczpFwMFVtbhHtugo+DYeQKN13jQUjWQDSgistLE+TDrxlxW0qiIhl/GkOdVLMtG6YhfZeVOQU=
        result_xdr:
          type: string
          description: >-
            A base64 encoded string of the raw TransactionResult XDR struct for
            this transaction.
          example: >-
            AAAAAAAAA+gAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAA=
        result_meta_xdr:
          type: string
          description: >-
            A base64 encoded string of the raw TransactionMeta XDR struct for
            this transaction
          example: >-
            AAAAAQAAAAAAAAAKAAAAAwAAAAMAAABmAAAAAAAAAABi/B0L0JGythwN1lY0aypo19NHxvLCyO5tBEcCVvwF9w3gtrOnY/wYAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAEAAABmAAAAAAAAAABi/B0L0JGythwN1lY0aypo19NHxvLCyO5tBEcCVvwF9wx9cTtJ2fwYAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAAAAAAAAAAQfdFrLDgzSIIugR73qs8U0ZiKbwBUclTTPh5thlbgnAFjRXhdigAAAAAAZgAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAMAAAADAAAAZgAAAAAAAAAAYvwdC9CRsrYcDdZWNGsqaNfTR8bywsjubQRHAlb8BfcMfXE7Sdn8GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAABAAAAZgAAAAAAAAAAYvwdC9CRsrYcDdZWNGsqaNfTR8bywsjubQRHAlb8BfcMfXEkAWMUGAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZgAAAAAAAAAA3b5KF6uk1w1fSKYLrzR8gF2lB+AHAi6oU6CaWhunAskAAAAXSHboAAAAAGYAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAADAAAAAwAAAGYAAAAAAAAAAGL8HQvQkbK2HA3WVjRrKmjX00fG8sLI7m0ERwJW/AX3DH1xJAFjFBgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAQAAAGYAAAAAAAAAAGL8HQvQkbK2HA3WVjRrKmjX00fG8sLI7m0ERwJW/AX3DH1xDLjsLBgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGYAAAAAAAAAAACVG3aCj2ynsTVrlla+vu+KfhQ+sVBOGlBrHWU4WbfcAAAAF0h26AAAAABmAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAMAAABmAAAAAAAAAABi/B0L0JGythwN1lY0aypo19NHxvLCyO5tBEcCVvwF9wx9cQy47CwYAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAEAAABmAAAAAAAAAABi/B0L0JGythwN1lY0aypo19NHxvLCyO5tBEcCVvwF9wx9cPVwdUQYAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAAAAAAAAACa/6SeVHolHZWpZ5TST/gWC9n+1JXkMRjiC7SI5MqClQAAABdIdugAAAAAZgAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAMAAAADAAAAZgAAAAAAAAAAYvwdC9CRsrYcDdZWNGsqaNfTR8bywsjubQRHAlb8BfcMfXD1cHVEGAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAABAAAAZgAAAAAAAAAAYvwdC9CRsrYcDdZWNGsqaNfTR8bywsjubQRHAlb8BfcMfXDeJ/5cGAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZgAAAAAAAAAA2lpYuiO4618LRyYyH4O9BN88OuR9eFuVBN0VesZhzRsAAAAXSHboAAAAAGYAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAADAAAAAwAAAGYAAAAAAAAAAACVG3aCj2ynsTVrlla+vu+KfhQ+sVBOGlBrHWU4WbfcAAAAF0h26AAAAABmAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAQAAAGYAAAAAAAAAAACVG3aCj2ynsTVrlla+vu+KfhQ+sVBOGlBrHWU4WbfcAAAAF0h26AAAAABmAAAAAAAAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGYAAAABAAAAAACVG3aCj2ynsTVrlla+vu+KfhQ+sVBOGlBrHWU4WbfcAAAAAVRFU1QAAAAA2lpYuiO4618LRyYyH4O9BN88OuR9eFuVBN0VesZhzRsAAAAAAAAAAH//////////AAAAAQAAAAAAAAAAAAAAAwAAAAMAAABmAAAAAAAAAACa/6SeVHolHZWpZ5TST/gWC9n+1JXkMRjiC7SI5MqClQAAABdIdugAAAAAZgAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAEAAABmAAAAAAAAAACa/6SeVHolHZWpZ5TST/gWC9n+1JXkMRjiC7SI5MqClQAAABdIdugAAAAAZgAAAAAAAAABAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAAAAQAAAACa/6SeVHolHZWpZ5TST/gWC9n+1JXkMRjiC7SI5MqClQAAAAFURVNUAAAAANpaWLojuOtfC0cmMh+DvQTfPDrkfXhblQTdFXrGYc0bAAAAAAAAAAB//////////wAAAAEAAAAAAAAAAAAAAAIAAAADAAAAZgAAAAEAAAAAAJUbdoKPbKexNWuWVr6+74p+FD6xUE4aUGsdZThZt9wAAAABVEVTVAAAAADaWli6I7jrXwtHJjIfg70E3zw65H14W5UE3RV6xmHNGwAAAAAAAAAAf/////////8AAAABAAAAAAAAAAAAAAABAAAAZgAAAAEAAAAAAJUbdoKPbKexNWuWVr6+74p+FD6xUE4aUGsdZThZt9wAAAABVEVTVAAAAADaWli6I7jrXwtHJjIfg70E3zw65H14W5UE3RV6xmHNGwAACRhOcqAAf/////////8AAAABAAAAAAAAAAAAAAACAAAAAwAAAGYAAAABAAAAAJr/pJ5UeiUdlalnlNJP+BYL2f7UleQxGOILtIjkyoKVAAAAAVRFU1QAAAAA2lpYuiO4618LRyYyH4O9BN88OuR9eFuVBN0VesZhzRsAAAAAAAAAAH//////////AAAAAQAAAAAAAAAAAAAAAQAAAGYAAAABAAAAAJr/pJ5UeiUdlalnlNJP+BYL2f7UleQxGOILtIjkyoKVAAAAAVRFU1QAAAAA2lpYuiO4618LRyYyH4O9BN88OuR9eFuVBN0VesZhzRsAAAkYTnKgAH//////////AAAAAQAAAAAAAAAAAAAAAwAAAAMAAABmAAAAAAAAAABi/B0L0JGythwN1lY0aypo19NHxvLCyO5tBEcCVvwF9wx9cN4n/lwYAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAEAAABmAAAAAAAAAABi/B0L0JGythwN1lY0aypo19NHxvLCyO5tBEcCVvwF9wAAAAA7msYYAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAAAAAAAAABKBB+2UBMP/abwcm/M1TXO+/JQWhPwkalgqizKmXyRIQx9cN3sY5YAAAAAZgAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAA==
        fee_meta_xdr:
          type: string
          description: >-
            A base64 encoded string of the raw LedgerEntryChanges XDR struct
            produced by taking fees for this transaction.
          example: >-
            AAAAAgAAAAMAAAABAAAAAAAAAABi/B0L0JGythwN1lY0aypo19NHxvLCyO5tBEcCVvwF9w3gtrOnZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAEAAABmAAAAAAAAAABi/B0L0JGythwN1lY0aypo19NHxvLCyO5tBEcCVvwF9w3gtrOnY/wYAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAA==
        memo:
          type: string
          description: >-
            The optional memo attached to a transaction. Usually used as an
            account distiguisher.
          example: '12345'
        memo_type:
          type: string
          description: The type of memo.
          example: MEMO_TEXT
          enum:
            - MEMO_TEXT
            - MEMO_ID
            - MEMO_HASH
            - MEMO_RETURN
        signatures:
          type: array
          description: An array of signatures used to sign this transaction.
          items:
            type: string
          example:
            - >-
              Nfm+tMtbJTHOu+l4SCHCV9liNvw+GdX6+NcBAT6II2i3HZLSoO2c2mk3L2nSqWxe0orJmqfTfqQcwUZDtHEFDQ==
            - >-
              6q5G8l5SJDy4Nw0ZScjFdPTFod73UlkcJWM8SbqP0GKKL3nin2jsy56v0H2Kmfo7hj7iiIX01tTHJ6qHVUmdDA==
            - >-
              b8YRy1v655/IS914/xXrV8K+90YJbsqgfuItfG29qcaT0LLJ21EYQjG7rqE91Qoptelc8Qpa+cACnlX5dCqNCQ==
            - >-
              1PIrAH3iTIGONzOkXAwVW1uEe26Cj4Nh5Ao3XeNBSNZANKCKy0sT5MOvGXFbSqIiGX8aQ51Usy0bpiF9l5U5BQ==
    XlmAccount:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this account.
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
        account_id:
          type: string
          description: This account’s public key encoded in a base32 string representation.
          example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
        sequence:
          type: string
          description: >-
            This account’s current sequence number. For use when submitting this
            account’s next transaction.
          example: '1'
        subentry_count:
          type: number
          description: The number of subentries on this account.
          example: 0
        last_modified_ledger:
          type: number
          description: The ID of the last ledger that included changes to this account.
          example: 102
        thresholds:
          properties:
            low_threshold:
              type: number
              description: >-
                The weight required for a valid transaction including the Allow
                Trust and Bump Sequence operations.
              example: 0
            med_threshold:
              type: number
              description: >-
                The weight required for a valid transaction including the Create
                Account, Payment, Path Payment, Manage Buy Offer, Manage Sell
                Offer, Create Passive Sell Offer, Change Trust, Inflation, and
                Manage Data operations.
              example: 0
            high_threshold:
              type: number
              description: >-
                The weight required for a valid transaction including the
                Account Merge and Set Options operations.
              example: 0
          type: object
          description: >-
            Operations have varying levels of access. This field specifies
            thresholds for different access levels, as well as the weight of the
            master key.
        flags:
          properties:
            auth_required:
              type: boolean
              description: >-
                If set to true, anyone who wants to hold an asset issued by this
                account must first be approved by this account.
              example: false
            auth_revocable:
              type: boolean
              description: >-
                If set to true, this account can freeze the balance of a holder
                of an asset issued by this account.
              example: false
            auth_immutable:
              type: boolean
              description: If set to true, none of the following flags can be changed.
              example: false
          type: object
          description: >-
            Flags denote the enabling/disabling of certain asset issuer
            privileges.
        balances:
          type: array
          description: The assets this account holds.
          items:
            type: object
            properties:
              balance:
                type: string
                description: The number of units of an asset held by this account.
                example: '99.9999000'
              limit:
                type: string
                description: >-
                  The maximum amount of this asset that this account is willing
                  to accept. Specified when opening a trustline.
                example: '99.9999000'
              buying_liabilities:
                type: string
                description: >-
                  The sum of all buy offers owned by this account for this
                  asset.
                example: '0.0000000'
              selling_liabilities:
                type: string
                description: >-
                  The sum of all sell offers owned by this account for this
                  asset.
                example: '0.0000000'
              asset_type:
                type: string
                description: Either native, credit_alphanum4, or credit_alphanum12.
                example: native
              asset_code:
                type: string
                description: The code for this asset.
                example: EURT
              asset_issuer:
                type: string
                description: The Stellar address of this asset’s issuer.
                example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
        signers:
          type: array
          description: >-
            The public keys and associated weights that can be used to authorize
            transactions for this account. Used for multi-sig.
          items:
            type: object
            properties:
              weight:
                type: number
                description: >-
                  The numerical weight of a signer. Used to determine if a
                  transaction meets the threshold requirements.
                example: 1
              key:
                type: string
                description: A hash of characters dependent on the signer type.
                example: GBRPYHIL2CI3FNQ4BXLFMNDLFJUNPU2HY3ZMFSHONUCEOASW7QC7OX2H
              type:
                type: string
                description: The type of hash for this signer.
                example: ed25519_public_key
                enum:
                  - sha256_hash
                  - ed25519_public_key
                  - preauth_tx
        data:
          properties: {}
          type: object
          description: An array of account data fields.
    XlmLedger:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this ledger.
          example: 63d98f536ee68d1b27b5b89f23af5311b7569a24faf1403ad0b52b633b07be99
        paging_token:
          type: string
          description: A cursor value for use in pagination.
          example: '4294967296'
        hash:
          type: string
          description: A hex-encoded SHA-256 hash of this ledger’s XDR-encoded form.
          example: 63d98f536ee68d1b27b5b89f23af5311b7569a24faf1403ad0b52b633b07be99
        sequence:
          type: number
          description: >-
            The sequence number of this ledger, and the parameter used in
            Horizon calls that require a ledger number.
          example: 1
        successful_transaction_count:
          type: number
          description: The number of successful transactions in this ledger.
          example: 0
        failed_transaction_count:
          type: number
          description: The number of failed transactions in this ledger.
          example: 0
        operation_count:
          type: number
          description: The number of operations applied in this ledger.
          example: 0
        closed_at:
          type: string
          description: An ISO 8601 formatted string of when this ledger was closed.
          example: '1970-01-01T00:00:00Z'
        total_coins:
          type: string
          description: The total number of lumens in circulation.
          example: '100000000000.0000000'
        fee_pool:
          type: string
          description: The sum of all transaction fees.
          example: '0.0000000'
        base_fee_in_stroops:
          type: number
          description: The fee the network charges per operation in a transaction.
          example: 100
        base_reserve_in_stroops:
          type: number
          description: >-
            The reserve the network uses when calculating an account’s minimum
            balance.
          example: 100000000
        max_tx_set_size:
          type: number
          description: >-
            The maximum number of transactions validators have agreed to process
            in a given ledger.
          example: 100
        protocol_version:
          type: number
          description: >-
            The protocol version that the Stellar network was running when this
            ledger was committed.
          example: 0
        header_xdr:
          type: string
          description: >-
            A base64 encoded string of the raw LedgerHeader xdr struct for this
            ledger.
          example: >-
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXKi4y/ySKB7DnD9H20xjB+s0gtswIwz1XdSWYaBJaFgAAAAEN4Lazp2QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZAX14QAAAABkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    VetBlock:
      type: object
      properties:
        number:
          type: integer
          format: uint32
          description: block number (height)
          example: 325324
        id:
          type: string
          format: bytes32
          description: block identifier
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        size:
          type: integer
          format: uint32
          description: RLP encoded block size in bytes
          example: 373
        parentID:
          type: string
          format: bytes32
          description: parent block ID
          example: '0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d'
        timestamp:
          type: integer
          format: uint64
          description: block unix timestamp
          example: 1533267900
        gasLimit:
          type: integer
          format: uint64
          description: block gas limit (max allowed accumulative gas usage of transactions)
          example: 11253579
        beneficiary:
          type: string
          format: bytes32
          description: Address of account to receive block reward
          example: '0xb4094c25f86d628fdd571afc4077f0d0196afb48'
        gasUsed:
          type: integer
          format: uint64
          description: accumulative gas usage of transactions
          example: 21000
        totalScore:
          type: integer
          format: uint64
          description: sum of all ancestral blocks' score
          example: 1029988
        txsRoot:
          type: string
          format: bytes32
          description: root hash of transactions in the block
          example: '0x89dfd9fcd10c9e53d68592cf8b540b280b72d381b868523223992f3e09a806bb'
        txsFeatures:
          type: integer
          format: uint32
          description: supported txs features bitset
          example: 0
        stateRoot:
          type: string
          format: bytes32
          description: root hash of accounts state
          example: '0x86bcc6d214bc9d8d0dedba1012a63c8317d19ce97f60c8a2ef5c59bbd40d4261'
        receiptsRoot:
          type: string
          format: bytes32
          description: root hash of transaction receipts
          example: '0x15787e2533c470e8a688e6cd17a1ee12d8457778d5f82d2c109e2d6226d8e54e'
        signer:
          type: string
          format: bytes20
          description: the one who signed this block
          example: '0xab7b27fc9e7d29f9f2e5bd361747a5515d0cc2d1'
        transactions:
          type: array
          description: transactions IDs
          items:
            type: string
            format: bytes32
            description: transaction ID
            example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
    VetTx:
      type: object
      properties:
        id:
          type: string
          example: '0x24f691abab680972437028af22bc7a43c3fbe8d6d7eefc420dea2daf554758a7'
        chainTag:
          type: string
          example: '0x27'
        blockRef:
          type: string
          example: '0x0011bbb748852599'
        expiration:
          type: number
          example: 720
        clauses:
          type: array
          items:
            type: object
            properties:
              to:
                type: string
                example: '0xc6a3007e8e0d959ada56eaa003ebd1d61364cb4f'
              value:
                type: string
                example: '115070300000000000000000000'
              data:
                type: string
                example: 0x
        gasPriceCoef:
          type: number
          example: 120
        gas:
          type: number
          example: 21000
        origin:
          type: string
          example: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
        nonce:
          type: string
          example: '0x48ca1882cf3726ee'
        size:
          type: number
          example: 132
        meta:
          properties:
            blockID:
              type: string
              example: >-
                0x0011bbb9925da1b54035e2a870abe336bc79a3b083303646b87a3315c11c963b
            blockNumber:
              type: number
              example: 1162169
            blockTimestamp:
              type: number
              example: 1541643760
          type: object
        blockNumber:
          type: number
    VetTxReceipt:
      type: object
      properties:
        gasUsed:
          type: number
          example: 21000
        gasPayer:
          type: string
          example: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
        paid:
          type: string
          example: '0x1ac942860d7100728'
        reward:
          type: string
          example: '0x8092d8e9da1e688c'
        reverted:
          type: boolean
          example: false
        meta:
          properties:
            blockID:
              type: string
              example: >-
                0x0011bbb9925da1b54035e2a870abe336bc79a3b083303646b87a3315c11c963b
            blockNumber:
              type: number
              example: 1162169
            blockTimestamp:
              type: number
              example: 1541643760
            txID:
              type: string
              example: >-
                0x24f691abab680972437028af22bc7a43c3fbe8d6d7eefc420dea2daf554758a7
            txOrigin:
              type: string
              example: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
          type: object
        outputs:
          description: List of recipient addresses and amounts to send to each of them.
          type: array
          items:
            type: object
            properties:
              events:
                type: array
                items:
                  type: object
                example: []
              transfers:
                type: array
                items:
                  type: object
                  properties:
                    sender:
                      type: string
                      example: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
                    recipient:
                      type: string
                      example: '0xc6a3007e8e0d959ada56eaa003ebd1d61364cb4f'
                    amount:
                      type: string
                      example: '0x5f2f157661ad625bf00000'
        blockNumber:
          type: number
          example: 1162169
        blockHash:
          type: string
          example: '0x0011bbb9925da1b54035e2a870abe336bc79a3b083303646b87a3315c11c963b'
        transactionHash:
          type: string
          example: '0x24f691abab680972437028af22bc7a43c3fbe8d6d7eefc420dea2daf554758a7'
        status:
          type: string
          example: '0x1'
    GenerateCustodialWalletBatch:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - MATIC
            - BSC
            - ONE
            - XDC
            - KLAY
          example: MATIC
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of account, from which the transaction will be
            initiated.
        batchCount:
          type: number
          maximum: 270
          minimum: 0
          description: Number of addresses to generate.
        owner:
          type: string
          minLength: 42
          maxLength: 43
          description: Owner of the addresses.
          example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - fromPrivateKey
        - batchCount
        - owner
    GenerateCustodialWalletBatchPayer:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - MATIC
            - BSC
            - ONE
            - CELO
          example: MATIC
          type: string
        feesCovered:
          type: boolean
          example: true
          description: If set to true, blockchain fees will be covered from credits.
        batchCount:
          type: number
          maximum: 270
          minimum: 0
          description: Number of addresses to generate.
        owner:
          type: string
          minLength: 42
          maxLength: 43
          description: Owner of the addresses.
          example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
      required:
        - chain
        - fromPrivateKey
        - batchCount
        - owner
        - feesCovered
    GenerateCustodialWalletBatchKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - MATIC
            - ETH
            - ONE
            - XDC
            - KLAY
            - BSC
          example: MATIC
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        batchCount:
          type: number
          maximum: 270
          minimum: 0
          description: Number of addresses to generate.
        owner:
          type: string
          minLength: 42
          maxLength: 43
          description: Owner of the addresses.
          example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - signatureId
        - owner
        - batchCount
    GenerateCustodialWalletBatchCelo:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the gas fee will be paid
          default: CELO
          enum:
            - CELO
            - CUSD
            - CEUR
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of account, from which the transaction will be
            initiated.
        batchCount:
          type: number
          maximum: 270
          minimum: 0
          description: Number of addresses to generate.
        owner:
          type: string
          minLength: 42
          maxLength: 43
          description: Owner of the addresses.
          example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - fromPrivateKey
        - batchCount
        - owner
    GenerateCustodialWalletBatchCeloKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the gas fee will be paid
          default: CELO
          enum:
            - CELO
            - CUSD
            - CEUR
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        batchCount:
          type: number
          maximum: 270
          minimum: 0
          description: Number of addresses to generate.
        owner:
          type: string
          minLength: 42
          maxLength: 43
          description: Owner of the addresses.
          example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - signatureId
        - batchCount
        - owner
    GenerateCustodialWalletBatchTron:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of account, from which the transaction will be
            initiated.
        batchCount:
          type: number
          example: 50
          description: Number of addresses to generate.
        owner:
          type: string
          minLength: 34
          maxLength: 34
          description: Owner of the addresses.
          example: TGXh2YJhfwchMGKuzfEJ27W1VEJRKnMdy9
        feeLimit:
          type: number
          minimum: 5
          example: 100
          description: Fee limit to be set, in TRX
      required:
        - chain
        - feeLimit
        - fromPrivateKey
        - batchCount
        - owner
    GenerateCustodialWalletBatchTronKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        from:
          type: string
          description: Sender address.
          example: TGXh2YJhfwchMGKuzfEJ27W1VEJRKnMdy9
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        batchCount:
          type: number
          example: 50
          description: Number of addresses to generate.
        owner:
          type: string
          minLength: 34
          maxLength: 34
          description: Owner of the addresses.
          example: TGXh2YJhfwchMGKuzfEJ27W1VEJRKnMdy9
        feeLimit:
          type: number
          example: 100
          minimum: 5
          description: Fee limit to be set, in TRX
      required:
        - chain
        - signatureId
        - batchCount
        - from
        - feeLimit
        - owner
    GenerateCustodialWalletTronKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
        from:
          type: string
          minLength: 34
          maxLength: 34
          description: Sender address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        enableFungibleTokens:
          type: boolean
          example: false
          description: If address should support ERC20 tokens, it should be marked as true.
        enableNonFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC721 tokens, it should be marked as
            true.
        enableSemiFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC1155 tokens, it should be marked as
            true. Not supported for TRON.
        enableBatchTransactions:
          type: boolean
          example: false
          description: >-
            If address should support batch transfers of the assets, it should
            be marked as true.
      required:
        - chain
        - feeLimit
        - signatureId
        - from
        - enableFungibleTokens
        - enableNonFungibleTokens
        - enableSemiFungibleTokens
        - enableBatchTransactions
    GenerateCustodialWalletCelo:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          description: The currency in which the gas fee will be paid
          default: CELO
          enum:
            - CELO
            - CUSD
            - CEUR
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of account, from which the transaction will be
            initiated.
        enableFungibleTokens:
          type: boolean
          example: false
          description: If address should support ERC20 tokens, it should be marked as true.
        enableNonFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC721 tokens, it should be marked as
            true.
        enableSemiFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC1155 tokens, it should be marked as
            true.
        enableBatchTransactions:
          type: boolean
          example: false
          description: >-
            If address should support batch transfers of the assets, it should
            be marked as true.
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - fromPrivateKey
        - enableFungibleTokens
        - enableNonFungibleTokens
        - enableSemiFungibleTokens
        - enableBatchTransactions
    GenerateCustodialWallet:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - MATIC
          example: ETH
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of account, from which the transaction will be
            initiated.
        enableFungibleTokens:
          type: boolean
          example: false
          description: If address should support ERC20 tokens, it should be marked as true.
        enableNonFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC721 tokens, it should be marked as
            true.
        enableSemiFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC1155 tokens, it should be marked as
            true.
        enableBatchTransactions:
          type: boolean
          example: false
          description: >-
            If address should support batch transfers of the assets, it should
            be marked as true.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - fromPrivateKey
        - enableFungibleTokens
        - enableNonFungibleTokens
        - enableSemiFungibleTokens
        - enableBatchTransactions
    GenerateCustodialWalletKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - ETH
            - ONE
            - BSC
            - MATIC
          example: ETH
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        enableFungibleTokens:
          type: boolean
          example: false
          description: If address should support ERC20 tokens, it should be marked as true.
        enableNonFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC721 tokens, it should be marked as
            true.
        enableSemiFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC1155 tokens, it should be marked as
            true.
        enableBatchTransactions:
          type: boolean
          example: false
          description: >-
            If address should support batch transfers of the assets, it should
            be marked as true.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - signatureId
        - enableFungibleTokens
        - enableNonFungibleTokens
        - enableSemiFungibleTokens
        - enableBatchTransactions
    GenerateCustodialWalletCeloKMS:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - CELO
          example: CELO
          type: string
        feeCurrency:
          type: string
          default: CELO
          description: The currency in which the gas fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        enableFungibleTokens:
          type: boolean
          example: false
          description: If address should support ERC20 tokens, it should be marked as true.
        enableNonFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC721 tokens, it should be marked as
            true.
        enableSemiFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC1155 tokens, it should be marked as
            true.
        enableBatchTransactions:
          type: boolean
          example: false
          description: >-
            If address should support batch transfers of the assets, it should
            be marked as true.
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - signatureId
        - enableFungibleTokens
        - enableNonFungibleTokens
        - enableSemiFungibleTokens
        - enableBatchTransactions
    GenerateCustodialWalletTron:
      type: object
      properties:
        chain:
          description: Blockchain to work with.
          enum:
            - TRON
          example: TRON
          type: string
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
          minLength: 64
          description: >-
            Private key of account, from which the transaction will be
            initiated.
        enableFungibleTokens:
          type: boolean
          example: false
          description: If address should support ERC20 tokens, it should be marked as true.
        enableNonFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC721 tokens, it should be marked as
            true.
        enableSemiFungibleTokens:
          type: boolean
          example: false
          description: >-
            If address should support ERC1155 tokens, it should be marked as
            true. Not supported for TRON.
        enableBatchTransactions:
          type: boolean
          example: false
          description: >-
            If address should support batch transfers of the assets, it should
            be marked as true.
      required:
        - chain
        - feeLimit
        - fromPrivateKey
        - enableFungibleTokens
        - enableNonFungibleTokens
        - enableSemiFungibleTokens
        - enableBatchTransactions
    TransactionHash:
      type: object
      properties:
        txId:
          description: The hash (ID) of the transaction
          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9
          type: string
      required:
        - txId
    Data:
      type: object
      properties:
        data:
          description: Result of the method, if the method was read only.
          example: 2
          oneOf:
            - type: object
            - type: string
            - type: number
            - type: array
            - type: boolean
      required:
        - data
    SignatureId:
      type: object
      properties:
        signatureId:
          format: uuid
          description: >-
            The internal Tatum ID of the prepared transaction for Key Management
            Sysytem (KMS) to sign<br/>This is different from the
            <code>signatureId</code> parameter that you provided in the request
            body. The <code>signatureId</code> parameter in the request body
            specifies the signature ID associated with the private key in KMS.
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          type: string
      required:
        - signatureId
    OffchainTransactionResult:
      type: object
      properties:
        id:
          description: >-
            ID of withdrawal. If transaction is not valid in blockchain, use
            this id to cancel withdrawal.
          example: 5e68c66581f2ee32bc354087
          type: string
        txId:
          description: TX hash of successful transaction.
          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9
          type: string
        completed:
          description: >-
            If set to "true", the withdrawal has been completed in the virtual
            account; if set to "false", the withdrawal has not been completed
            and you have to <a
            href="https://apidoc.tatum.io/tag/Withdrawal#operation/completeWithdrawal"
            target="_blank">complete it manually</a>
          example: true
          type: boolean
      required:
        - txId
        - id
        - completed
    OffchainTransactionSignatureResult:
      type: object
      properties:
        signatureId:
          description: >-
            ID of prepared payment template to sign. This is should be stored on
            a client side to retrieve ID of the blockchain transaction, when
            signing application signs the transaction and broadcasts it to the
            blockchain.
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          format: uuid
          type: string
      required:
        - id
        - signatureId
    Url:
      properties:
        url:
          description: QR Code as data URL
          type: string
      type: object
    VirtualCurrency:
      properties:
        name:
          description: Virtual currency name. Must be prefixed with 'VC_'.
          example: VC_VIRTUAL
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        supply:
          description: Supply of virtual currency.
          maxLength: 38
          minLength: 1
          example: '1000000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        basePair:
          description: >-
            Base pair for virtual currency. Transaction value will be calculated
            according to this base pair. e.g. 1 VC_VIRTUAL is equal to 1 BTC, if
            basePair is set to BTC.
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: BTC
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Each unit of the created curency
            will represent value of baseRate*1 basePair.
        customer:
          $ref: '#/components/schemas/CustomerRegistration'
        description:
          description: Used as a description within Tatum system.
          example: My Virtual Token description.
          maxLength: 100
          minLength: 1
          type: string
        accountCode:
          description: For bookkeeping to distinct account purpose.
          maxLength: 50
          example: AC_1011_B
          minLength: 1
          type: string
        accountNumber:
          description: Account number from external system.
          example: '1234567890'
          type: string
          minLength: 1
          maxLength: 50
        accountingCurrency:
          description: >-
            All transaction will be billed in this currency for created account
            associated with this currency. If not set, EUR is used. ISO-4217
          $ref: '#/components/schemas/FiatCurrency'
          example: USD
      required:
        - basePair
        - name
        - supply
      type: object
    VC:
      properties:
        name:
          description: Virtual currency name. Must be prefixed with 'VC_'.
          example: VC_VIRTUAL
          type: string
        supply:
          description: Supply of virtual currency.
          example: '1000000'
          type: string
        accountId:
          description: Virtual currency account.
          example: 5e68c66581f2ee32bc354087
          type: string
        baseRate:
          type: number
          default: 1
          description: >-
            Exchange rate of the base pair. Each unit of the created curency
            will represent value of baseRate*1 basePair.
        precision:
          type: number
          example: 6
          description: Number of decimal places of this virtual currency.
        trcType:
          type: string
          example: TRC20
          description: Type of Tron token.
          enum:
            - TRC10
            - TRC20
        basePair:
          description: >-
            Base pair for virtual currency. Transaction value will be calculated
            according to this base pair. e.g. 1 VC_VIRTUAL is equal to 1 BTC, if
            basePair is set to BTC.
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: BTC
          type: string
        customerId:
          description: ID of customer associated with virtual currency.
          type: string
          example: 5e68c66581f2ee32bc354087
        description:
          description: Used as a description within Tatum system.
          example: My Virtual Token description.
          type: string
        erc20Address:
          description: >-
            Address of ERC20 token, when virtual currency is based on the
            Ethereum blockchain.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        issuerAccount:
          description: >-
            Blockchain account for XLM or XRP based virtual currencies, which is
            marked as the issuer of the custom blockchain asset.
          example: GDKYMXOAJ5MK4EVIHHNWRGAAOUZMNZYAETMHFCD6JCVBPZ77TUAZFPKT
          type: string
        chain:
          description: >-
            Blockchain, on which this virtual currency is paired on. Not
            present, when Tatum's private ledger is used as a base ledger.
          example: ETH
          type: string
          enum:
            - ETH
            - XRP
            - XLM
        initialAddress:
          description: >-
            Ethereum address, where initial supply was minted, when virtual
            currency is based on the Ethereum blockchain.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
      required:
        - basePair
        - baseRate
        - name
        - accountId
        - supply
      type: object
    VirtualCurrencyUpdate:
      properties:
        name:
          description: >-
            Virtual currency name, which will be updated. It is not possible to
            update the name of the virtual currency.
          example: VC_VIRTUAL
          maxLength: 30
          pattern: ^[a-zA-Z0-9_]+$
          minLength: 1
          type: string
        baseRate:
          type: number
          example: 1
          default: 1
          minimum: 0
          description: >-
            Exchange rate of the base pair. Each unit of the created curency
            will represent value of baseRate*1 basePair.
        basePair:
          description: >-
            Base pair for virtual currency. Transaction value will be calculated
            according to this base pair. e.g. 1 VC_VIRTUAL is equal to 1 BTC, if
            basePair is set to BTC.
          $ref: '#/components/schemas/FiatOrCryptoCurrency'
          example: EUR
      required:
        - name
      type: object
    VirtualCurrencyOperation:
      properties:
        accountId:
          description: >-
            Ledger account with currency of the virtual currency, on which the
            operation will be performed.
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        amount:
          description: Amount of virtual currency to operate within this operation.
          maxLength: 38
          example: '1.5'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: My Payment
          maxLength: 100
          minLength: 1
          type: string
        reference:
          description: Reference of the payment.
          example: akjsndakjsdn-asd-kjasnd-asdkn-asdjnasjkdn
          maxLength: 100
          minLength: 1
          type: string
        transactionCode:
          description: For bookkeeping to distinct transaction purpose.
          example: 1_01_EXTERNAL_CODE
          maxLength: 100
          minLength: 1
          type: string
        recipientNote:
          description: >-
            Note visible to both, sender and recipient. Available for both Mint
            and Revoke operations
          example: Private note
          maxLength: 500
          minLength: 1
          type: string
        counterAccount:
          description: >-
            External account identifier. By default, there is no counterAccount
            present in the transaction.
          example: 5e6645712b55823de7ea82f1
          maxLength: 24
          minLength: 24
          type: string
        senderNote:
          description: Note visible to sender. Available in Revoke operation.
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - accountId
        - amount
      type: object
    Wallet:
      type: object
      required:
        - mnemonic
        - xpub
      properties:
        mnemonic:
          description: Generated mnemonic for wallet.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        xpub:
          description: >-
            Generated Extended public key for wallet with derivation path
            according to BIP44. This key can be used to generate addresses.
          example: >-
            xpub6EsCk1uU6cJzqvP9CdsTiJwT2rF748YkPnhv5Qo8q44DG7nn2vbyt48YRsNSUYS44jFCW9gwvD9kLQu9AuqXpTpM1c5hgg9PsuBLdeNncid
          type: string
    GeneratedAddressEth:
      type: object
      properties:
        address:
          type: string
          description: Ethereum address
          example: '0xa7673161CbfE0116A4De9E341f8465940c2211d4'
    GeneratedAddressBtc:
      type: object
      properties:
        address:
          type: string
          description: Bitcoin address
          example: '0xa7673161CbfE0116A4De9E341f8465940c2211d4'
    Withdrawal:
      properties:
        senderAccountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          maxLength: 24
          minLength: 24
          type: string
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        attr:
          description: >
            <p>Used to parametrize withdrawal. Used for XRP withdrawal to define
            destination tag of recipient, or XLM memo of the recipient, if
            needed.<br/>

            For Bitcoin, Litecoin, Bitcoin Cash, used as a change address for
            left coins from transaction.</p>
          maxLength: 64
          minLength: 1
          example: '12345'
          type: string
        compliant:
          description: >-
            Compliance check, if withdrawal is not compliant, it will not be
            processed.
          example: false
          type: boolean
        fee:
          description: Fee to be submitted as a transaction fee to blockchain.
          example: '0.0005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '12345'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - senderAccountId
        - address
        - fee
      type: object
    WithdrawalObject:
      properties:
        id:
          description: ID of the withdrawal
          example: 5e68c66581f2ee32bc354088
          type: string
        txId:
          description: Transaction ID of broadcast transaction
          example: 62BD544D1B9031EFC330A3E855CC3A0D51CA5131455C1AB3BCAC6D243F65460D
          type: string
        accountId:
          description: Sender account ID
          example: 5e68c66581f2ee32bc354087
          type: string
        status:
          description: Status of the withdrawal
          example: InProgress
          type: string
          enum:
            - InProgress
            - Done
            - Cancelled
        address:
          description: >-
            Blockchain address to send assets to. For BTC, LTC, DOGE and BCH, it
            is possible to enter list of multiple recipient blockchain addresses
            as a comma separated string.
          example: mpTwPdF8up9kidgcAStriUPwRdnE9MRAg7
          maxLength: 10000
          minLength: 1
          type: string
        reference:
          description: >-
            Transaction internal reference - unique identifier within Tatum
            ledger. In order of failure, use this value to search for problems.
          example: 0c64cc04-5412-4e57-a51c-ee5727939bcb
          type: string
        amount:
          description: Amount to be withdrawn to blockchain.
          maxLength: 38
          example: '0.001'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        attr:
          description: >
            <p>Used to parametrize withdrawal. Used for XRP withdrawal to define
            destination tag of recipient, or XLM memo of the recipient, if
            needed.<br/>

            For Bitcoin, Litecoin, Bitcoin Cash, used as a change address for
            left coins from transaction.</p>
          maxLength: 64
          minLength: 1
          example: '12345'
          type: string
        fee:
          description: Fee to be submitted as a transaction fee to blockchain.
          example: '0.0005'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        multipleAmounts:
          description: >-
            For BTC, LTC, DOGE and BCH, it is possible to enter list of multiple
            recipient blockchain amounts. List of recipient addresses must be
            present in the address field and total sum of amounts must be equal
            to the amount field.
          type: array
          items:
            type: string
            example: '0.1'
            pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        paymentId:
          description: >-
            Identifier of the payment, shown for created Transaction within
            Tatum sender account.
          example: '12345'
          maxLength: 100
          minLength: 1
          type: string
        senderNote:
          description: Note visible to owner of withdrawing account
          example: Sender note
          maxLength: 500
          minLength: 1
          type: string
      required:
        - amount
        - id
        - accountId
        - address
        - reference
        - fee
      type: object
    WithdrawalHint:
      additionalProperties:
        properties:
          address:
            $ref: '#/components/schemas/Address'
          amount:
            description: Balance for address.
            type: string
        type: object
      description: >-
        Object containing information about balance of Ethereum funds on each
        address linked to the account, from which withdrawal should be
        processed.
      type: object
    ResponseData:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        amount:
          description: >-
            Amount of unprocessed transaction outputs, that can be used for
            withdrawal. Bitcoin, Litecoin, Bitcoin Cash only.
          type: number
        vIn:
          description: >-
            Last used unprocessed transaction output, that can be used. Bitcoin,
            Litecoin, Bitcoin Cash only. If -1, it indicates prepared vOut with
            amount to be transferred to pool address.
          type: string
        vInIndex:
          description: >-
            Index of last used unprocessed transaction output in raw
            transaction, that can be used. Bitcoin, Litecoin, Bitcoin Cash only.
          type: integer
        scriptPubKey:
          type: string
          description: Script of last unprocessed UTXO. Bitcoin SV only.
    WithdrawalResponse:
      properties:
        reference:
          description: >-
            Transaction reference of the transaction connected to this
            withdrawal.
          example: 5e6be8e9e6aa436299950c41
          type: string
        data:
          items:
            $ref: '#/components/schemas/ResponseData'
          type: array
        id:
          description: ID of withdrawal
          example: 5e68c66581f2ee32bc354087
          type: string
      type: object
    XrpWallet:
      type: object
      required:
        - address
        - secret
      properties:
        address:
          description: Generated account address.
          example: rPRxSZzTFd6Yez3UMxFUPJvnhUhjewpjfV
          type: string
        secret:
          description: Generated secret for account.
          example: snSFTHdvSYQKKkYntvEt8cnmZuPJB
          type: string
    XrpTx:
      type: object
      properties:
        hash:
          type: string
          description: The SHA-512 hash of the transaction
          example: 1A32A054B04AC9D6814710DDCA416E72C4CD2D78D6C3DFC06CC9369CC4F6B250
        ledger_index:
          type: number
          description: The ledger index of the ledger that includes this transaction.
          example: 760469
        Account:
          type: string
          description: The unique address of the account that initiated the transaction.
          example: rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe
        Amount:
          type: string
          description: Amount of transaction, in drops. 1 drop = 0.000001 XRP.
          example: '1000000000'
        Destination:
          type: string
          description: Recipient account address.
          example: rDA3DJBUBjA1X3PtLLFAEXxX31oA5nL3QF
        Fee:
          type: string
          description: >-
            Integer amount of XRP, in drops, to be destroyed as a cost for
            distributing this transaction to the network. Some transaction types
            have different minimum requirements.
          example: '12'
        TransactionType:
          type: string
          description: >-
            Type of the transaction. XRp supports more than 18 transaction
            types. For the payment, Payment type is used.
          example: Payment
        Flags:
          type: number
          description: Set of bit-flags for this transaction.
          example: 2147483648
        LastLedgerSequence:
          type: number
          description: Last ledger, in which this transaction could have occured.
          example: 760473
        Sequence:
          type: number
          description: >-
            The sequence number of the account sending the transaction. A
            transaction is only valid if the Sequence number is exactly 1
            greater than the previous transaction from the same account.
          example: 118697
        date:
          type: number
          description: >-
            Timestamp of the transaction, in Ripple epoch (946684800 seconds
            after Unix Epoch)
          example: 622916620
        inLedger:
          type: number
          description: Ledger, in which transaction took place.
          example: 760469
        SigningPubKey:
          type: string
          example: 02356E89059A75438887F9FEE2056A2890DB82A68353BE9C0C0C8F89C0018B37FC
        TxnSignature:
          type: string
          example: >-
            304402206BB719587C55513515C092122813BC71C0BA28E7061830ABE6395308A1CAA0B302205B8256181965BB1345902597B2D3F1670F5F23A2E62097B3CCAA1F2EE631655E
        meta:
          properties:
            AffectedNodes:
              type: array
              items:
                type: object
                properties:
                  ModifiedNode:
                    properties:
                      FinalFields:
                        properties:
                          Account:
                            type: string
                            example: rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe
                          Balance:
                            type: string
                            example: '99871289963167439'
                          Flags:
                            type: number
                            example: 0
                          OwnerCount:
                            type: number
                            example: 0
                          Sequence:
                            type: number
                            example: 118698
                        type: object
                      LedgerEntryType:
                        type: string
                        example: AccountRoot
                      LedgerIndex:
                        type: string
                        example: >-
                          31CCE9D28412FF973E9AB6D0FA219BACF19687D9A2456A0C2ABC3280E9D47E37
                      PreviousFields:
                        required:
                          - Balance
                          - Sequence
                        properties:
                          Balance:
                            type: string
                            example: '99871290963167451'
                          Sequence:
                            type: number
                            example: 118697
                        type: object
                      PreviousTxnID:
                        type: string
                        example: >-
                          C72E7E2C5D6C123F739689DD6C286910667CC4C2C65F8E6CBBE264E32B08E1B4
                      PreviousTxnLgrSeq:
                        type: number
                        example: 760443
                    type: object
            TransactionIndex:
              type: number
              example: 2
            TransactionResult:
              type: string
              example: tesSUCCESS
            delivered_amount:
              type: string
              example: '1000000000'
          type: object
        validated:
          type: boolean
          description: >-
            Whether or not the transaction is included in a validated ledger.
            Any transaction not yet in a validated ledger is subject to change.
          example: true
    XrpLedger:
      type: object
      properties:
        ledger:
          type: object
          description: The complete header data of this ledger.
          properties:
            accepted:
              type: boolean
              example: true
            account_hash:
              type: string
              description: Hash of all account state information in this ledger, as hex.
              example: 9E081790E520046EBA4B2ED3869C762C16EEAC6817293D40AFFD1F1B602A2321
            close_flags:
              type: integer
              description: >-
                A bit-map of flags relating to the closing of this ledger.
                Currently, the ledger has only one flag defined for close_flags:
                sLCF_NoConsensusTime (value 1). If this flag is enabled, it
                means that validators were in conflict regarding the correct
                close time for the ledger, but build otherwise the same ledger,
                so they declared consensus while "agreeing to disagree" on the
                close time. In this case, the consensus ledger contains a
                close_time that is 1 second after that of the previous ledger.
                (In this case, there is no official close time, but the actual
                real-world close time is probably 3-6 seconds later than the
                specified close_time.)
              example: 0
            close_time:
              type: integer
              description: >-
                The time this ledger was closed, in seconds since the Ripple
                Epoch
              example: 640976331
            close_time_human:
              description: >-
                The time this ledger was closed, in human-readable format.
                Always uses the UTC time zone.
              type: string
              example: 2020-Apr-23 16:58:51.000000000 UTC
            close_time_resolution:
              description: Ledger close times are rounded to within this many seconds.
              type: integer
              example: 10
            closed:
              description: Whether or not this ledger has been closed.
              type: boolean
              example: true
            hash:
              type: string
              example: 198E3A43EFD03F61CF11EAD6585E8C82A21C1B91CCF782A3264973867E697906
            ledger_hash:
              description: Unique identifying hash of the entire ledger.
              type: string
              example: 198E3A43EFD03F61CF11EAD6585E8C82A21C1B91CCF782A3264973867E697906
            ledger_index:
              description: The Ledger Index of this ledger, as a quoted integer.
              type: string
              example: '6543210'
            parent_close_time:
              description: The time at which the previous ledger was closed.
              type: integer
              example: 640976330
            parent_hash:
              description: >-
                Unique identifying hash of the ledger that came immediately
                before this one.
              type: string
              example: 02860E47A797340505B51DE00E21AA576B1E50509C0C7FF8D5475954DA5FE7B5
            seqNum:
              type: string
              example: '6543210'
            totalCoins:
              type: string
              example: '99999971496551645'
            total_coins:
              type: string
              description: >-
                Total number of XRP drops in the network, as a quoted integer.
                (This decreases as transaction costs destroy XRP.)
              example: '99999971496551645'
            transaction_hash:
              type: string
              description: >-
                Hash of the transaction information included in this ledger, as
                hex.
              example: F415CCAB1ED22B2E81C8BE588A0521634F1CBC478BE3A5563B1E09D283A082C9
            transactions:
              type: array
              items:
                $ref: '#/components/schemas/XrpTx'
        ledger_hash:
          type: string
          description: Unique identifying hash of the entire ledger.
          example: 198E3A43EFD03F61CF11EAD6585E8C82A21C1B91CCF782A3264973867E697906
        ledger_index:
          type: integer
          description: The Ledger Index of this ledger.
          example: 6543210
        validated:
          type: boolean
          description: >-
            True if this data is from a validated ledger version; if omitted or
            set to false, this data is not final.
          example: true
    XrpAccountTx:
      type: object
      properties:
        account:
          type: string
          description: Unique Address identifying the related account.
          example: rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe
        ledger_index_max:
          type: number
          description: >-
            The ledger index of the earliest ledger actually searched for
            transactions.
          example: 760762
        ledger_index_min:
          type: number
          description: >-
            The ledger index of the most recent ledger actually searched for
            transactions.
          example: 614
        marker:
          description: >-
            Server-defined value indicating the response is paginated. Pass this
            to the next call to resume where this call left off.
          properties:
            ledger:
              type: number
              example: 759571
            seq:
              type: number
              example: 2
          type: object
        transactions:
          type: array
          description: >-
            Array of transactions matching the request's criteria, as explained
            below.
          items:
            type: object
            properties:
              meta:
                description: Transaction metadata included in JSON format.
                properties:
                  AffectedNodes:
                    type: array
                    items:
                      type: object
                      properties:
                        CreatedNode:
                          properties:
                            LedgerEntryType:
                              type: string
                              example: AccountRoot
                            LedgerIndex:
                              type: string
                              example: >-
                                0C9EDA0CDF11B0ACBF4B356C329607E5DDC25B7FCCC51A12579B58220AF6AF54
                            NewFields:
                              properties:
                                Account:
                                  type: string
                                  example: rGenhJmoWHqD6tgmUyxQHLQH8sPuRGtUcv
                                Balance:
                                  type: string
                                  example: '1000000000'
                                Sequence:
                                  type: number
                                  example: 1
                              type: object
                          type: object
                  TransactionIndex:
                    type: number
                    example: 2
                  TransactionResult:
                    type: string
                    example: tesSUCCESS
                  delivered_amount:
                    type: string
                    example: '1000000000'
                type: object
              tx:
                $ref: '#/components/schemas/XrpTx'
              validated:
                type: boolean
                description: >-
                  True if this data is from a validated ledger version; if
                  omitted or set to false, this data is not final.
                example: true
    XrpAccount:
      type: object
      properties:
        account_data:
          properties:
            Account:
              type: string
              description: >-
                The identifying address of this account, such as
                rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn.
              example: rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn
            Balance:
              type: string
              description: >-
                The account's current XRP balance in drops, represented as a
                string.
              example: '1000000000'
            Flags:
              type: number
              description: A bit-map of boolean flags enabled for this account.
              example: 0
            LedgerEntryType:
              type: string
              description: >-
                The value 0x0061, mapped to the string AccountRoot, indicates
                that this is an AccountRoot object.
              example: AccountRoot
            OwnerCount:
              type: number
              description: >-
                The number of objects this account owns in the ledger, which
                contributes to its owner reserve.
              example: 0
            PreviousTxnID:
              type: string
              description: >-
                The identifying hash of the transaction that most recently
                modified this object.
              example: 1A32A054B04AC9D6814710DDCA416E72C4CD2D78D6C3DFC06CC9369CC4F6B250
            PreviousTxnLgrSeq:
              type: number
              description: >-
                The index of the ledger that contains the transaction that most
                recently modified this object.
              example: 760469
            Sequence:
              type: number
              description: >-
                The sequence number of the next valid transaction for this
                account. (Each account starts with Sequence = 1 and increases
                each time a transaction is made.)
              example: 1
            index:
              type: string
              example: BB899D5C7C5E13AFFD702514FC78BE59313AC72AF02A3FC94E5F54F05EB2E20D
          type: object
          description: >-
            The AccountRoot ledger object with this account's information, as
            stored in the ledger.
        ledger_current_index:
          type: number
          description: The Ledger Index of the current open ledger these stats describe.
          example: 760476
        validated:
          type: boolean
          description: >-
            True if this data is from a validated ledger version; if omitted or
            set to false, this data is not final.
          example: false
    XrpAccountBalance:
      type: object
      properties:
        assets:
          type: array
          description: Different assets other then XRP available on the account.
          items:
            type: object
            properties:
              balance:
                type: string
                description: Balance of the asset.
                example: '1000000000'
              currency:
                type: string
                description: Asset identifier.
                example: 015841551A748AD2C1F76FF6ECB0CCCD00000000
        balance:
          type: string
          description: Balance of XRP, in drops.
          example: '1000000000'
    XrpFee:
      type: object
      properties:
        current_ledger_size:
          type: string
          description: >-
            Number of transactions provisionally included in the in-progress
            ledger.
          example: '8'
        current_queue_size:
          type: string
          description: Number of transactions currently queued for the next ledger.
          example: '0'
        drops:
          description: >-
            Various information about the transaction cost (the Fee field of a
            transaction), in drops of XRP.
          properties:
            base_fee:
              type: string
              description: >-
                The transaction cost required for a reference transaction to be
                included in a ledger under minimum load, represented in drops of
                XRP.
              example: '10'
            median_fee:
              type: string
              description: >-
                An approximation of the median transaction cost among
                transactions included in the previous validated ledger,
                represented in drops of XRP.
              example: '5000'
            minimum_fee:
              type: string
              description: >-
                The minimum transaction cost for a reference transaction to be
                queued for a later ledger, represented in drops of XRP. If
                greater than base_fee, the transaction queue is full.
              example: '10'
            open_ledger_fee:
              type: string
              description: >-
                The minimum transaction cost that a reference transaction must
                pay to be included in the current open ledger, represented in
                drops of XRP.
              example: '10'
          type: object
        expected_ledger_size:
          type: string
          description: >-
            The approximate number of transactions expected to be included in
            the current ledger. This is based on the number of transactions in
            the previous ledger.
          example: '67'
        ledger_current_index:
          type: number
          description: The Ledger Index of the current open ledger these stats describe.
          example: 760411
        levels:
          description: >-
            Various information about the transaction cost, in fee levels. The
            ratio in fee levels applies to any transaction relative to the
            minimum cost of that particular transaction.
          properties:
            median_level:
              type: string
              description: >-
                The median transaction cost among transactions in the previous
                validated ledger, represented in fee levels.
              example: '128000'
            minimum_level:
              type: string
              description: >-
                The minimum transaction cost required to be queued for a future
                ledger, represented in fee levels.
              example: '256'
            open_ledger_level:
              type: string
              description: >-
                The minimum transaction cost required to be included in the
                current open ledger, represented in fee levels.
              example: '256'
            reference_level:
              type: string
              description: >-
                The equivalent of the minimum transaction cost, represented in
                fee levels.
              example: '256'
          type: object
        max_queue_size:
          type: string
          description: >-
            The maximum number of transactions that the transaction queue can
            currently hold.
          example: '2000'
    XrpInfo:
      type: object
      properties:
        ledger_hash:
          type: string
          description: Current ledger hash.
          example: 20C40AAF14D52FB614E41625218AF6C97B43076C30060E85AEFB38D54A99050F
        ledger_index:
          type: number
          description: Current ledger index.
          example: 760383
    ListOderBookActiveSellBody:
      type: object
      required:
        - pageSize
      properties:
        id:
          type: string
          description: >-
            Account ID. If present, list current active sell trades for that
            account.
          example: 5e68c66581f2ee32bc354087
        customerId:
          description: >-
            Customer ID. If present, list current active buy trades for that
            customer.
          type: string
          example: 5e68c66581f2ee32bc354087
        pageSize:
          description: Max number of items per page is 50.
          type: number
          example: 10
          maximum: 50
          minimum: 1
        offset:
          description: Offset to obtain next page of the data.
          type: number
          example: 0
        pair:
          description: >-
            Trade pair. If present, list current active sell trades for that
            pair.
          type: string
          example: BTC/EUR
          minLength: 3
          maxLength: 30
          pattern: ^[A-a-zZ0-9_\-]+\/[A-Za-z0-9_\-]+$
        count:
          description: >-
            Get the total trade pair count based on the filter. Either count or
            pageSize is accepted.
          example: true
          type: boolean
        tradeType:
          description: Trade type.
          example: SELL
          type: string
          enum:
            - FUTURE_SELL
            - SELL
        amount:
          type: array
          description: Amount of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        fill:
          type: array
          description: Fill of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        price:
          type: array
          description: Price of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        created:
          type: array
          description: Created date of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        sort:
          $ref: '#/components/schemas/OrderBookSort'
    ListOderBookActiveBuyBody:
      type: object
      required:
        - pageSize
      properties:
        id:
          type: string
          description: >-
            Account ID. If present, list current active sell trades for that
            account.
          example: 5e68c66581f2ee32bc354087
        customerId:
          description: >-
            Customer ID. If present, list current active buy trades for that
            customer.
          type: string
          example: 5e68c66581f2ee32bc354087
        pageSize:
          description: Max number of items per page is 50.
          type: number
          example: 10
          maximum: 50
          minimum: 1
        offset:
          description: Offset to obtain next page of the data.
          type: number
          example: 0
        pair:
          description: >-
            Trade pair. If present, list current active sell trades for that
            pair.
          type: string
          example: BTC/EUR
          minLength: 3
          maxLength: 30
          pattern: ^[A-a-zZ0-9_\-]+\/[A-Za-z0-9_\-]+$
        count:
          description: >-
            Get the total trade pair count based on the filter. Either count or
            pageSize is accepted.
          example: true
          type: boolean
        tradeType:
          description: Trade type.
          example: BUY
          type: string
          enum:
            - FUTURE_BUY
            - BUY
        amount:
          type: array
          description: Amount of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        fill:
          type: array
          description: Fill of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        price:
          type: array
          description: Price of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        created:
          type: array
          description: Created date of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        sort:
          $ref: '#/components/schemas/OrderBookSort'
    ListOderBookMatchedBody:
      type: object
      required:
        - pageSize
      properties:
        id:
          type: string
          description: >-
            Account ID. If present, list matched FUTURE_BUY/FUTURE_SELL orders
            trades for that account.
          example: 5e68c66581f2ee32bc354087
        customerId:
          description: >-
            Customer ID. If present, list matched FUTURE_BUY/FUTURE_SELL orders
            trades for that customer.
          type: string
          example: 5e68c66581f2ee32bc354087
        pageSize:
          description: Max number of items per page is 50.
          type: number
          example: 10
          maximum: 50
          minimum: 1
        offset:
          description: Offset to obtain next page of the data.
          type: number
          example: 0
        pair:
          description: >-
            Trade pair. If present, list matched FUTURE_BUY/FUTURE_SELL orders
            trades for that pair.
          type: string
          example: BTC/EUR
          minLength: 3
          maxLength: 30
          pattern: ^[A-a-zZ0-9_\-]+\/[A-Za-z0-9_\-]+$
        count:
          description: >-
            Get the total trade pair count based on the filter. Either count or
            pageSize is accepted.
          example: true
          type: boolean
        type:
          description: Trade type.
          example: FUTURE_SELL
          type: string
          enum:
            - FUTURE_SELL
            - FUTURE_BUY
        amount:
          type: array
          description: Amount of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        fill:
          type: array
          description: Fill of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        price:
          type: array
          description: Price of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        created:
          type: array
          description: Created date of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        sort:
          $ref: '#/components/schemas/OrderBookSort'
    ListOderBookHistoryBody:
      type: object
      required:
        - pageSize
      properties:
        id:
          description: >-
            Account ID. If present, only closed trades for given account will be
            present.
          type: string
          example: 5e68c66581f2ee32bc354087
        customerId:
          description: >-
            Customer ID. If present, only closed trades for given customer will
            be present.
          type: string
          example: 5e68c66581f2ee32bc354087
        pageSize:
          description: Max number of items per page is 50.
          type: number
          example: 10
          maximum: 50
          minimum: 1
        offset:
          description: Offset to obtain next page of the data.
          type: number
          example: 0
        pair:
          description: Trade pair. If present, list historical trades for that pair.
          type: string
          example: BTC/EUR
          minLength: 3
          maxLength: 30
          pattern: ^[A-a-zZ0-9_\-]+\/[A-Za-z0-9_\-]+$
        count:
          description: >-
            Get the total trade pair count based on the filter. Either count or
            pageSize is accepted.
          example: true
          type: boolean
        types:
          description: Trade types.
          type: array
          items:
            type: string
            example: BUY
            enum:
              - FUTURE_BUY
              - FUTURE_SELL
              - BUY
              - SELL
        amount:
          type: array
          description: Amount of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        fill:
          type: array
          description: Fill of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        price:
          type: array
          description: Price of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        created:
          type: array
          description: Created date of the trade. AND is used between filter options.
          items:
            type: object
            properties:
              op:
                type: string
                description: Filtering operation.
                example: gte
                enum:
                  - gte
                  - lte
                  - gt
                  - lt
                  - eq
                  - neq
              value:
                type: string
                description: Value of the operation.
                example: '1.5'
            required:
              - op
              - value
        sort:
          $ref: '#/components/schemas/OrderBookSort'
    OrderBookSort:
      description: >-
        Sorts the result by selected property. The priority of the items is
        determined by order of the sort properties in array.
      items:
        type: string
        enum:
          - PRICE_ASC
          - PRICE_DESC
          - CREATED_ASC
          - CREATED_DESC
          - AMOUNT_ASC
          - AMOUNT_DESC
          - FILL_ASC
          - FILL_DESC
          - FEE_ASC
          - FEE_DESC
        example: PRICE_ASC
    GasPumpAddress:
      type: string
      description: A gas pump address
      example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
    Activated:
      type: object
      properties:
        activated:
          type: boolean
          description: If set to "true", the gas pump address has been activated
          example: true
      example:
        activated: true
    ActivateGasPump:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
        owner:
          type: string
          description: >-
            The blockchain address that owns the precalculated gas pump
            addresses and is used to pay gas fees for operations made on the gas
            pump addresses; can be referred to as "master address"
          example: '0x2b5a0bE5940B63dE1eDdCCCa7bd977357e2488eD'
        from:
          type: integer
          description: The start index of the range of gas pump addresses to activate
          minimum: 0
          example: 0
        to:
          type: integer
          description: >-
            The end index of the range of gas pump addresses to activate; must
            be greater than or equal to the value in the <code>from</code>
            parameter
          minimum: 0
          example: 200
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that will pay the gas fee
            for the activation transaction
      required:
        - chain
        - owner
        - from
        - to
        - fromPrivateKey
    ActivateGasPumpTatum:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - CELO
            - ETH
            - MATIC
            - KLAY
            - ONE
        owner:
          type: string
          description: >-
            The blockchain address that owns the precalculated gas pump
            addresses and is used to pay gas fees for operations made on the gas
            pump addresses; can be referred to as "master address"
          example: '0x2b5a0bE5940B63dE1eDdCCCa7bd977357e2488eD'
        from:
          type: integer
          description: The start index of the range of gas pump addresses to activate
          minimum: 0
          example: 0
        to:
          type: integer
          description: >-
            The end index of the range of gas pump addresses to activate; must
            be greater than or equal to the value in the <code>from</code>
            parameter
          minimum: 0
          example: 200
        feesCovered:
          type: boolean
          example: true
          description: >-
            Set to "true" to cover the gas fee by credits from your monthly
            credit allowance.
      required:
        - chain
        - owner
        - from
        - to
        - feesCovered
    ActivateGasPumpKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - MATIC
            - ONE
        owner:
          type: string
          description: >-
            The blockchain address that owns the precalculated gas pump
            addresses and is used to pay gas fees for operations made on the gas
            pump addresses; can be referred to as "master address"
          example: '0x2b5a0bE5940B63dE1eDdCCCa7bd977357e2488eD'
        from:
          type: integer
          description: The start index of the range of gas pump addresses to activate
          minimum: 0
          example: 0
        to:
          type: integer
          description: >-
            The end index of the range of gas pump addresses to activate; must
            be greater than or equal to the value in the <code>from</code>
            parameter
          minimum: 0
          example: 200
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            will pay the gas fee for the activation transaction
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            specific address from the mnemonic
      required:
        - chain
        - owner
        - from
        - to
        - signatureId
    ActivateGasPumpCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        owner:
          type: string
          description: >-
            The blockchain address that owns the precalculated gas pump
            addresses and is used to pay gas fees for operations made on the gas
            pump addresses; can be referred to as "master address"
          example: '0x2b5a0bE5940B63dE1eDdCCCa7bd977357e2488eD'
        from:
          type: integer
          description: The start index of the range of gas pump addresses to activate
          minimum: 0
          example: 0
        to:
          type: integer
          description: >-
            The end index of the range of gas pump addresses to activate; must
            be greater than or equal to the value in the <code>from</code>
            parameter
          minimum: 0
          example: 200
        feeCurrency:
          type: string
          description: The currency in which the gas fee will be paid
          example: CELO
          enum:
            - CELO
            - CUSD
            - CEUR
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that will pay the gas fee
            for the activation transaction
      required:
        - chain
        - owner
        - from
        - to
        - fromPrivateKey
        - feeCurrency
    ActivateGasPumpCeloKMS:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        owner:
          type: string
          description: >-
            The blockchain address that owns the precalculated gas pump
            addresses and is used to pay gas fees for operations made on the gas
            pump addresses; can be referred to as "master address"
          example: '0x2b5a0bE5940B63dE1eDdCCCa7bd977357e2488eD'
        from:
          type: integer
          description: The start index of the range of gas pump addresses to activate
          minimum: 0
          example: 0
        to:
          type: integer
          description: >-
            The end index of the range of gas pump addresses to activate; must
            be greater than or equal to the value in the <code>from</code>
            parameter
          minimum: 0
          example: 200
        feeCurrency:
          type: string
          description: The currency in which the gas fee will be paid
          example: CELO
          enum:
            - CELO
            - CUSD
            - CEUR
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            will pay the gas fee for the activation transaction
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address that will pay the gas fee that was generated from the
            mnemonic
      required:
        - chain
        - owner
        - from
        - to
        - signatureId
        - feeCurrency
    ActivateGasPumpTron:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        owner:
          type: string
          description: >-
            The blockchain address that owns the precalculated gas pump
            addresses and is used to pay gas fees for operations made on the gas
            pump addresses; can be referred to as "master address"
          example: '0x2b5a0bE5940B63dE1eDdCCCa7bd977357e2488eD'
        from:
          type: integer
          description: The start index of the range of gas pump addresses to activate
          minimum: 0
          example: 0
        to:
          type: integer
          description: >-
            The end index of the range of gas pump addresses to activate; must
            be greater than or equal to the value in the <code>from</code>
            parameter
          minimum: 0
          example: 200
        feeLimit:
          type: number
          description: The maximum amount to be paid as the gas fee (in TRX)
          example: 600
        fromPrivateKey:
          type: string
          maxLength: 64
          example: e26c1595086cd52f2bc61774c7228b841db66b4b9b0ed36dc29dbc90595dd5b6
          minLength: 64
          description: >-
            The private key of the blockchain address that will pay the gas fee
            for the activation transaction
      required:
        - chain
        - owner
        - from
        - to
        - feeLimit
        - fromPrivateKey
    ActivateGasPumpTronKMS:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        owner:
          type: string
          description: >-
            The blockchain address that owns the precalculated gas pump
            addresses and is used to pay gas fees for operations made on the gas
            pump addresses; can be referred to as "master address"
          example: '0x2b5a0bE5940B63dE1eDdCCCa7bd977357e2488eD'
        from:
          type: integer
          description: The start index of the range of gas pump addresses to activate
          minimum: 0
          example: 0
        to:
          type: integer
          description: >-
            The end index of the range of gas pump addresses to activate; must
            be greater than or equal to the value in the <code>from</code>
            parameter
          minimum: 0
          example: 200
        feeLimit:
          type: number
          description: The maximum amount to be paid as the gas fee (in TRX)
          example: 600
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            will pay the gas fee for the activation transaction
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            specific address from the mnemonic
      required:
        - chain
        - owner
        - from
        - to
        - feeLimit
        - signatureId
    CreateGasPump:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - CELO
            - ETH
            - MATIC
            - KLAY
            - ONE
            - TRON
        owner:
          type: string
          description: >-
            The blockchain address that will own the precalculated gas pump
            addresses and will be used to pay gas fees for operations made on
            the gas pump addresses; can be referred to as "master address"
          example: '0x2b5a0bE5940B63dE1eDdCCCa7bd977357e2488eD'
        from:
          type: integer
          description: The start index of the range of gas pump addresses to precalculate
          minimum: 0
          example: 0
        to:
          type: integer
          description: >-
            The end index of the range of gas pump addresses to precalculate;
            must be greater than or equal to the value in the <code>from</code>
            parameter
          minimum: 0
          example: 1000
      required:
        - chain
        - owner
        - from
        - to
    GasPumpTrxOut:
      type: object
      properties:
        valid:
          type: array
          description: Activated gas pump addresses
          items:
            $ref: '#/components/schemas/ValidGasPumpAddress'
        invalid:
          type: array
          description: Not activated gas pump addresses
          items:
            $ref: '#/components/schemas/InvalidGasPumpAddress'
    ValidGasPumpAddress:
      type: object
      properties:
        index:
          type: number
          description: The index of the activated gas pump address
          example: 1
        address:
          type: string
          description: The activated gas pump address
          example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
    InvalidGasPumpAddress:
      type: object
      properties:
        address:
          type: string
          description: The not activated gas pump address
          example: '0x2b5a0bE5940B63dE1eDdCCCa7bd977357e2488eD'
        reason:
          type: string
          description: The reason why the gas pump address did not get activated
          example: Wallet already exists
    SolanaMarketplaceTransactionHash:
      type: object
      properties:
        txId:
          description: The hash (ID) of the transaction
          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9
          type: string
        contractAddress:
          description: The address of deployed marketplace contract
          example: 9qhKAgVRebMnjVM4AHdHcseYQG47Mns3U8e7dRz24kg5
          type: string
        feeAccount:
          description: The blockchain address of the fee account
          example: B2va8BWefHKhKnejxiKxLxWYbpzwJWPsNGzEPCiYHQDH
          type: string
        treasuryAccount:
          description: The blockchain address of the treasury account
          example: 9MLntRkghAgC7ZR1RQouE9EkXwjTfZxbi9nBziofPTjM
          type: string
      required:
        - txId
        - contractAddress
        - feeAccount
        - treasuryAccount
    SolanaMarketplaceSellTransactionHash:
      type: object
      properties:
        txId:
          description: The hash (ID) of the transaction
          example: c83f8818db43d9ba4accfe454aa44fc33123d47a4f89d47b314d6748eb0e9bc9
          type: string
        listingId:
          description: The ID of the listing
          example: 9qhKAgVRebMnjVM4AHdHcseYQG47Mns3U8e7dRz24kg5
          type: string
      required:
        - txId
        - listingId
    EvmListingData:
      type: object
      properties:
        amount:
          type: string
          description: >-
            Amount of NFTs to sold in this listing. Valid only for ERC1155
            listings.
          example: '1'
        buyer:
          type: string
          description: Address of the buyer, if exists.
          example: '0xc21C81ef03f98898Fb155E00C364e8a7b9D158b8'
        erc20Address:
          type: string
          description: >-
            Address of the ERC20 token smart contract, which should be used for
            paying for the asset
          example: '0xc21C81ef03f98898Fb155E00C364e8a7b9D158b8'
        isErc721:
          type: boolean
          description: True if asset is NFT of type ERC721, false if ERC1155
          example: true
        listingId:
          type: string
          description: ID of the listing.
          example: '12345'
        nftAddress:
          type: string
          description: Address of the NFT smart contract.
          example: '0xc21C81ef03f98898Fb155E00C364e8a7b9D158b8'
        price:
          type: string
          description: >-
            Price of the NFT asset in native currency or ERC20 token based on
            the presence of erc20Address field.
          example: '1.234'
        seller:
          type: string
          description: Address of the seller.
          example: '0xc21C81ef03f98898Fb155E00C364e8a7b9D158b8'
        state:
          type: string
          description: State of the listing. 0 - available, 1 - sold, 2 - cancelled
          enum:
            - '0'
            - '1'
            - '2'
          example: '1'
    SolanaListingData:
      type: object
      required:
        - amount
        - listingId
        - nft
        - price
        - seller
        - state
        - createdAt
      properties:
        amount:
          type: string
          description: Amount of NFTs to sold in this listing.
          example: '1'
        buyer:
          type: string
          description: Address of the buyer, if exists.
          example: 9qhKAgVRebMnjVM4AHdHcseYQG47Mns3U8e7dRz24kg5
        listingId:
          type: string
          description: ID of the listing
          example: 9qhKAgVRebMnjVM4AHdHcseYQG47Mns3U8e7dRz24kg5
        nft:
          type: object
          required:
            - address
            - data
          properties:
            address:
              type: string
              description: NFT Address
              example: 9qhKAgVRebMnjVM4AHdHcseYQG47Mns3U8e7dRz24kg5
            data:
              $ref: '#/components/schemas/SolanaNftMetadata'
        price:
          type: string
          description: >-
            Price of the NFT asset in native currency or ERC20 token based on
            the presence of erc20Address field.
          example: '1.234'
        seller:
          type: string
          description: Address of the seller.
          example: 9qhKAgVRebMnjVM4AHdHcseYQG47Mns3U8e7dRz24kg5
        state:
          type: string
          description: State of the listing. 0 - available, 1 - sold, 2 - cancelled
          enum:
            - '0'
            - '1'
            - '2'
          example: '1'
        createdAt:
          type: number
          description: Timestamp when this listing was created
          example: 1669751911
        purchasedAt:
          type: number
          description: Timestamp when this listing was purchased
          example: 1669751911
        cancelledAt:
          type: number
          description: Timestamp when this listing was cancelled
          example: 1669751911
    FlowAddressXpub:
      type: object
      properties:
        txId:
          type: string
          example: d1c75a84e4bdf0dd9bf1bcd0ce4fb25f89e2ed3c5e9574dbca2760b52c428717
          description: The ID of the transaction
        address:
          type: string
          example: 5695321609876367000
          description: The generated blockchain address
      required:
        - txId
        - address
    CountryCode:
      type: string
      enum:
        - AD
        - AE
        - AF
        - AG
        - AI
        - AL
        - AM
        - AO
        - AR
        - AS
        - AT
        - AU
        - AW
        - AX
        - AZ
        - BA
        - BB
        - BD
        - BE
        - BF
        - BG
        - BH
        - BI
        - BJ
        - BL
        - BM
        - BN
        - BO
        - BQ
        - BR
        - BS
        - BT
        - BV
        - BW
        - BY
        - BZ
        - CA
        - CC
        - CD
        - CF
        - CG
        - CH
        - CI
        - CK
        - CL
        - CM
        - CN
        - CO
        - CR
        - CU
        - CV
        - CW
        - CX
        - CY
        - CZ
        - DE
        - DJ
        - DK
        - DM
        - DO
        - DZ
        - EC
        - EE
        - EG
        - EH
        - ER
        - ES
        - ET
        - FI
        - FJ
        - FK
        - FM
        - FO
        - FR
        - GA
        - GB
        - GD
        - GE
        - GF
        - GG
        - GH
        - GI
        - GL
        - GM
        - GN
        - GP
        - GQ
        - GR
        - GS
        - GT
        - GU
        - GW
        - GY
        - HK
        - HM
        - HN
        - HR
        - HT
        - HU
        - ID
        - IE
        - IL
        - IM
        - IN
        - IO
        - IQ
        - IR
        - IS
        - IT
        - JE
        - JM
        - JO
        - JP
        - KE
        - KG
        - KH
        - KI
        - KM
        - KN
        - KP
        - KR
        - KW
        - KY
        - KZ
        - LA
        - LB
        - LC
        - LI
        - LK
        - LR
        - LS
        - LT
        - LU
        - LV
        - LY
        - MA
        - MC
        - MD
        - ME
        - MF
        - MG
        - MH
        - MK
        - ML
        - MM
        - MN
        - MO
        - MP
        - MQ
        - MR
        - MS
        - MT
        - MU
        - MV
        - MW
        - MX
        - MY
        - MZ
        - NA
        - NC
        - NE
        - NF
        - NG
        - NI
        - NL
        - 'NO'
        - NP
        - NR
        - NU
        - NZ
        - OM
        - PA
        - PE
        - PF
        - PG
        - PH
        - PK
        - PL
        - PM
        - PN
        - PR
        - PS
        - PT
        - PW
        - PY
        - QA
        - RE
        - RO
        - RS
        - RU
        - RW
        - SA
        - SB
        - SC
        - SD
        - SE
        - SG
        - SH
        - SI
        - SJ
        - SK
        - SL
        - SM
        - SN
        - SO
        - SR
        - SS
        - ST
        - SV
        - SX
        - SY
        - SZ
        - TC
        - TD
        - TF
        - TG
        - TH
        - TJ
        - TK
        - TL
        - TM
        - TN
        - TO
        - TR
        - TT
        - TV
        - TW
        - TZ
        - UA
        - UG
        - UM
        - US
        - UY
        - UZ
        - VA
        - VC
        - VE
        - VG
        - VI
        - VN
        - VU
        - WF
        - WS
        - YE
        - YT
        - ZA
        - ZM
        - ZW
    FiatCurrency:
      type: string
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BRL
        - BSD
        - BTN
        - BWP
        - BYN
        - BYR
        - BZD
        - CAD
        - CDF
        - CHF
        - CLF
        - CLP
        - CNY
        - COP
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DOGE
        - DZD
        - EGP
        - ERN
        - ETB
        - ETH
        - EUR
        - FJD
        - FKP
        - FLOW
        - FUSD
        - GBP
        - GEL
        - GGP
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - IMP
        - INR
        - IQD
        - IRR
        - ISK
        - JEP
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LVL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XCD
        - XDR
        - XOF
        - XPF
        - YER
        - ZAR
        - ZMK
        - ZMW
        - ZWL
    FiatOrCryptoCurrency:
      type: string
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - ALGO
        - ADA
        - BAM
        - BAT
        - BBD
        - BCH
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BNB
        - BND
        - BOB
        - BRL
        - BSD
        - BTC
        - BTN
        - BWP
        - BYN
        - BYR
        - BZD
        - CAD
        - CDF
        - CHF
        - CLF
        - CLP
        - CNY
        - COP
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DOGE
        - DZD
        - EGP
        - ERN
        - ETB
        - ETH
        - EUR
        - FJD
        - FKP
        - FLOW
        - FUSD
        - FREE
        - GMC
        - GMC_BSC
        - RMD
        - GBP
        - GEL
        - GGP
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - IMP
        - INR
        - IQD
        - IRR
        - ISK
        - JEP
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LEO
        - LINK
        - LKR
        - LRD
        - LSL
        - LTC
        - LTL
        - LVL
        - LYD
        - MAD
        - MATIC
        - MDL
        - MGA
        - MKD
        - MKR
        - MMK
        - MMY
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PAX
        - PAXG
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TRON
        - TUSD
        - BUSD
        - TWD
        - TZS
        - UAH
        - UGX
        - UNI
        - USD
        - USDC
        - USDC_MATIC
        - USDC_MATIC_NATIVE
        - USDT
        - USDT_TRON
        - USDT_MATIC
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WBTC
        - WST
        - XAF
        - XAG
        - XAU
        - XCD
        - XCON
        - XDR
        - XOF
        - XPF
        - XRP
        - YER
        - ZAR
        - ZMK
        - ZMW
        - ZWL
    GasEstimated:
      type: object
      required:
        - gasLimit
        - gasPrice
      properties:
        gasPrice:
          type: string
          description: The estimated price for one gas unit (in wei)
          example: '10000000000'
        gasLimit:
          type: number
          description: >-
            The number of the gas units needed to process the transaction at the
            estimated gas price
          example: '21000'
    Erc20Currency:
      enum:
        - BAT
        - BUSD
        - COIIN
        - ETH
        - FREE
        - GMC
        - LATOKEN
        - LEO
        - LINK
        - MATIC_ETH
        - MKR
        - MMY
        - PAX
        - PAXG
        - PLTC
        - REVV
        - SAND
        - TUSD
        - UNI
        - USDC
        - USDT
        - WBTC
        - XCON
      example: ETH
      type: string
    NodeRpcPutChains:
      type: string
      example: algorand-testnet-algod
      enum:
        - algorand-testnet-algod
        - algorand-mainnet-algod
        - algorand-testnet-indexer
        - algorand-mainnet-indexer
        - egld-mainnet
        - egld-testnet
        - stellar-mainnet
        - stellar-testnet
        - bnb-mainnet
        - bnb-testnet
    NodeRpcGetChains:
      type: string
      example: algorand-testnet-algod
      enum:
        - algorand-testnet-algod
        - algorand-mainnet-algod
        - algorand-testnet-indexer
        - algorand-mainnet-indexer
        - egld-mainnet
        - egld-testnet
        - lisk-mainnet
        - lisk-testnet
        - stellar-mainnet
        - stellar-testnet
        - tezos-mainnet
        - tezos-testnet
        - tron-mainnet
        - tron-testnet
        - flow-mainnet
        - flow-testnet
        - bnb-mainnet
        - bnb-testnet
    NodeRpcPostChains:
      type: string
      example: ethereum-sepolia
      enum:
        - ethereum-sepolia
        - ethereum-mainnet
        - ethereum-goerli
        - ethereum-holesky
        - polygon-mumbai
        - polygon-mainnet
        - klaytn-baobab
        - klaytn-cypress
        - solana-devnet
        - solana-mainnet
        - celo-mainnet
        - celo-testnet
        - lisk-mainnet
        - lisk-testnet
        - algorand-testnet-algod
        - algorand-mainnet-algod
        - algorand-testnet-indexer
        - algorand-mainnet-indexer
        - bitcoin-mainnet
        - bitcoin-testnet
        - litecoin-core-mainnet
        - litecoin-core-testnet
        - kcs-testnet
        - kcs-mainnet
        - cardano-preprod
        - cardano-mainnet
        - vechain-testnet
        - vechain-mainnet
        - ripple-mainnet
        - ripple-testnet
        - flow-mainnet
        - flow-testnet
        - xdc-mainnet
        - xdc-testnet
        - tron-mainnet
        - tron-testnet
        - bsc-mainnet
        - bsc-testnet
        - bch-mainnet
        - bch-testnet
        - stellar-mainnet
        - stellar-testnet
        - bnb-mainnet
        - bnb-testnet
        - egld-mainnet
        - egld-testnet
        - doge-mainnet
        - doge-testnet
        - one-mainnet-s0
        - one-testnet-s0
        - eos-mainnet
        - eos-testnet
        - avax-mainnet
        - avax-testnet
        - avax-x-mainnet
        - avax-x-testnet
        - avax-p-mainnet
        - avax-p-testnet
        - fantom-mainnet
        - fantom-testnet
        - arb-nova-mainnet
        - arb-one-mainnet
        - arb-testnet
        - optimism-mainnet
        - optimism-testnet
        - near-mainnet
        - near-testnet
        - cro-mainnet
        - cro-testnet
        - rsk-mainnet
        - rsk-testnet
        - aurora-mainnet
        - aurora-testnet
        - gno-mainnet
        - gno-testnet
        - dot-mainnet
        - dot-testnet
        - ksm-mainnet
        - ksm-testnet
        - oasis-mainnet
        - oasis-testnet
        - tezos-mainnet
        - tezos-testnet
        - zcash-mainnet
        - zcash-testnet
        - palm-mainnet
        - palm-testnet
        - zilliqa-mainnet
        - zilliqa-testnet
        - ethereum-classic-mainnet
    TransferManagedAddress:
      type: object
      properties:
        chain:
          type: string
          description: Blockchain to work on
          example: SOL
          enum:
            - SOL
        txData:
          type: string
          minLength: 1
          maxLength: 500000
          description: >-
            Hex serialized data representing transaction, which should be signed
            using one of the managed wallets.
          example: >-
            020001044a22af97a838a504e6f7c0b18d779afcea612da50794cc1dac641861fc1ab14afa5cacaf91c298694e64bb5496916c3c68a32affb92d4bcd2736fbb00169d57bd840de2a454960308f688cd3ee308c1fa01ecfa0b03770aaaf3b52d71d46c31d000000000000000000000000000000000000000000000000000000000000000060d38e0da20dc5900b7e902c918eae6a95e2d90af154b53a422f4ab26b050f4f01030201020c02000000e803000000000000
        walletIds:
          type: array
          items:
            type: object
            required:
              - key
              - type
            properties:
              key:
                type: string
                description: >-
                  Wallet ID of wallet, which should be used for signing. In case
                  of RAW type of the wallet, this represents the private key
                  which will be used for signatures.
                example: 0b1eae3d-2520-4903-8bbf-5dec3ad2a5d4
              type:
                type: string
                example: MANAGED
                description: >-
                  Type of the wallet to be used - RAW represents native private
                  key, MANAGED represents ID of the managed wallet.
                enum:
                  - MANAGED
                  - RAW
      required:
        - chain
        - txData
        - walletIds
    CustodialManagedAddress:
      type: object
      required:
        - address
        - walletId
        - chain
      properties:
        address:
          type: string
          description: Blockchain address
          example: 8oJ8KRL87ja7DjPSsmBG1KtfrpsfLGDMJDGzev68DGqx
        walletId:
          type: string
          format: uuid
          example: 52901013-94ab-4124-8645-acba4ee90bb8
          description: Unique identifier of the managed address
        chain:
          type: string
          description: Blockchain of the address
          example: SOL
          enum:
            - BSC
            - ETH
            - KLAY
            - ONE
            - CELO
            - MATIC
            - SOL
            - LTC
            - BTC
        privateKey:
          type: string
          example: >-
            4jCFiqh3tLxKxt3vYW478qodivkCkSzqtpG4wqEaYkgdVC1o79a1VJTc5UiCmCmZBwoJmjaenfYH1ML7ra8vbNpA
          description: Private key of the address. Not present by default.
    AlgoWallet:
      type: object
      properties:
        address:
          maxLength: 58
          minLength: 58
          description: address of Algorand account.
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        secret:
          maxLength: 103
          minLength: 103
          description: secretKey can generate Mnemonic, similar to private Key.
          type: string
          example: >-
            NBYMCVEEDFYV3TPWVRE6APE7PKHUJD4XAKXCKNCLKGUXOC3LFNJGZQCJCRA53HB7ZAHF6NFJH2QIVQ5USQNWG35QCJLD4KZ5IWMB24Q
        mnemonic:
          description: Mnemonic of the wallet.
          type: string
          example: >-
            work syrup plug fluid moon regret wolf visa muffin supply erode
            lemon absurd voyage plastic blade baby stable burger glue dynamic
            expire cabin abandon pilot
    AlgoBlock:
      type: object
      properties:
        genesisHash:
          description: hash to which this block belongs
          type: string
          example: SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=
        genesisId:
          description: ID to which this block belongs
          type: string
          example: testnet-v1.0
        previousBlockHash:
          description: Previous block hash
          type: string
          example: JeLGQTbqnBsD3NXE8Bf1TpPFMFadEVVyHhkcD61ljAU=
        rewards:
          description: rewards
          type: object
          example:
            fee-sink: A7NMWS3NT3IUDMLVO26ULGXGIIOUQ3ND2TXSER6EBGRZNOBOUIQXHIBGDE
            rewards-calculation-round: 17000000
            rewards-level: 27521
            rewards-pool: 7777777777777777777777777777777777777777777777777774MSJUVU
            rewards-rate: 0
            rewards-residue: 2020197303
        round:
          description: Current round on which this block was appended to the chain
          type: number
          example: 16775567
        seed:
          description: Sortition seed.
          type: string
          example: VPBpyrHyqbfqrHqJ3l39LXGN4qgEdNnE5kpJfk3vJtA=
        timestamp:
          description: Block creation timestamp in seconds since eposh
          type: number
          example: 1632167753
        txns:
          description: Array of transactions
          type: array
          items:
            $ref: '#/components/schemas/AlgoTx'
        txn:
          description: >-
            TransactionsRoot authenticates the set of transactions appearing in
            the block.
          type: string
          example: ++MWW82yIvYQ0AEoPP0aDGGHGk/dSp5WHlbkf9SVU1U=
        txnc:
          description: TxnCounter counts the number of transations committed in the ledger
          type: number
          example: 27814470
        upgradeState:
          description: upgrade state
          type: object
          example:
            current-protocol: >-
              https://github.com/algorandfoundation/specs/tree/abc54f79f9ad679d2d22f0fb9909fb005c16f8a1
            next-protocol-approvals: 0
            next-protocol-switch-on: 0
            next-protocol-vote-before: 0
        upgradeVote:
          description: upgrade vote
          type: object
          example:
            upgrade-approve: false
            upgrade-delay: 0
    AlgoTx:
      type: object
      properties:
        closeRewards:
          description: rewards applied to close-remainder-to account.
          type: number
          example: 0
        closingAmount:
          description: closing amount for transaction.
          type: number
          example: 0
        confirmedRound:
          description: Round when the transaction was confirmed.
          type: number
          example: 16775567
        fee:
          description: Transaction fee
          type: number
          example: 0.001
        firstValid:
          description: First valid round for this transaction.
          type: number
          example: 16775565
        genesisHash:
          description: Hash of genesis block
          type: string
          example: SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=
        genesisId:
          description: genesis block ID.
          type: string
          example: testnet-v1.0
        id:
          description: transaction ID
          type: string
          example: HNIQ76UTJYPOLZP5FWODYABBJPYPGJNEM2QEJSMDMQRWEKHEYJHQ
        intraRoundOffset:
          description: Offset into the round where this transaction was confirmed.
          type: number
          example: 1
        lastValid:
          description: Last valid round for this transaction.
          type: number
          example: 16775571
        note:
          description: Free form data
          type: string
          example: cGluZ3Bvbmf0Jyl21QrtLw==
        paymentTransaction:
          description: payment Transaction
          type: object
        receiverRewards:
          description: rewards applied to receiver account.
          type: number
          example: 0
        roundTime:
          description: Time when the block this transaction is in was confirmed.
          type: number
          example: 1632167753
        sender:
          description: Sender's address
          type: string
          example: U6QEM4KM7KKGCLH4FELZBGJEVVSF556ELXHUOZC4ESPFS4O4V4VQXKQRXQ
        senderRewards:
          description: rewards applied to sender account.
          type: number
          example: 0
        signature:
          description: signature
          type: object
        txType:
          description: >-
            indicates what type of transaction this is. Different types have
            differnet fields.
          type: string
          example: pay
    AlgoTxsWithPagination:
      type: object
      properties:
        nextToken:
          description: >-
            Used for pagination, when making another request provide this token
            with the next parameter.
          type: string
          example: ywAAAAAAAAAAAAAA
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/AlgoTx'
    TransferAlgorandBlockchain:
      type: object
      properties:
        from:
          description: The blockchain address of the sender
          type: string
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
        to:
          description: The blockchain address of the recipient
          type: string
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
        amount:
          description: The amount to send in Algos
          type: string
          example: '1'
        note:
          description: The note for the recipient; must not contain spaces
          type: string
          example: Helloworld
        fromPrivateKey:
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
          type: string
          example: >-
            72TCV5BRQPBMSAFPYO3CPWVDBYWNGAYNMTW5QHENOMQF7I6QLNMJWCJZ7A3V5YKD7QD6ZZPEHG2PV2ZVVEDDO6BCRGXWIL3DIUMSUCI
      required:
        - from
        - to
        - amount
        - fromPrivateKey
    ReceiveAlgorandAsset:
      type: object
      properties:
        assetId:
          description: AssetID of the asset you wanna enable for the sender.
          type: number
          example: 116363571
        fromPrivateKey:
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
          type: string
          example: >-
            72TCV5BRQPBMSAFPYO3CPWVDBYWNGAYNMTW5QHENOMQF7I6QLNMJWCJZ7A3V5YKD7QD6ZZPEHG2PV2ZVVEDDO6BCRGXWIL3DIUMSUCI
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
      required:
        - assetId
        - fromPrivateKey
    ReceiveAlgorandAssetKMS:
      type: object
      properties:
        from:
          description: Blockchain sender address.
          type: string
          minLength: 58
          maxLength: 58
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
        assetId:
          description: AssetID of the asset you wanna enable for the sender.
          type: number
          example: 98745612
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
      required:
        - assetId
        - from
        - signatureId
    AlgoTransactionHashKMS:
      type: object
      properties:
        txId:
          description: TX hash of transaction.
          example: GTNOIDCIHZLESKNQPJXOXE476ODYDNNQBA3N2Q75MYQ4SI4XL5SA
          type: string
        assetIndex:
          description: >-
            If transaction created new ASA asset, this value is the index of the
            asset on the network.
          example: 87751984
          type: number
        confirmed:
          example: false
          type: boolean
          description: If transaction was not confirmed within 5 rounds, result is false.
          default: false
        failed:
          description: >-
            In case of the transaction was broadcast to the blockchain, but it
            was not possible to complete Tatum KMS signature, reponse is marked
            as failed and must be marked manually.
          example: false
          type: boolean
      required:
        - txId
    TransferAlgorandBlockchainKMS:
      type: object
      properties:
        from:
          description: The blockchain address of the sender
          type: string
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
        to:
          description: The blockchain address of the recipient
          type: string
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
        amount:
          description: The amount to send in Algos
          type: string
          example: '1'
        note:
          description: The note for the recipient; must not contain spaces
          type: string
          example: Helloworld
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
      required:
        - from
        - to
        - amount
        - signatureId
    MaticBalance:
      type: object
      properties:
        balance:
          type: string
          description: Balance in MATIC
          example: '10.52'
    GeneratedAddressMatic:
      type: object
      properties:
        address:
          type: string
          description: Polygon address
          example: '0xa7673161CbfE0116A4De9E341f8465940c2211d4'
    PolygonBlock:
      type: object
      properties:
        difficulty:
          description: Difficulty for this block.
          type: string
          example: '3296820833'
        extraData:
          description: The 'extra data' field of this block.
          type: string
          example: 0x
        gasLimit:
          description: The maximum gas allowed in this block.
          type: number
          example: 8000000
        gasUsed:
          description: The total used gas by all transactions in this block.
          type: number
          example: 7985124
        hash:
          description: Hash of the block. 'null' when its pending block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        logsBloom:
          description: >-
            The bloom filter for the logs of the block. 'null' when its pending
            block.
          type: string
          example: >-
            0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000
        miner:
          description: >-
            The address of the beneficiary to whom the mining rewards were
            given.
          type: string
          example: '0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B'
        mixHash:
          description: ''
          type: string
          example: '0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6'
        nonce:
          description: Hash of the generated proof-of-work. 'null' when its pending block.
          type: string
          example: '0xfa1692f52a7ac672'
        number:
          description: The block number. 'null' when its pending block.
          type: number
          example: 6470657
        parentHash:
          description: Hash of the parent block.
          type: string
          example: '0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15'
        receiptsRoot:
          description: ''
          type: string
          example: '0x4a496b6b7f2a1c5850bf9eebbea7193807be0067b1c06f17b9dde4eef7b2f960'
        sha3Uncles:
          description: SHA3 of the uncles data in the block.
          type: string
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        size:
          description: The size of this block in bytes.
          type: number
          example: 15296
        stateRoot:
          description: The root of the final state trie of the block.
          type: string
          example: '0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba'
        timestamp:
          description: The unix timestamp for when the block was collated.
          type: number
          example: 1569600592
        totalDifficulty:
          description: Total difficulty of the chain until this block.
          type: string
          example: '23329673338013873'
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/PolygonTx'
        transactionsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: '0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704'
        baseFeePerGas:
          description: >-
            Represents the current per-unit gas price, set by the Ethereum
            protocol, to be burned for transaction processing.
          type: number
          example: 78890946115
    PolygonTx:
      type: object
      properties:
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: '0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137'
        status:
          type: boolean
          example: true
          description: >-
            TRUE if the transaction was successful, FALSE, if the EVM reverted
            the transaction.
        blockNumber:
          type:
            - number
            - 'null'
          description: >-
            The number of the block that the transaction is included in; if not
            returned, the transaction has not been included in a block yet.
          example: 6470854
        from:
          type: string
          description: Address of the sender.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        gasPrice:
          type: string
          description: Gas price provided by the sender in wei.
          example: '1000000000'
        transactionHash:
          type: string
          description: Hash of the transaction.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
        input:
          type: string
          description: The data sent along with the transaction.
          example: 0x
        nonce:
          type: number
          description: The number of transactions made by the sender prior to this one.
          example: 26836405
        to:
          type: string
          description: >-
            Address of the receiver. 'null' when its a contract creation
            transaction.
          example: '0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d'
        transactionIndex:
          type:
            - number
            - 'null'
          description: >-
            The integer of the transactions index position in the block; if not
            returned, the transaction has not been included in a block yet.
          example: 3
        value:
          type: string
          description: Value transferred in wei.
          example: '1000000000000000000'
        gasUsed:
          type:
            - number
            - 'null'
          description: >-
            The amount of gas used by this specific transaction alone; if not
            returned, the transaction has not been included in a block yet.
          example: 21000
        cumulativeGasUsed:
          type:
            - number
            - 'null'
          description: >-
            The total amount of gas used when this transaction was executed in
            the block; if not returned, the transaction has not been included in
            a block yet.
          example: 314159
        contractAddress:
          type: string
          description: >-
            The contract address created, if the transaction was a contract
            creation, otherwise null.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        logs:
          type: array
          description: Log events, that happened in this transaction.
          items:
            $ref: '#/components/schemas/PolygonTxLog'
    PolygonTxLog:
      type: object
      properties:
        address:
          type: string
          description: From which this event originated from.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        topics:
          type: array
          description: >-
            An array with max 4 32 Byte topics, topic 1-3 contains indexed
            parameters of the log.
          items:
            type: string
            example: '0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234'
        data:
          type: string
          description: The data containing non-indexed log parameter.
        logIndex:
          type: number
          description: Integer of the event index position in the block.
        blockNumber:
          type: number
          description: Block number where this transaction was in.
          example: 6470854
        blockHash:
          description: Hash of the block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        transactionIndex:
          type: number
          description: >-
            Integer of the transaction’s index position, the event was created
            in.
        transactionHash:
          type: string
          description: Hash of the transaction this event was created in.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
    Error403PolygonBroadcast:
      properties:
        errorCode:
          description: polygon.broadcast.failed
          example: polygon.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonBep20NotFound:
      properties:
        errorCode:
          description: erc20.token.notFound
          example: erc20.token.notFound
          type: string
        message:
          description: No such ERC20 currency ${name}.
          example: No such ERC20 currency ${name}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonBep20Set:
      properties:
        errorCode:
          description: erc20.address.set
          example: erc20.address.set
          type: string
        message:
          description: ERC20 address was already set.
          example: ERC20 address was already set.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonMnemonicPrivateKey:
      properties:
        errorCode:
          description: private.mnemonic.missing
          example: private.mnemonic.missing
          type: string
        message:
          description: Either mnemonic and index or private key must be present.
          example: Either mnemonic and index or private key must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonBep20Unsupported:
      properties:
        errorCode:
          description: polygon.bep20.unsupported
          example: polygon.bep20.unsupported
          type: string
        message:
          description: Unsupported ETH ERC20 blockchain.
          example: Unsupported ETH ERC20 blockchain.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonTxHash:
      properties:
        errorCode:
          description: polygon.transaction.hash
          example: polygon.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonTxSign:
      properties:
        errorCode:
          description: polygon.transaction.sign
          example: polygon.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonErc20TxSign:
      properties:
        errorCode:
          description: polygon.bep20.sign
          example: polygon.bep20.sign
          type: string
        message:
          description: Unable to sign transaction for contract creation. ${error}
          example: Unable to sign transaction for contract creation. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonGasCalculation:
      properties:
        errorCode:
          description: polygon.transaction.gas
          example: polygon.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonTxBody:
      properties:
        errorCode:
          description: polygon.transaction.body
          example: polygon.transaction.body
          type: string
        message:
          description: Either currency, or tokenAddress must be defined.
          example: Either currency, or tokenAddress must be defined.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonScBody:
      properties:
        errorCode:
          description: polygon.sc.invalid
          example: polygon.sc.invalid
          type: string
        message:
          description: Invalid parameters for smart contract invocation.
          example: Invalid parameters for smart contract invocation.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403PolygonGasPrice:
      properties:
        errorCode:
          description: gas.price.failed
          example: gas.price.failed
          type: string
        message:
          description: Unable to obtain current GAS price.
          example: Unable to obtain current GAS price.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    TransferBep20Blockchain:
      type: object
      properties:
        to:
          maxLength: 50
          minLength: 1
          description: Blockchain address to send HRM20 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount to be sent.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of HRM20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        digits:
          description: Number of decimal points that HRM20 token has.
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to ONE transaction. If not present, last known nonce
            will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - contractAddress
        - digits
        - fromPrivateKey
        - amount
    TransferBep20BlockchainKMS:
      type: object
      properties:
        to:
          maxLength: 50
          minLength: 1
          description: Blockchain address to send HRM20 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount to be sent.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of HRM20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        digits:
          description: Number of decimal points that HRM20 token has.
          example: 18
          maximum: 30
          minimum: 1
          type: number
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to ONE transaction. If not present, last known nonce
            will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - contractAddress
        - signatureId
        - digits
        - amount
    CallPolygonSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0xC9c8ba8C7e2EAF43e84330Db08915A8106d7bD74'
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Polygon transaction. If not present, last known
            nonce will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
    CallPolygonSmartContractMethodCaller:
      type: object
      properties:
        caller:
          maxLength: 42
          minLength: 42
          description: >-
            The address of the account, which will be sender and fee payer of
            this transaction
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0xC9c8ba8C7e2EAF43e84330Db08915A8106d7bD74'
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
        - caller
    CallPolygonSmartContractReadMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0xC9c8ba8C7e2EAF43e84330Db08915A8106d7bD74'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
      required:
        - contractAddress
        - params
        - methodABI
        - methodName
    CallPolygonSmartContractMethodKMS:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0xC9c8ba8C7e2EAF43e84330Db08915A8106d7bD74'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Polygon transaction. If not present, last known
            nonce will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - signatureId
        - methodName
    TransferPolygonBlockchain:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Polygon transaction. If not present, last known
            nonce will be used.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: >-
            Currency to transfer from Polygon Blockchain Account. ERC20 tokens
            like USDC_MATIC, USDT_MATIC, GAMEE, INTENT, EURTENT, GOLDAX are
            available only for mainnet use.
          enum:
            - MATIC
            - USDC_MATIC
            - USDT_MATIC
            - GAMEE
            - INTENT
            - EURTENT
            - GOLDAX
          example: MATIC
          type: string
        fee:
          $ref: '#/components/schemas/CustomFee'
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
      required:
        - to
        - amount
        - currency
        - fromPrivateKey
    PolygonEstimateGas:
      type: object
      properties:
        from:
          type: string
          maxLength: 42
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          minLength: 42
          description: Sender address.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in MATIC.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
          pattern: ^(0x|0h)?[0-9A-F]+$
      required:
        - to
        - amount
        - from
    TransferPolygonBlockchainKMS:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Polygon transaction. If not present, last known
            nonce will be used.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: >-
            Currency to transfer from Polygon Blockchain Account. ERC20 tokens
            like USDC_MATIC, USDT_MATIC, GAMEE, INTENT, EURTENT, GOLDAX are
            available only for mainnet use.
          enum:
            - MATIC
            - USDC_MATIC
            - USDT_MATIC
            - GAMEE
            - INTENT
            - EURTENT
            - GOLDAX
          example: MATIC
          type: string
        fee:
          $ref: '#/components/schemas/CustomFee'
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
      required:
        - to
        - amount
        - currency
        - signatureId
    DeployBep20:
      type: object
      properties:
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Kcs blockchain, where all created ERC20 tokens will be
            transferred.
          maxLength: 42
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        fromPrivateKey:
          description: >-
            Private key of Kcs account address, from which the fee for the
            deployment of ERC20 will be paid. Private key, or signature Id must
            be present.
          type: string
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          maxLength: 66
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Kcs transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - name
        - symbol
        - address
        - supply
        - fromPrivateKey
        - digits
    DeployBep20KMS:
      type: object
      properties:
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Kcs blockchain, where all created ERC20 tokens will be
            transferred.
          maxLength: 42
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Kcs transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - name
        - symbol
        - address
        - supply
        - signatureId
        - digits
    KlaytnBlock:
      type: object
      properties:
        difficulty:
          description: Difficulty for this block.
          type: string
          example: '3296820833'
        extraData:
          description: The 'extra data' field of this block.
          type: string
          example: 0x
        gasLimit:
          description: The maximum gas allowed in this block.
          type: number
          example: 8000000
        gasUsed:
          description: The total used gas by all transactions in this block.
          type: number
          example: 7985124
        hash:
          description: Hash of the block. 'null' when its pending block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        logsBloom:
          description: >-
            The bloom filter for the logs of the block. 'null' when its pending
            block.
          type: string
          example: >-
            0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000
        miner:
          description: >-
            The address of the beneficiary to whom the mining rewards were
            given.
          type: string
          example: '0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B'
        mixHash:
          description: ''
          type: string
          example: '0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6'
        nonce:
          description: Hash of the generated proof-of-work. 'null' when its pending block.
          type: string
          example: '0xfa1692f52a7ac672'
        number:
          description: The block number. 'null' when its pending block.
          type: number
          example: 6470657
        parentHash:
          description: Hash of the parent block.
          type: string
          example: '0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15'
        receiptsRoot:
          description: ''
          type: string
          example: '0x4a496b6b7f2a1c5850bf9eebbea7193807be0067b1c06f17b9dde4eef7b2f960'
        sha3Uncles:
          description: SHA3 of the uncles data in the block.
          type: string
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        size:
          description: The size of this block in bytes.
          type: number
          example: 15296
        stateRoot:
          description: The root of the final state trie of the block.
          type: string
          example: '0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba'
        timestamp:
          description: The unix timestamp for when the block was collated.
          type: number
          example: 1569600592
        totalDifficulty:
          description: Total difficulty of the chain until this block.
          type: string
          example: '23329673338013873'
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/KlaytnTx'
        transactionsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: '0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704'
    KlaytnTx:
      type: object
      properties:
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: '0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137'
        type:
          description: Type of Klaytn Transaction
          type: string
          example: TxTypeLegacyTransaction
        typeInt:
          description: Type of Klaytn Transaction
          type: number
          example: 0
        status:
          type: boolean
          example: true
          description: >-
            TRUE if the transaction was successful, FALSE, if the EVM reverted
            the transaction.
        blockNumber:
          type: number
          description: Block number where this transaction was in.
          example: 6470854
        from:
          type: string
          description: Address of the sender.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        gasPrice:
          type: string
          description: Gas price provided by the sender in peb.
          example: '1000000000'
        transactionHash:
          type: string
          description: Hash of the transaction.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
        input:
          type: string
          description: The data sent along with the transaction.
          example: 0x
        nonce:
          type: number
          description: The number of transactions made by the sender prior to this one.
          example: 26836405
        to:
          type: string
          description: >-
            Address of the receiver. 'null' when its a contract creation
            transaction.
          example: '0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d'
        transactionIndex:
          type: number
          description: Integer of the transactions index position in the block.
          example: 3
        value:
          type: string
          description: Value transferred in peb.
          example: '1000000000000000000'
        gasUsed:
          type: number
          description: The amount of gas used by this specific transaction alone.
          example: 21000
        cumulativeGasUsed:
          type: number
          description: >-
            The total amount of gas used when this transaction was executed in
            the block.
          example: 314159
        contractAddress:
          type: string
          description: >-
            The contract address created, if the transaction was a contract
            creation, otherwise null.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        logs:
          type: array
          description: Log events, that happened in this transaction.
          items:
            type: object
            properties:
              address:
                type: string
                description: From which this event originated from.
                example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
              topics:
                type: array
                description: >-
                  An array with max 4 32 Byte topics, topic 1-3 contains indexed
                  parameters of the log.
                items:
                  type: string
                  example: >-
                    0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234
              data:
                type: string
                description: The data containing non-indexed log parameter.
              logIndex:
                type: number
                description: Integer of the event index position in the block.
              blockNumber:
                type: number
                description: Block number where this transaction was in.
                example: 6470854
              blockHash:
                description: Hash of the block.
                type: string
                example: >-
                  0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc
              transactionIndex:
                type: number
                description: >-
                  Integer of the transaction’s index position, the event was
                  created in.
              transactionHash:
                type: string
                description: Hash of the transaction this event was created in.
                example: >-
                  0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7
    Error403KlaytnBroadcast:
      properties:
        errorCode:
          description: klaytn.broadcast.failed
          example: klaytn.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnKlay20NotFound:
      properties:
        errorCode:
          description: erc20.token.notFound
          example: erc20.token.notFound
          type: string
        message:
          description: No such ERC20 currency ${name}.
          example: No such ERC20 currency ${name}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnKlay20Set:
      properties:
        errorCode:
          description: erc20.address.set
          example: erc20.address.set
          type: string
        message:
          description: ERC20 address was already set.
          example: ERC20 address was already set.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnMnemonicPrivateKey:
      properties:
        errorCode:
          description: private.mnemonic.missing
          example: private.mnemonic.missing
          type: string
        message:
          description: Either mnemonic and index or private key must be present.
          example: Either mnemonic and index or private key must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnKlay20Unsupported:
      properties:
        errorCode:
          description: klaytn.bep20.unsupported
          example: klaytn.bep20.unsupported
          type: string
        message:
          description: Unsupported ETH ERC20 blockchain.
          example: Unsupported ETH ERC20 blockchain.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnTxHash:
      properties:
        errorCode:
          description: klaytn.transaction.hash
          example: klaytn.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnTxSign:
      properties:
        errorCode:
          description: klaytn.transaction.sign
          example: klaytn.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnErc20TxSign:
      properties:
        errorCode:
          description: klaytn.bep20.sign
          example: klaytn.bep20.sign
          type: string
        message:
          description: Unable to sign transaction for contract creation. ${error}
          example: Unable to sign transaction for contract creation. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnGasCalculation:
      properties:
        errorCode:
          description: klaytn.transaction.gas
          example: klaytn.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnTxBody:
      properties:
        errorCode:
          description: klaytn.transaction.body
          example: klaytn.transaction.body
          type: string
        message:
          description: Either currency, or tokenAddress must be defined.
          example: Either currency, or tokenAddress must be defined.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnScBody:
      properties:
        errorCode:
          description: klaytn.sc.invalid
          example: klaytn.sc.invalid
          type: string
        message:
          description: Invalid parameters for smart contract invocation.
          example: Invalid parameters for smart contract invocation.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KlaytnGasPrice:
      properties:
        errorCode:
          description: gas.price.failed
          example: gas.price.failed
          type: string
        message:
          description: Unable to obtain current GAS price.
          example: Unable to obtain current GAS price.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    TransferKlay20Blockchain:
      type: object
      properties:
        to:
          maxLength: 50
          minLength: 1
          description: Blockchain address to send ERC20 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount to be sent.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        digits:
          description: Number of decimal points that ERC20 token has.
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Klaytn transaction. If not present, last known
            nonce will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gpeb.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - contractAddress
        - digits
        - fromPrivateKey
        - amount
    CallKlaytnSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Klaytn transaction. If not present, last known
            nonce will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gpeb.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
    CallKlaytnSmartContractReadMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
      required:
        - contractAddress
        - params
        - methodABI
        - methodName
    CallKlaytnSmartContractMethodKMS:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Klaytn transaction. If not present, last known
            nonce will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gpeb.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - contractAddress
        - params
        - methodABI
        - signatureId
        - methodName
    TransferKlaytnBlockchain:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Klaytn transaction. If not present, last known
            nonce will be used.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: Currency to transfer from Klaytn Blockchain Account.
          enum:
            - KLAY
          example: KLAY
          type: string
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              example: '40000'
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price in Gpeb.
              example: '20'
              pattern: ^[+]?\d+$
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
      required:
        - to
        - amount
        - currency
        - fromPrivateKey
    KlaytnEstimateGas:
      type: object
      properties:
        from:
          type: string
          maxLength: 42
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          minLength: 42
          description: Sender address.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in KLAY.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
          pattern: ^(0x|0h)?[0-9A-F]+$
      required:
        - to
        - amount
        - from
    TransferKlaytnBlockchainKMS:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Klaytn transaction. If not present, last known
            nonce will be used.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: Currency to transfer from Klaytn Blockchain Account.
          enum:
            - KLAY
          example: KLAY
          type: string
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              example: '40000'
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price in Gpeb.
              example: '20'
              pattern: ^[+]?\d+$
        amount:
          description: Amount to be sent in Ether.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
      required:
        - to
        - amount
        - currency
        - signatureId
    SolBalance:
      type: object
      properties:
        balance:
          type: string
          description: Balance in SOL
          example: '10.52'
    SolanaWallet:
      type: object
      properties:
        mnemonic:
          description: Generated mnemonic for wallet.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        address:
          description: Generated account address.
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        privateKey:
          description: Generated private key for account.
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          type: string
    SolanaBlockReward:
      type: object
      properties:
        commission:
          type: string
          format: nullable
        lamports:
          type: number
          example: 7
        postBalance:
          type: number
          example: 10149491708073344
        pubkey:
          type: string
          example: ETSKPSzESbVdmtUn67LA2p9J1gPCSEgYvmJS9pNNWQqR
        rewardType:
          type: string
          example: Rent
    TokenBalance:
      type: object
      properties:
        accountIndex:
          description: Index of the account in which the token balance is provided for.
          type: number
          example: 1
        mint:
          description: Pubkey of the token's mint.
          type: string
          example: So11111111111111111111111111111111111111112
        owner:
          description: Pubkey of token balance's owner.
          type: string
          example: BYM81n8HvTJuqZU1PmTVcwZ9G8uoji7FKM6EaPkwphPt
        programId:
          description: Pubkey of the Token program that owns the account.
          type: string
          example: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
        uiTokenAmount:
          $ref: '#/components/schemas/UiTokenAmount'
    UiTokenAmount:
      type: object
      properties:
        amount:
          description: Raw amount of tokens as a string, ignoring decimals.
          type: string
          example: 2653579503
        decimals:
          description: Number of decimals configured for token's mint.
          type: number
          example: 9
        uiAmount:
          description: Token amount as a float, accounting for decimals.
          type:
            - number
            - 'null'
          example: 2.653579503
        uiAmountString:
          description: Token amount as a string, accounting for decimals.
          type: string
          example: 2.653579503
    SolanaTxMeta:
      type: object
      properties:
        err:
          type: object
        fee:
          type: number
          example: 5000
        innerInstructions:
          type: array
          items:
            type: object
        logMessages:
          type: array
          items:
            type: string
            example: Program Vote111111111111111111111111111111111111111 invoke [1]
        postBalances:
          type: array
          items:
            type: number
            example: 1101768559544744
        postTokenBalances:
          type: array
          items:
            $ref: '#/components/schemas/TokenBalance'
        preBalances:
          type: array
          items:
            type: number
            example: 1101768559549744
        preTokenBalances:
          type: array
          items:
            $ref: '#/components/schemas/TokenBalance'
        rewards:
          type: array
          items:
            type: object
        status:
          type: object
          properties:
            Ok:
              type: string
              format: nullable
    SolanaTxMessageHeader:
      type: object
      properties:
        numReadonlySignedAccounts:
          type: number
          example: 0
        numReadonlyUnsignedAccounts:
          type: number
          example: 3
        numRequiredSignatures:
          type: number
          example: 1
    SolanaTxMessageInstruction:
      type: object
      properties:
        accounts:
          type: array
          items:
            type: number
            example: 1
        data:
          type: string
          example: >-
            2ZjTR1vUs2pHXyTM4rXnJowxekwfBcBJwsE4EameG3Sapvgfit27vrBd8k8QYCoTtMgfHEJLDqWEWBYUYVd
        programIdIndex:
          type: number
          example: 4
    SolanaTxMessage:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/SolanaTxMessageHeader'
        accountKeys:
          type: array
          items:
            type: string
            example: 0974de54f77afa9ad3d474909f6ce095b9623a359a5d08cc807b8a92dd5e1f96
        recentBlockhash:
          type: string
          example: C3vsoVwVWx7yPRhsNoKpcm2CJTrnVcvimdC4bd3jTPbj
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/SolanaTxMessageInstruction'
        indexToProgramIds:
          type: object
    SolanaTxTransaction:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/SolanaTxMessage'
        signatures:
          type: array
          items:
            type: string
            example: >-
              5FPSzkTsjZDBigU3ZagvkcwSPimt4K6voqrN9uUNVzWDBeRXWVH3uMarDPpSfrS7sFQeyKyDd5KpbdCrL3EWEP59
    SolanaBlockTx:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/SolanaTxMeta'
        transaction:
          $ref: '#/components/schemas/SolanaTxTransaction'
    SolanaTx:
      type: object
      properties:
        blockTime:
          type: number
          example: 1638279975
        meta:
          $ref: '#/components/schemas/SolanaTxMeta'
        transaction:
          $ref: '#/components/schemas/SolanaTxTransaction'
        slot:
          type: number
          example: 97744333
    SolanaBlock:
      type: object
      properties:
        blockHeight:
          type: number
          example: 94778421
        blockTime:
          type: number
          example: 1638279333
        blockhash:
          type: string
          example: Ch7qVhCkSqEvhWE8xzJZbJKRcsH6wtTjfiMJdt9eKiD7
        parentSlot:
          type: number
          example: 97742681
        previousBlockhash:
          type: string
          example: C3vsoVwVWx7yPRhsNoKpcm2CJTrnVcvimdC4bd3jTPbj
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/SolanaBlockReward'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/SolanaBlockTx'
    Error403SolanaBroadcast:
      properties:
        errorCode:
          description: solana.broadcast.failed
          example: Solana.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaBroadcastConfirm:
      properties:
        errorCode:
          description: solana.broadcast.confirm.failed
          example: Solana.broadcast.confirm.failed
          type: string
        message:
          description: 'Unexpected error occurred. Reason: ${error}.'
          example: 'Unexpected error occurred. Reason: ${error}.'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaBep20NotFound:
      properties:
        errorCode:
          description: erc20.token.notFound
          example: erc20.token.notFound
          type: string
        message:
          description: No such ERC20 currency ${name}.
          example: No such ERC20 currency ${name}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaTxHash:
      properties:
        errorCode:
          description: solana.transaction.hash
          example: solana.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaTxSign:
      properties:
        errorCode:
          description: solana.transaction.sign
          example: solana.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403SolanaTxBody:
      properties:
        errorCode:
          description: solana.transaction.body
          example: Solana.transaction.body
          type: string
        message:
          description: Either currency, or tokenAddress must be defined.
          example: Either currency, or tokenAddress must be defined.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    TransferSolanaBlockchain:
      type: object
      properties:
        from:
          description: Blockchain address to send assets from
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        to:
          description: Blockchain address to send assets to
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        amount:
          description: Amount to be sent in SOL.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            zgsAKfjuXrAxEyuYRxbbxPM3rdsPbJPnGreaGMbcdUApJ6wHnCqQnf9b1RNPdeZxsRMkezh4VgXQ7YrbpndGtEv
          minLength: 87
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feePayer:
          description: >-
            Address on the Solana blockchain, from which the fee will be paid
            for transaction. Defaults to from.
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        feePayerPrivateKey:
          type: string
          maxLength: 87
          example: >-
            YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf
          minLength: 128
          description: Private key of the fee payer address.
      required:
        - to
        - amount
        - from
        - fromPrivateKey
    TransferSolanaBlockchainKMS:
      type: object
      properties:
        from:
          description: Blockchain address to send assets from
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        to:
          description: Blockchain address to send assets to
          example: FZAS4mtPvswgVxbpc117SqfNgCDLTCtk5CoeAtt58FWU
          maxLength: 44
          minLength: 32
          type: string
        amount:
          description: Amount to be sent in SOL.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        feePayer:
          description: Blockchain address to pay the fee for the transaction from
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        feePayerSignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key used for paying the gas costs in
            signing application. Defaults to the signatureId.
      required:
        - to
        - amount
        - from
        - signatureId
    SolanaBroadcastConfirmOptions:
      description: Options for sending and waiting for a transaction
      type: object
      properties:
        commitment:
          type: string
          description: Commitment to waiting for transaction confirmation
          example: confirmed
          enum:
            - confirmed
            - finalized
        preflightCommitment:
          type: string
          description: Preflight Commitment.
          example: finalized
          enum:
            - confirmed
            - finalized
            - processed
            - recent
            - single
            - singleGossip
            - max
    SolanaBroadcastConfirm:
      properties:
        txData:
          description: Raw signed transaction to be published to network.
          example: >-
            01de391b34567fc65080dfe9e27170e2f9ac1cd1719878719feb74bb422d1795201df71fcf7349f5
          maxLength: 500000
          minLength: 1
          type: string
        options:
          $ref: '#/components/schemas/SolanaBroadcastConfirmOptions'
      required:
        - txData
      type: object
    SolanaTransactionHashWithConfirm:
      type: object
      properties:
        txId:
          description: TX hash of successful transaction.
          example: >-
            5Sh63rNFg6iR9YUGPwEkbAg4kYSWnf5eRS2wcLG1Gc6psj27SGK3LNuN9jNSPKn3JoChgmq8pSirHWsPPWzy2PFw
          type: string
        confirmed:
          description: >-
            Indicates whether or not the transferred commitment has been
            fulfilled
          example: false
          type: boolean
      required:
        - txId
        - confirmed
    Error403Celo:
      properties:
        errorCode:
          description: celo.error
          example: celo.error
          type: string
        message:
          description: 'Unexpected error occurred. Reason: ${reason}'
          example: 'Unexpected error occurred. Reason: ${reason}'
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    TransferErc721Celo:
      type: object
      properties:
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC721 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example: '100000'
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - contractAddress
        - tokenId
        - fromPrivateKey
    TransferErc721KMSCelo:
      type: object
      properties:
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC721 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example: '100000'
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - contractAddress
        - feeCurrency
        - signatureId
        - tokenId
    MintErc721Celo:
      type: object
      properties:
        tokenId:
          description: ID of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC721 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        url:
          description: >-
            Metadata of the token. See
            https://eips.ethereum.org/EIPS/eip-721#specification for more
            details.
          example: https://my_token_data.com
          type: string
          maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - url
        - feeCurrency
        - contractAddress
        - fromPrivateKey
        - tokenId
    MintErc721KMSCelo:
      type: object
      properties:
        tokenId:
          description: ID of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC721 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        url:
          description: >-
            Metadata of the token. See
            https://eips.ethereum.org/EIPS/eip-721#specification for more
            details.
          example: https://my_token_data.com
          type: string
          maxLength: 256
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - url
        - feeCurrency
        - contractAddress
        - signatureId
        - tokenId
    MintErc20Celo:
      type: object
      properties:
        amount:
          description: Amount to be minted and transfered to the recipient.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC-20 tokens to.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC-20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - amount
        - feeCurrency
        - contractAddress
        - fromPrivateKey
    MintErc20KMSCelo:
      type: object
      properties:
        amount:
          description: Amount to be minted and transfered to the recipient.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC-20 tokens to.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC-20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - amount
        - feeCurrency
        - contractAddress
        - signatureId
    MintMultipleErc721Celo:
      type: object
      properties:
        to:
          type: array
          description: Blockchain address to send ERC721 token to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '100000'
          items:
            type: string
            maxLength: 32
        url:
          description: >-
            Metadata of the token. See
            https://eips.ethereum.org/EIPS/eip-721#specification for more
            details.
          type: array
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - contractAddress
        - url
        - fromPrivateKey
        - feeCurrency
        - tokenId
    MintMultipleErc721KMSCelo:
      type: object
      properties:
        to:
          type: array
          description: Blockchain address to send ERC721 token to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '100000'
          items:
            type: string
            maxLength: 32
        url:
          description: >-
            Metadata of the token. See
            https://eips.ethereum.org/EIPS/eip-721#specification for more
            details.
          type: array
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - contractAddress
        - feeCurrency
        - tokenId
        - url
        - signatureId
    BurnErc721Celo:
      type: object
      properties:
        tokenId:
          description: ID of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - feeCurrency
        - fromPrivateKey
        - tokenId
    BurnErc721KMSCelo:
      type: object
      properties:
        tokenId:
          description: ID of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - feeCurrency
        - contractAddress
        - tokenId
        - signatureId
    BurnErc20Celo:
      type: object
      properties:
        amount:
          description: Amount of tokens to be destroyed.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - feeCurrency
        - fromPrivateKey
        - amount
    BurnErc20KMSCelo:
      type: object
      properties:
        amount:
          description: Amount of tokens to be destroyed.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC721 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - feeCurrency
        - contractAddress
        - tokenId
        - amount
    TransferCeloBlockchain:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        currency:
          type: string
          description: Currency of the transaction.
          enum:
            - CELO
            - CUSD
            - CEUR
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
      required:
        - to
        - amount
        - fromPrivateKey
        - currency
        - feeCurrency
    TransferCeloBlockchainKMS:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        currency:
          type: string
          description: Currency of the transaction.
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
      required:
        - to
        - feeCurrency
        - currency
        - amount
        - signatureId
    CeloEstimateGas:
      type: object
      properties:
        from:
          type: string
          maxLength: 42
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          minLength: 42
          description: Sender address.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
          pattern: ^(0x|0h)?[0-9A-F]+$
      required:
        - to
        - amount
        - from
    CeloBlock:
      type: object
      properties:
        difficulty:
          description: Difficulty for this block.
          type: string
          example: '3296820833'
        extraData:
          description: The 'extra data' field of this block.
          type: string
          example: 0x
        gasLimit:
          description: The maximum gas allowed in this block.
          type: number
          example: 8000000
        gasUsed:
          description: The total used gas by all transactions in this block.
          type: number
          example: 7985124
        hash:
          description: Hash of the block. 'null' when its pending block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        logsBloom:
          description: >-
            The bloom filter for the logs of the block. 'null' when its pending
            block.
          type: string
          example: >-
            0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000
        miner:
          description: >-
            The address of the beneficiary to whom the mining rewards were
            given.
          type: string
          example: '0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B'
        mixHash:
          description: ''
          type: string
          example: '0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6'
        nonce:
          description: Hash of the generated proof-of-work. 'null' when its pending block.
          type: string
          example: '0xfa1692f52a7ac672'
        number:
          description: The block number. 'null' when its pending block.
          type: number
          example: 6470657
        parentHash:
          description: Hash of the parent block.
          type: string
          example: '0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15'
        receiptsRoot:
          description: ''
          type: string
          example: '0x4a496b6b7f2a1c5850bf9eebbea7193807be0067b1c06f17b9dde4eef7b2f960'
        sha3Uncles:
          description: SHA3 of the uncles data in the block.
          type: string
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        size:
          description: The size of this block in bytes.
          type: number
          example: 15296
        stateRoot:
          description: The root of the final state trie of the block.
          type: string
          example: '0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba'
        timestamp:
          description: The unix timestamp for when the block was collated.
          type: number
          example: 1569600592
        totalDifficulty:
          description: Total difficulty of the chain until this block.
          type: string
          example: '23329673338013873'
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/CeloTx'
        transactionsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: '0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704'
    CeloTx:
      type: object
      properties:
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: '0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137'
        status:
          type: boolean
          example: true
          description: >-
            TRUE if the transaction was successful, FALSE, if the EVM reverted
            the transaction.
        blockNumber:
          type: number
          description: Block number where this transaction was in.
          example: 6470854
        from:
          type: string
          description: Address of the sender.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        gasPrice:
          type: string
          description: Gas price provided by the sender in wei.
          example: '1000000000'
        transactionHash:
          type: string
          description: Hash of the transaction.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
        input:
          type: string
          description: The data sent along with the transaction.
          example: 0x
        nonce:
          type: number
          description: The number of transactions made by the sender prior to this one.
          example: 26836405
        to:
          type: string
          description: >-
            Address of the receiver. 'null' when its a contract creation
            transaction.
          example: '0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d'
        transactionIndex:
          type: number
          description: Integer of the transactions index position in the block.
          example: 3
        value:
          type: string
          description: Value transferred in wei.
          example: '1000000000000000000'
        gasUsed:
          type: number
          description: The amount of gas used by this specific transaction alone.
          example: 21000
        cumulativeGasUsed:
          type: number
          description: >-
            The total amount of gas used when this transaction was executed in
            the block.
          example: 314159
        contractAddress:
          type: string
          description: >-
            The contract address created, if the transaction was a contract
            creation, otherwise null.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        logs:
          type: array
          description: Log events, that happened in this transaction.
          items:
            type: object
            properties:
              address:
                type: string
                description: From which this event originated from.
                example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
              topics:
                type: array
                description: >-
                  An array with max 4 32 Byte topics, topic 1-3 contains indexed
                  parameters of the log.
                items:
                  type: string
                  example: >-
                    0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234
              data:
                type: string
                description: The data containing non-indexed log parameter.
              logIndex:
                type: number
                description: Integer of the event index position in the block.
              transactionIndex:
                type: number
                description: >-
                  Integer of the transaction’s index position, the event was
                  created in.
              transactionHash:
                type: string
                description: Hash of the transaction this event was created in.
                example: >-
                  0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7
    DeployErc721Celo:
      type: object
      properties:
        name:
          description: Name of the ERC721 token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        symbol:
          description: Symbol of the ERC721 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        fromPrivateKey:
          description: >-
            Private key of Celo account address, from which gas for deployment
            of ERC721 will be paid. Private key, or signature Id must be
            present.
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - name
        - symbol
        - feeCurrency
        - fromPrivateKey
    DeployErc721CeloKMS:
      type: object
      properties:
        name:
          description: Name of the ERC721 token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        symbol:
          description: Symbol of the ERC721 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - name
        - symbol
        - feeCurrency
        - signatureId
    DeployErc20Celo:
      type: object
      properties:
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Celo blockchain, where all created ERC20 tokens will be
            transferred.
          maxLength: 42
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        fromPrivateKey:
          description: >-
            Private key of Celo account address, from which the fee for the
            deployment of ERC20 will be paid. Private key, or signature Id must
            be present.
          type: string
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          maxLength: 66
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - name
        - symbol
        - address
        - supply
        - fromPrivateKey
        - digits
        - feeCurrency
    DeployErc20KMSCelo:
      type: object
      properties:
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Celo blockchain, where all created ERC20 tokens will be
            transferred.
          maxLength: 42
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - name
        - symbol
        - address
        - supply
        - signatureId
        - digits
        - feeCurrency
    CallCeloSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
        - feeCurrency
    CallCeloReadSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
      required:
        - contractAddress
        - params
        - methodABI
        - methodName
    CallCeloSmartContractMethodKMS:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - signatureId
        - methodName
        - feeCurrency
    TransferErc20Celo:
      type: object
      properties:
        to:
          maxLength: 50
          minLength: 1
          description: Blockchain address to send ERC20 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount to be sent.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        digits:
          description: Number of decimal points that ERC20 token has.
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - contractAddress
        - digits
        - feeCurrency
        - fromPrivateKey
        - amount
    TransferErc20CeloKMS:
      type: object
      properties:
        to:
          maxLength: 50
          minLength: 1
          description: Blockchain address to send ERC20 token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount to be sent.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        digits:
          description: Number of decimal points that ERC20 token has.
          example: 18
          maximum: 30
          minimum: 1
          type: number
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - contractAddress
        - signatureId
        - digits
        - amount
        - feeCurrency
    Error403CeloGasCalculation:
      properties:
        errorCode:
          description: celo.transaction.gas
          example: celo.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403CeloTxBody:
      properties:
        errorCode:
          description: celo.transaction.body
          example: celo.transaction.body
          type: string
        message:
          description: Either currency, or tokenAddress must be defined.
          example: Either currency, or tokenAddress must be defined.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    EgldBlock:
      type: object
      properties:
        nonce:
          description: The block height.
          type: number
          example: 5440076
        round:
          description: The round number.
          type: number
          example: 186582
        hash:
          description: Hash of the block.
          type: string
          example: bd2de3618929b696807f6ef8a619f93d29d639aec9277f9c6f8569a8487141b1
        prevBlockHash:
          description: Hash of the previous block.
          type: string
          example: 2a11aad21e933be58200839ff875f0ca7e955b8c483a0e117cb92409e5d2a5da
        epoch:
          description: >-
            An epoch is a sequence of consecutive rounds during which the
            configuration of the network does not change (currently aprox. 24
            hrs in length).
          type: number
          example: 18
        numTxs:
          description: Number of transactions in current block.
          type: number
          example: 8
        shardBlocks:
          description: Array of shard blocks
          type: array
          items:
            $ref: '#/components/schemas/EgldShardBlock'
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/EgldTx'
    EgldShardBlock:
      type: object
      properties:
        hash:
          description: The block hash.
          type: string
          example: a6f2ac15a6b1bafdde9afff2297cef49c4c523c516f8ee12fed54be070e9512b
        nonce:
          description: The block height.
          type: number
          example: 5440070
        shard:
          description: The shard number.
          type: number
          example: 1
    EgldTx:
      type: object
      properties:
        type:
          type: string
          description: Type of transaction.
          example: null
        nonce:
          type: number
          description: Nonce of the transaction.
          example: 2
        round:
          type: number
          description: The round number.
          example: 186580
        epoch:
          type: number
          description: >-
            An epoch is a sequence of consecutive rounds during which the
            configuration of the network does not change (currently aprox. 24
            hrs in length).
          example: 12
        value:
          type: string
          description: Transferred value.
          example: '1000000000000000000'
        receiver:
          type: string
          description: Address of the receiver.
          example: erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq7
        sender:
          type: string
          description: Address of the sender.
          example: erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq1
        gasPrice:
          type: number
          description: Gas price provided by the sender
          example: 1000000000
        gasLimit:
          type: number
          description: Gas provided by the sender
          example: 70000
        data:
          type: string
          description: Data field in transaction.
          example: Zm9yIHRlc3Rz
        signature:
          type: string
          description: Signature of the transaction.
          example: >-
            c6ab10b401f14b122caf9d2ef80d532b986aa82b589dac77d77929da27ae2382c6ab10b401f14b122caf9d2ef80d532b986aa82b589dac77d77929da27ae238
        sourceShard:
          type: number
          description: Source shard.
          example: 2
        destinationShard:
          type: number
          description: Destination shard.
          example: 1
        blockNonce:
          type: number
          description: Nonce of block which contains current transaction.
          example: 186535
        blockHash:
          type: string
          description: Hash of block which contains current transaction.
          example: bd2de3618929b696807f6ef8a619f93d29d639aec9277f9c6f8569a8487141b1
        miniblockHash:
          type: string
          description: Miniblock hash.
          example: 7cb0a10cf9e9ec9ff719ffe99349db3feac3ec217b6de62f6cf7756647194bbf
        timestamp:
          type: number
          description: The unix timestamp for when the block was collated.
          example: 1569600592
        status:
          type: string
          description: Status of the transaction.
          example: Success
        hyperblockNonce:
          type: number
          description: Nonce of the hyperblockwhere this transaction was in.
          example: 123321
        hyperblockHash:
          type: string
          description: Hash of the hyperblock where this transaction was in.
          example: 715224f1f7d8330e3837500d1f82431954e30db6149f3ee4644d0950576d8dfe
    Error403EgldBroadcast:
      properties:
        errorCode:
          description: egld.broadcast.failed
          example: egld.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EgldTxHash:
      properties:
        errorCode:
          description: egld.transaction.hash
          example: egld.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403EgldTxSign:
      properties:
        errorCode:
          description: egld.transaction.sign
          example: egld.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    TransferEgldBlockchain:
      type: object
      properties:
        from:
          description: Account address of the sender
          example: erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq7
          maxLength: 62
          minLength: 62
          type: string
        to:
          description: Account address of the receiver or smart contract
          example: erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq6
          maxLength: 62
          minLength: 62
          type: string
        amount:
          type: string
          description: Value to be sent.
          example: '0'
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          properties:
            gasLimit:
              type: string
              description: >-
                Gas limit for transaction. If transfer to a smart contract, then
                500000 + an appropriate amount for the method call
              example: '500000'
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price.
              example: '1000000000'
              pattern: ^[+]?\d+$
        data:
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          type: string
          example: 4d79206e6f746520746f2074686520726563697069656e74
        fromPrivateKey:
          type: string
          maxLength: 64
          minLength: 64
          example: 0cd8e6217b4a218807b858ffb508483cdcdadbb7a21196727f764a510a692760
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
      required:
        - fromPrivateKey
        - from
        - to
        - amount
    TransferEgldBlockchainKMS:
      type: object
      properties:
        from:
          description: Account address of the sender
          example: erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq7
          maxLength: 62
          minLength: 62
          type: string
        to:
          description: Account address of the receiver or smart contract
          example: erd17k95m339aqzxzyvjjjfa3lka0yyeqgcsda50tw5z9g73ycfe2caq9e6jq6
          maxLength: 62
          minLength: 62
          type: string
        amount:
          type: string
          description: Value to be sent.
          example: '0'
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction.
              example: '500000'
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price.
              example: '1000000000'
              pattern: ^[+]?\d+$
        data:
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          type: string
          example: 4d79206e6f746520746f2074686520726563697069656e74
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
      required:
        - signatureId
        - from
        - to
        - amount
    TransferTronBlockchain:
      type: object
      properties:
        fromPrivateKey:
          type: string
          minLength: 64
          maxLength: 64
          description: Private key of the address, from which the TRX will be sent.
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
        to:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        amount:
          description: Amount to be sent in TRX.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - fromPrivateKey
        - to
        - amount
    TransferTronBlockchainKMS:
      type: object
      properties:
        from:
          type: string
          minLength: 34
          maxLength: 34
          description: Sender address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        signatureId:
          type: string
          minimum: 36
          maximum: 36
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        to:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        amount:
          description: Amount to be sent in TRX.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
      required:
        - from
        - signatureId
        - to
        - amount
    TransferTronTrc10Blockchain:
      type: object
      properties:
        fromPrivateKey:
          type: string
          minLength: 64
          maxLength: 64
          description: Private key of the address, from which the TRX will be sent.
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
        to:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        tokenId:
          type: string
          minLength: 1
          maxLength: 100
          description: ID of the token to transfer.
          example: '1000538'
        amount:
          description: Amount to be sent in TRX.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - fromPrivateKey
        - tokenId
        - to
        - amount
    TransferTronTrc10BlockchainKMS:
      type: object
      properties:
        from:
          type: string
          minLength: 34
          maxLength: 34
          description: Sender address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        signatureId:
          type: string
          minimum: 36
          maximum: 36
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        to:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        tokenId:
          type: string
          minLength: 1
          maxLength: 100
          description: ID of the token to transfer.
          example: '1000538'
        amount:
          description: Amount to be sent in TRX.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - from
        - signatureId
        - tokenId
        - to
        - amount
    TransferTronTrc20Blockchain:
      type: object
      properties:
        fromPrivateKey:
          type: string
          minLength: 64
          maxLength: 64
          description: Private key of the address, from which the TRX will be sent.
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
        to:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        tokenAddress:
          type: string
          minLength: 34
          maxLength: 34
          description: Address of the TRC20 token to transfer.
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
        amount:
          description: Amount to be sent in TRX.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - fromPrivateKey
        - tokenAddress
        - to
        - amount
        - feeLimit
    TransferTronTrc20BlockchainKMS:
      type: object
      properties:
        from:
          type: string
          minLength: 34
          maxLength: 34
          description: Sender address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        signatureId:
          type: string
          minimum: 36
          maximum: 36
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        to:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        tokenAddress:
          type: string
          minLength: 34
          maxLength: 34
          description: Address of the TRC20 token to transfer.
          example: TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW
        feeLimit:
          type: number
          minimum: 0
          description: Fee in TRX to be paid.
          example: 0.01
        amount:
          description: Amount to be sent in TRX.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - from
        - signatureId
        - tokenAddress
        - to
        - amount
        - feeLimit
    CreateTronTrc20Blockchain:
      type: object
      properties:
        fromPrivateKey:
          type: string
          minLength: 64
          maxLength: 64
          description: Private key of the address, from which the TRX will be sent.
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
        recipient:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of created TRC20 tokens.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the token.
          example: My token
        symbol:
          type: string
          minLength: 1
          maxLength: 100
          description: Symbol of the token.
          example: SYM
        totalSupply:
          type: number
          minimum: 0
          description: Total supply of the tokens.
          example: 100000
        decimals:
          type: number
          minimum: 0
          maximum: 30
          description: Number of decimal places of the token.
          example: 10
      required:
        - fromPrivateKey
        - name
        - recipient
        - symbol
        - totalSupply
        - decimals
    CreateTronTrc20BlockchainKMS:
      type: object
      properties:
        from:
          type: string
          minLength: 34
          maxLength: 34
          description: Sender address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        signatureId:
          type: string
          minimum: 36
          maximum: 36
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        recipient:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of created TRC20 tokens.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the token.
          example: My token
        symbol:
          type: string
          minLength: 1
          maxLength: 100
          description: Symbol of the token.
          example: SYM
        totalSupply:
          type: number
          minimum: 0
          description: Total supply of the tokens.
          example: 100000
        decimals:
          type: number
          minimum: 0
          maximum: 30
          description: Number of decimal places of the token.
          example: 10
      required:
        - from
        - signatureId
        - name
        - recipient
        - symbol
        - totalSupply
        - decimals
    CreateTronTrc10Blockchain:
      type: object
      properties:
        fromPrivateKey:
          type: string
          minLength: 64
          maxLength: 64
          description: Private key of the address, from which the TRX will be sent.
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
        recipient:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of created TRC 10 tokens.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the token.
          example: My token
        abbreviation:
          type: string
          minLength: 1
          maxLength: 100
          description: Abbreviation of the token.
          example: SYM
        description:
          type: string
          minLength: 1
          maxLength: 100
          description: Description of the token.
          example: My short description
        url:
          type: string
          minLength: 1
          maxLength: 100
          description: URL of the token.
          example: https://mytoken.com
        totalSupply:
          type: number
          minimum: 0
          description: Total supply of the tokens.
          example: 100000
        decimals:
          type: number
          minimum: 0
          maximum: 5
          description: Number of decimal places of the token.
          example: 10
      required:
        - fromPrivateKey
        - recipient
        - name
        - abbreviation
        - description
        - url
        - totalSupply
        - decimals
    CreateTronTrc10BlockchainKMS:
      type: object
      properties:
        from:
          type: string
          minLength: 34
          maxLength: 34
          description: Sender address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        signatureId:
          type: string
          minimum: 36
          maximum: 36
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        recipient:
          type: string
          minLength: 34
          maxLength: 34
          description: Recipient address of created TRC 10 tokens.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the token.
          example: My token
        abbreviation:
          type: string
          minLength: 1
          maxLength: 100
          description: Abbreviation of the token.
          example: SYM
        description:
          type: string
          minLength: 1
          maxLength: 100
          description: Description of the token.
          example: My short description
        url:
          type: string
          minLength: 1
          maxLength: 100
          description: URL of the token.
          example: https://mytoken.com
        totalSupply:
          type: number
          minimum: 0
          description: Total supply of the tokens.
          example: 100000
        decimals:
          type: number
          minimum: 0
          maximum: 5
          description: Number of decimal places of the token.
          example: 10
      required:
        - from
        - signatureId
        - recipient
        - name
        - abbreviation
        - description
        - url
        - totalSupply
        - decimals
    TronTrc10Detail:
      type: object
      properties:
        ownerAddress:
          type: string
          minLength: 34
          maxLength: 34
          description: The address of the TRC-10 token's owner in the hexadecimal format
          example: 41d2803f9c22aa429d71554c9427e97ffedcec17c7
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: The name of the TRC-10 token
          example: My token
        abbr:
          type: string
          minLength: 1
          maxLength: 100
          description: The abbreviated name of the TRC-10 token
          example: SYM
        description:
          type: string
          minLength: 1
          maxLength: 100
          description: The description of the TRC-10 token
          example: My short description
        url:
          type: string
          minLength: 1
          maxLength: 100
          description: The URL of the TRC-10 token
          example: https://mytoken.com
        totalSupply:
          type: number
          minimum: 0
          description: The total supply of tokens in the TRC-10 token
          example: 100000
        precision:
          type: number
          minimum: 0
          maximum: 5
          description: The number of decimal places
          example: 10
        id:
          type: number
          description: The ID of the TRC-10 token
          example: 1000540
    FreezeTron:
      type: object
      properties:
        fromPrivateKey:
          type: string
          minLength: 64
          maxLength: 64
          description: Private key of the address, from which the TRX will be sent.
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
        resource:
          type: string
          description: Resource to obtain, BANDWIDTH or ENERGY.
          example: ENERGY
          enum:
            - BANDWIDTH
            - ENERGY
        amount:
          description: Amount to be frozen in TRX.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - fromPrivateKey
        - resource
        - amount
    FreezeTronKMS:
      type: object
      properties:
        from:
          type: string
          minLength: 34
          maxLength: 34
          description: Sender address of TRON account in Base58 format.
          example: TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh
        signatureId:
          type: string
          minimum: 36
          maximum: 36
          format: uuid
          example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        resource:
          type: string
          description: Resource to obtain, BANDWIDTH or ENERGY.
          example: ENERGY
          enum:
            - BANDWIDTH
            - ENERGY
        amount:
          description: Amount to be frozen in TRX.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - from
        - signatureId
        - resource
        - amount
    Error403Tron:
      properties:
        errorCode:
          description: tron.failed
          example: tron.failed
          type: string
        message:
          description: Unable to communicate to blockchain. ${error}
          example: Unable to communicate to blockchain. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    TronWallet:
      type: object
      required:
        - mnemonic
        - xpub
      properties:
        mnemonic:
          description: Generated mnemonic for wallet.
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          type: string
        xpub:
          description: >-
            Generated Extended public key for wallet with derivation path
            according to BIP44. This key can be used to generate addresses.
          example: >-
            0244b3f40c6e570ae0032f6d7be87737a6c4e5314a4a1a82e22d0460a0d0cd794936c61f0c80dc74ace4cd04690d4eeb1aa6555883be006e1748306faa7ed3a26a
          type: string
    TronBlock:
      type: object
      properties:
        hash:
          type: string
          description: Block hash
          example: 000000000195a8cfe2ea4ca60ce921b30e95980a96c6bb1da4a35aa03da9c5a8
        blockNumber:
          type: number
          description: Block number.
          example: 26585295
        timestamp:
          type: number
          description: Time of the block in UTC millis.
          example: 1610134209000
        parentHash:
          type: string
          description: Hash of the parent block.
          example: 000000000195a8ce6003aa8b6443c52734b80aefdcd079bf40e7f165b046370e
        witnessAddress:
          type: string
          description: Witness address.
          example: 4118e2e1c6cdf4b74b7c1eb84682e503213a174955
        witnessSignature:
          type: string
          description: Witness signature.
          example: >-
            e20cb7a1f01d279ebe9c20baa0d747bea160042639ba0be63460cbb21ae63f072520e7766cb7aa1bd4e74bebbdea64be431ecf52c2aa2123ca0b1d7495bd581d00
        transactions:
          type: array
          description: Transactions that occurs in this block.
          items:
            $ref: '#/components/schemas/TronTx'
    TronBroadcast:
      type: object
      required:
        - txData
      properties:
        txData:
          type: string
          description: Raw signed transaction to be published to network.
          minLength: 1
          maxLength: 50000
          example: >-
            {"raw_data":
            "{\"contract\":[{\"parameter\":{\"value\":{\"amount\":1000,\"owner_address\":\"41608f8da72479edc7dd921e4c30bb7e7cddbe722e\",\"to_address\":\"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\"},\"type_url\":\"type.googleapis.com/protocol.TransferContract\"},\"type\":\"TransferContract\"}],\"ref_block_bytes\":\"5e4b\",\"ref_block_hash\":\"47c9dc89341b300d\",\"expiration\":1591089627000,\"timestamp\":1591089567635}","raw_data_hex":
            "0a025e4b220847c9dc89341b300d40f8fed3a2a72e5a66080112620a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412310a1541608f8da72479edc7dd921e4c30bb7e7cddbe722e121541e9d79cc47518930bc322d9bf7cddd260a0260a8d18e8077093afd0a2a72e"}
    TronTx:
      type: object
      required:
        - txID
        - signature
        - blockNumber
        - ret
        - rawData
      properties:
        ret:
          type: array
          description: Result of the smart contract invocation.
          items:
            properties:
              contractRet:
                type: string
                description: Returns the value of the smart contract invocation.
                example: SUCCESS
          required:
            - contractRet
        signature:
          type: array
          description: List of signatures of the transaction.
          items:
            type: string
            example: >-
              91fa5d81f9578970d21fdcde4ebb849674d437b62774f34e8d9e4cb50960c0031362cbcb649553b1f5f9daf19495ae46e517d4401172b5e53bb06bfe6896e2e300
        blockNumber:
          type: number
          description: The block in which the transaction was included.
          example: 11223344
        txID:
          type: string
          description: Transaction ID.
          example: 24dd2f121a24516f22df78adf1ccc32119e3edb7760297f76a925b879f2baa98
        netUsage:
          type: number
          description: Usage of the network.
          example: 0
        rawData:
          type: object
          description: Raw data of the transaction.
          required:
            - expiration
            - timestamp
            - contract
          properties:
            contract:
              type: array
              description: Smart contract invocations details.
              items:
                type: object
                properties:
                  parameter:
                    type: object
                    properties:
                      value:
                        type: object
                        properties:
                          data:
                            type: string
                            format: hex
                            description: The amount transferred within the transaction.
                            example: '0x000002e917e68b4e'
                          amount:
                            type: number
                            description: The amount transferred within the transaction.
                            example: 1000000
                          owner_address:
                            type: string
                            example: 418632237fd33f62c549ee044dd3da779aba947dcc
                            description: Address of the sender.
                          to_address:
                            type: string
                            description: Address of the recipient.
                            example: 41a614f803b6fd780986a42c78ec9c7f77e6ded13c
                          ownerAddressBase58:
                            type: string
                            example: TNCmcTdyrYKMtmE1KU2itzeCX76jGm5Not
                            description: Address of the sender in Base58 encoding.
                          toAddressBase58:
                            type: string
                            example: TRwS7apsNdRGzMBfhB2hVC4RhqfubUYZ8P
                            description: Address of the recipient in Base58 encoding.
                      type_url:
                        type: string
                        example: type.googleapis.com/protocol.TriggerSmartContract
                        description: Type of the smart contract event.
                  type:
                    example: TriggerSmartContract
                    type: string
                    description: Type of the Smart contract.
            ref_block_bytes:
              type: number
              description: The height of the transaction reference block.
              example: 4946
            ref_block_hash:
              type: number
              description: The hash of the transaction reference block.
              example: 6d0c1a0af5a52f17
            expiration:
              description: Expiration of the transaction.
              type: number
              example: 1610067216000
            timestamp:
              description: Time of the transaction.
              type: number
              example: 1609980816000
    TronInternalTx:
      type: object
      required:
        - internal_tx_id
        - tx_id
        - to_address
        - from_address
      properties:
        tx_id:
          type: string
          description: Transaction ID.
          example: 24dd2f121a24516f22df78adf1ccc32119e3edb7760297f76a925b879f2baa98
        internal_tx_id:
          type: string
          description: Internal TX ID.
          example: e1543ab5ac85e8fbf2397f30f19dc5b7a32abd508a57ff0c13642c9963d9f312
        to_address:
          type: string
          description: Recipient address.
          example: 41a614f803b6fd780986a42c78ec9c7f77e6ded13c
        from_address:
          type: string
          description: Sender address.
          example: 41a2726afbecbd8e936000ed684cef5e2f5cf43008
    TronTx20:
      type: object
      required:
        - txID
        - to
        - tokenInfo
        - type
        - value
        - from
      properties:
        txID:
          type: string
          description: Transaction ID.
          example: 24dd2f121a24516f22df78adf1ccc32119e3edb7760297f76a925b879f2baa98
        tokenInfo:
          type: object
          required:
            - symbol
            - decimals
            - address
            - name
          properties:
            symbol:
              type: string
              example: USDT
            address:
              type: string
              example: TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t
            decimals:
              type: number
              example: 6
            name:
              type: string
              example: Tether USD
        from:
          type: string
          example: TPn72oEg7WPaffgNBf62vGx8G1s4chx2fp
        to:
          type: string
          example: TJyhbP1bQfo8tLPxEVjaka9gh2qkN7MvD3
        type:
          type: string
          example: Transfer
        value:
          type: string
          example: '1800'
    TronAccount:
      type: object
      required:
        - address
        - freeNetUsage
        - balance
        - bandwidth
        - trc10
        - trc20
        - createTime
      properties:
        address:
          type: string
          description: Account address
          example: TGDqQAP5bduoPKVgdbk7fGyW4DwEt3RRn8
        balance:
          type: number
          description: Balance of the TRX, in SUN. SUN is 1/1000000 TRX.
          example: 2342342
        trc10:
          type: array
          items:
            type: object
            description: Balance of the TRC10 assets.
            properties:
              key:
                type: string
                description: Name of the TRC10 asset.
                example: TEST_TRC_10
              value:
                type: number
                description: Balance of the TRC10 asset.
                example: 123
            required:
              - key
              - value
        trc20:
          type: array
          items:
            type: object
            description: >-
              Balance of the TRC20 assets. It is structured as key value array,
              where key is the address of the TRC20 and value is the balance.
            example:
              TRkuKAxmWZ4G74MvZnFpoosQZsfvtNpmwH: '30958'
              TVKXY8DJ9aVTcg3wwVrRRs2FbTUwi4UZWR: '70000'
        createTime:
          type: number
          description: Date of creation of the account in UTC millis.
          example: 1602848895000
        assetIssuedId:
          type: string
          description: ID of the issued TRC10 token, if any.
          example: '1003475'
        assetIssuedName:
          type: number
          description: Balance of the issued TRC10 token, if any.
          example: 100
        freeNetUsage:
          type: number
          description: Free usage of the network.
          example: 1000
        freeNetLimit:
          type: number
          description: Free usage limit of the network.
          example: 1500
        netUsage:
          type: number
          description: Extra usage of the network.
          example: 5000
        netLimit:
          type: number
          description: Extra usage limit of the network.
          example: 5000
        bandwidth:
          type: number
          description: >-
            Remaining usage of the network, equal to freeNetLimit - freeNetUsed
            + netLimit - netUsed.
          example: 1500
    BscBalance:
      type: object
      properties:
        balance:
          type: string
          description: Balance in BNB
          example: '10.52'
    GeneratedAddressBsc:
      type: object
      properties:
        address:
          type: string
          description: BSC address
          example: '0xa7673161CbfE0116A4De9E341f8465940c2211d4'
    BscBlock:
      type: object
      properties:
        difficulty:
          description: Difficulty for this block.
          type: string
          example: '3296820833'
        extraData:
          description: The 'extra data' field of this block.
          type: string
          example: 0x
        gasLimit:
          description: The maximum gas allowed in this block.
          type: number
          example: 8000000
        gasUsed:
          description: The total used gas by all transactions in this block.
          type: number
          example: 7985124
        hash:
          description: Hash of the block. 'null' when its pending block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        logsBloom:
          description: >-
            The bloom filter for the logs of the block. 'null' when its pending
            block.
          type: string
          example: >-
            0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000
        miner:
          description: >-
            The address of the beneficiary to whom the mining rewards were
            given.
          type: string
          example: '0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B'
        mixHash:
          description: ''
          type: string
          example: '0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6'
        nonce:
          description: Hash of the generated proof-of-work. 'null' when its pending block.
          type: string
          example: '0xfa1692f52a7ac672'
        number:
          description: The block number. 'null' when its pending block.
          type: number
          example: 6470657
        parentHash:
          description: Hash of the parent block.
          type: string
          example: '0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15'
        receiptsRoot:
          description: ''
          type: string
          example: '0x4a496b6b7f2a1c5850bf9eebbea7193807be0067b1c06f17b9dde4eef7b2f960'
        sha3Uncles:
          description: SHA3 of the uncles data in the block.
          type: string
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        size:
          description: The size of this block in bytes.
          type: number
          example: 15296
        stateRoot:
          description: The root of the final state trie of the block.
          type: string
          example: '0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba'
        timestamp:
          description: The unix timestamp for when the block was collated.
          type: number
          example: 1569600592
        totalDifficulty:
          description: Total difficulty of the chain until this block.
          type: string
          example: '23329673338013873'
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/BscTx'
        transactionsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: '0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704'
    BscTx:
      type: object
      properties:
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: '0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137'
        status:
          type: boolean
          example: true
          description: >-
            TRUE if the transaction was successful, FALSE, if the EVM reverted
            the transaction.
        blockNumber:
          type:
            - number
            - 'null'
          description: >-
            The number of the block that the transaction is included in; if not
            returned, the transaction has not been included in a block yet.
          example: 6470854
        from:
          type: string
          description: Address of the sender.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        gasPrice:
          type: string
          description: Gas price provided by the sender in wei.
          example: '1000000000'
        transactionHash:
          type: string
          description: Hash of the transaction.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
        input:
          type: string
          description: The data sent along with the transaction.
          example: 0x
        nonce:
          type: number
          description: The number of transactions made by the sender prior to this one.
          example: 26836405
        to:
          type: string
          description: >-
            Address of the receiver. 'null' when its a contract creation
            transaction.
          example: '0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d'
        transactionIndex:
          type:
            - number
            - 'null'
          description: >-
            The integer of the transactions index position in the block; if not
            returned, the transaction has not been included in a block yet.
          example: 3
        value:
          type: string
          description: Value transferred in wei.
          example: '1000000000000000000'
        gasUsed:
          type:
            - number
            - 'null'
          description: >-
            The amount of gas used by this specific transaction alone; if not
            returned, the transaction has not been included in a block yet.
          example: 21000
        cumulativeGasUsed:
          type:
            - number
            - 'null'
          description: >-
            The total amount of gas used when this transaction was executed in
            the block; if not returned, the transaction has not been included in
            a block yet.
          example: 314159
        contractAddress:
          type: string
          description: >-
            The contract address created, if the transaction was a contract
            creation, otherwise null.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        logs:
          type: array
          description: Log events, that happened in this transaction.
          items:
            $ref: '#/components/schemas/BscTxLog'
    BscTxLog:
      type: object
      properties:
        address:
          type: string
          description: From which this event originated from.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        topics:
          type: array
          description: >-
            An array with max 4 32 Byte topics, topic 1-3 contains indexed
            parameters of the log.
          items:
            type: string
            example: '0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234'
        data:
          type: string
          description: The data containing non-indexed log parameter.
        logIndex:
          type: number
          description: Integer of the event index position in the block.
        blockNumber:
          type: number
          description: Block number where this transaction was in.
          example: 6470854
        blockHash:
          description: Hash of the block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        transactionIndex:
          type: number
          description: >-
            Integer of the transaction’s index position, the event was created
            in.
        transactionHash:
          type: string
          description: Hash of the transaction this event was created in.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
    Error403BscBroadcast:
      properties:
        errorCode:
          description: bsc.broadcast.failed
          example: bsc.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscBep20NotFound:
      properties:
        errorCode:
          description: erc20.token.notFound
          example: erc20.token.notFound
          type: string
        message:
          description: No such BEP20 currency ${name}.
          example: No such BEP20 currency ${name}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscBep20Set:
      properties:
        errorCode:
          description: erc20.address.set
          example: erc20.address.set
          type: string
        message:
          description: BEP20 address was already set.
          example: BEP20 address was already set.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscMnemonicPrivateKey:
      properties:
        errorCode:
          description: private.mnemonic.missing
          example: private.mnemonic.missing
          type: string
        message:
          description: Either mnemonic and index or private key must be present.
          example: Either mnemonic and index or private key must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscBep20Unsupported:
      properties:
        errorCode:
          description: bsc.bep20.unsupported
          example: bsc.bep20.unsupported
          type: string
        message:
          description: Unsupported ETH BEP20 blockchain.
          example: Unsupported ETH BEP20 blockchain.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscTxHash:
      properties:
        errorCode:
          description: bsc.transaction.hash
          example: bsc.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscTxSign:
      properties:
        errorCode:
          description: bsc.transaction.sign
          example: bsc.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscErc20TxSign:
      properties:
        errorCode:
          description: bsc.bep20.sign
          example: bsc.bep20.sign
          type: string
        message:
          description: Unable to sign transaction for contract creation. ${error}
          example: Unable to sign transaction for contract creation. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscGasCalculation:
      properties:
        errorCode:
          description: bsc.transaction.gas
          example: bsc.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscTxBody:
      properties:
        errorCode:
          description: bsc.transaction.body
          example: bsc.transaction.body
          type: string
        message:
          description: Either currency, or tokenAddress must be defined.
          example: Either currency, or tokenAddress must be defined.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscScBody:
      properties:
        errorCode:
          description: bsc.sc.invalid
          example: bsc.sc.invalid
          type: string
        message:
          description: Invalid parameters for smart contract invocation.
          example: Invalid parameters for smart contract invocation.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403BscGasPrice:
      properties:
        errorCode:
          description: gas.price.failed
          example: gas.price.failed
          type: string
        message:
          description: Unable to obtain current GAS price.
          example: Unable to obtain current GAS price.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    CallBscSmartContractMethodCaller:
      type: object
      properties:
        caller:
          maxLength: 42
          minLength: 42
          description: >-
            The address of the account, which will be sender and fee payer of
            this transaction
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0xC9c8ba8C7e2EAF43e84330Db08915A8106d7bD74'
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
        - caller
    CallBscSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to BSC transaction. If not present, last known nonce
            will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
    CallBscSmartContractReadMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
      required:
        - contractAddress
        - params
        - methodABI
        - methodName
    CallBscSmartContractMethodKMS:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to BSC transaction. If not present, last known nonce
            will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - signatureId
        - methodName
    TransferBscBlockchain:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            (Only for BSC transactions) Additional data that can be passed to a
            blockchain transaction as a data property; must be in the
            hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to BSC transaction. If not present, last known nonce
            will be used.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: >-
            Currency to transfer from BSC Blockchain Account. BEP20 tokens like
            BETH, BBTC, BADA, WBNB, BDOT, BXRP, BLTC, BBCH, CAKE are available
            only for mainnet use.
          enum:
            - BSC
            - BETH
            - BBTC
            - RMD
            - USDC_BSC
            - B2U_BSC
            - BADA
            - WBNB
            - GMC_BSC
            - BDOT
            - BXRP
            - BLTC
            - BBCH
            - HAG
            - CAKE
            - BUSD_BSC
          example: BSC
          type: string
        fee:
          $ref: '#/components/schemas/CustomFee'
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
      required:
        - to
        - amount
        - currency
        - fromPrivateKey
    BscEstimateGas:
      type: object
      properties:
        from:
          type: string
          maxLength: 42
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          minLength: 42
          description: Sender address.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in BSC.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
          pattern: ^(0x|0h)?[0-9A-F]+$
      required:
        - to
        - amount
        - from
    TransferBscBlockchainKMS:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            (Only for BSC transactions) Additional data that can be passed to a
            blockchain transaction as a data property; must be in the
            hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to BSC transaction. If not present, last known nonce
            will be used.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: >-
            Currency to transfer from BSC Blockchain Account. BEP20 tokens like
            BETH, BBTC, BADA, WBNB, BDOT, BXRP, BLTC, BBCH, CAKE are available
            only for mainnet use.
          enum:
            - BETH
            - BBTC
            - BADA
            - WBNB
            - BDOT
            - BXRP
            - BLTC
            - BBCH
            - BSC
          example: BSC
          type: string
        fee:
          $ref: '#/components/schemas/CustomFee'
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
      required:
        - to
        - amount
        - currency
        - signatureId
    KcsBlock:
      type: object
      properties:
        difficulty:
          description: Difficulty for this block.
          type: string
          example: '3296820833'
        extraData:
          description: The 'extra data' field of this block.
          type: string
          example: 0x
        gasLimit:
          description: The maximum gas allowed in this block.
          type: number
          example: 8000000
        gasUsed:
          description: The total used gas by all transactions in this block.
          type: number
          example: 7985124
        hash:
          description: Hash of the block. 'null' when its pending block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        logsBloom:
          description: >-
            The bloom filter for the logs of the block. 'null' when its pending
            block.
          type: string
          example: >-
            0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000
        miner:
          description: >-
            The address of the beneficiary to whom the mining rewards were
            given.
          type: string
          example: '0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B'
        mixHash:
          description: ''
          type: string
          example: '0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6'
        nonce:
          description: Hash of the generated proof-of-work. 'null' when its pending block.
          type: string
          example: '0xfa1692f52a7ac672'
        number:
          description: The block number. 'null' when its pending block.
          type: number
          example: 6470657
        parentHash:
          description: Hash of the parent block.
          type: string
          example: '0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15'
        receiptsRoot:
          description: ''
          type: string
          example: '0x4a496b6b7f2a1c5850bf9eebbea7193807be0067b1c06f17b9dde4eef7b2f960'
        sha3Uncles:
          description: SHA3 of the uncles data in the block.
          type: string
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        size:
          description: The size of this block in bytes.
          type: number
          example: 15296
        stateRoot:
          description: The root of the final state trie of the block.
          type: string
          example: '0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba'
        timestamp:
          description: The unix timestamp for when the block was collated.
          type: number
          example: 1569600592
        totalDifficulty:
          description: Total difficulty of the chain until this block.
          type: string
          example: '23329673338013873'
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/KcsTx'
        transactionsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: '0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704'
    KcsTx:
      type: object
      properties:
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: '0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137'
        status:
          type: boolean
          example: true
          description: >-
            TRUE if the transaction was successful, FALSE, if the EVM reverted
            the transaction.
        blockNumber:
          type: number
          description: Block number where this transaction was in.
          example: 6470854
        from:
          type: string
          description: Address of the sender.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        gasPrice:
          type: string
          description: Gas price provided by the sender in wei.
          example: '1000000000'
        transactionHash:
          type: string
          description: Hash of the transaction.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
        input:
          type: string
          description: The data sent along with the transaction.
          example: 0x
        nonce:
          type: number
          description: The number of transactions made by the sender prior to this one.
          example: 26836405
        to:
          type: string
          description: >-
            Address of the receiver. 'null' when its a contract creation
            transaction.
          example: '0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d'
        transactionIndex:
          type: number
          description: Integer of the transactions index position in the block.
          example: 3
        value:
          type: string
          description: Value transferred in wei.
          example: '1000000000000000000'
        gasUsed:
          type: number
          description: The amount of gas used by this specific transaction alone.
          example: 21000
        cumulativeGasUsed:
          type: number
          description: >-
            The total amount of gas used when this transaction was executed in
            the block.
          example: 314159
        contractAddress:
          type: string
          description: >-
            The contract address created, if the transaction was a contract
            creation, otherwise null.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        logs:
          type: array
          description: Log events, that happened in this transaction.
          items:
            type: object
            properties:
              address:
                type: string
                description: From which this event originated from.
                example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
              topics:
                type: array
                description: >-
                  An array with max 4 32 Byte topics, topic 1-3 contains indexed
                  parameters of the log.
                items:
                  type: string
                  example: >-
                    0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234
              data:
                type: string
                description: The data containing non-indexed log parameter.
              logIndex:
                type: number
                description: Integer of the event index position in the block.
              blockNumber:
                type: number
                description: Block number where this transaction was in.
                example: 6470854
              blockHash:
                description: Hash of the block.
                type: string
                example: >-
                  0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc
              transactionIndex:
                type: number
                description: >-
                  Integer of the transaction’s index position, the event was
                  created in.
              transactionHash:
                type: string
                description: Hash of the transaction this event was created in.
                example: >-
                  0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7
    Error403KcsBroadcast:
      properties:
        errorCode:
          description: kcs.broadcast.failed
          example: kcs.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsBep20NotFound:
      properties:
        errorCode:
          description: erc20.token.notFound
          example: erc20.token.notFound
          type: string
        message:
          description: No such ERC20 currency ${name}.
          example: No such ERC20 currency ${name}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsBep20Set:
      properties:
        errorCode:
          description: erc20.address.set
          example: erc20.address.set
          type: string
        message:
          description: ERC20 address was already set.
          example: ERC20 address was already set.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsMnemonicPrivateKey:
      properties:
        errorCode:
          description: private.mnemonic.missing
          example: private.mnemonic.missing
          type: string
        message:
          description: Either mnemonic and index or private key must be present.
          example: Either mnemonic and index or private key must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsBep20Unsupported:
      properties:
        errorCode:
          description: kcs.bep20.unsupported
          example: kcs.bep20.unsupported
          type: string
        message:
          description: Unsupported ETH ERC20 blockchain.
          example: Unsupported ETH ERC20 blockchain.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsTxHash:
      properties:
        errorCode:
          description: kcs.transaction.hash
          example: kcs.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsTxSign:
      properties:
        errorCode:
          description: kcs.transaction.sign
          example: kcs.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsErc20TxSign:
      properties:
        errorCode:
          description: kcs.bep20.sign
          example: kcs.bep20.sign
          type: string
        message:
          description: Unable to sign transaction for contract creation. ${error}
          example: Unable to sign transaction for contract creation. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsGasCalculation:
      properties:
        errorCode:
          description: kcs.transaction.gas
          example: kcs.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsTxBody:
      properties:
        errorCode:
          description: kcs.transaction.body
          example: kcs.transaction.body
          type: string
        message:
          description: Either currency, or tokenAddress must be defined.
          example: Either currency, or tokenAddress must be defined.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsScBody:
      properties:
        errorCode:
          description: kcs.sc.invalid
          example: kcs.sc.invalid
          type: string
        message:
          description: Invalid parameters for smart contract invocation.
          example: Invalid parameters for smart contract invocation.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403KcsGasPrice:
      properties:
        errorCode:
          description: gas.price.failed
          example: gas.price.failed
          type: string
        message:
          description: Unable to obtain current GAS price.
          example: Unable to obtain current GAS price.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    CallKcsSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Kcs transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
    CallKcsSmartContractReadMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
      required:
        - contractAddress
        - params
        - methodABI
        - methodName
    CallKcsSmartContractMethodKMS:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Kcs transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - contractAddress
        - params
        - methodABI
        - signatureId
        - methodName
    TransferKcsBlockchain:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Kcs transaction. If not present, last known nonce
            will be used.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: Currency to transfer from Kcs Blockchain Account.
          enum:
            - KCS
          example: KCS
          type: string
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              example: '40000'
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price in Gwei.
              example: '20'
              pattern: ^[+]?\d+$
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
      required:
        - to
        - amount
        - currency
        - fromPrivateKey
    KcsEstimateGas:
      type: object
      properties:
        from:
          type: string
          maxLength: 42
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          minLength: 42
          description: Sender address.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in KCS.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
          pattern: ^(0x|0h)?[0-9A-F]+$
      required:
        - to
        - amount
        - from
    TransferKcsBlockchainKMS:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Kcs transaction. If not present, last known nonce
            will be used.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        currency:
          description: Currency to transfer from Kcs Blockchain Account.
          enum:
            - KCS
          example: KCS
          type: string
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              example: '40000'
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price in Gwei.
              example: '20'
              pattern: ^[+]?\d+$
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
      required:
        - to
        - amount
        - currency
        - signatureId
    OneBlockCurrent:
      type: object
      properties:
        shardID:
          type: number
          description: Shard ID
          example: 0
        blockNumber:
          type: number
          description: Current block number in this shard
          example: 6491272
    OneBalance:
      type: object
      properties:
        balance:
          type: string
          description: Balance in ONE
          example: '10.52'
    GeneratedAddressOne:
      type: object
      properties:
        address:
          type: string
          description: ONE address
          example: one15annzcwtlcq3dfx7nc6plpr9jsxzyyw5xc8pjn
    OneBlock:
      type: object
      properties:
        difficulty:
          description: Difficulty for this block.
          type: string
          example: '3296820833'
        extraData:
          description: The 'extra data' field of this block.
          type: string
          example: 0x
        gasLimit:
          description: The maximum gas allowed in this block.
          type: number
          example: 8000000
        gasUsed:
          description: The total used gas by all transactions in this block.
          type: number
          example: 7985124
        hash:
          description: Hash of the block. 'null' when its pending block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        logsBloom:
          description: >-
            The bloom filter for the logs of the block. 'null' when its pending
            block.
          type: string
          example: >-
            0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000
        miner:
          description: >-
            The address of the beneficiary to whom the mining rewards were
            given.
          type: string
          example: '0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B'
        mixHash:
          description: ''
          type: string
          example: '0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6'
        nonce:
          description: Hash of the generated proof-of-work. 'null' when its pending block.
          type: string
          example: '0xfa1692f52a7ac672'
        number:
          description: The block number. 'null' when its pending block.
          type: number
          example: 6470657
        parentHash:
          description: Hash of the parent block.
          type: string
          example: '0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15'
        receiptsRoot:
          description: ''
          type: string
          example: '0x4a496b6b7f2a1c5850bf9eebbea7193807be0067b1c06f17b9dde4eef7b2f960'
        sha3Uncles:
          description: SHA3 of the uncles data in the block.
          type: string
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        size:
          description: The size of this block in bytes.
          type: number
          example: 15296
        stateRoot:
          description: The root of the final state trie of the block.
          type: string
          example: '0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba'
        timestamp:
          description: The unix timestamp for when the block was collated.
          type: number
          example: 1569600592
        totalDifficulty:
          description: Total difficulty of the chain until this block.
          type: string
          example: '23329673338013873'
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/OneTx'
        transactionsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: '0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704'
    OneTx:
      type: object
      properties:
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: '0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137'
        status:
          type: boolean
          example: true
          description: >-
            TRUE if the transaction was successful, FALSE, if the EVM reverted
            the transaction.
        blockNumber:
          type:
            - number
            - 'null'
          description: >-
            The number of the block that the transaction is included in; if not
            returned, the transaction has not been included in a block yet.
          example: 6470854
        from:
          type: string
          description: Address of the sender.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        gasPrice:
          type: string
          description: Gas price provided by the sender in wei.
          example: '1000000000'
        transactionHash:
          type: string
          description: Hash of the transaction.
          example: '0x4fb94db21613051e6241f456dcc7da5789faae6a434ecd59c7ac4162e591ce1d'
        ethHash:
          type: string
          description: Eth Hash representation of the transaction.
          example: '0xb2a66a105f05304afc7194063b36cae2a8f14edf1e06fc1e185cfea635cf09bb'
        input:
          type: string
          description: The data sent along with the transaction.
          example: 0x
        nonce:
          type: number
          description: The number of transactions made by the sender prior to this one.
          example: 26836405
        to:
          type: string
          description: >-
            Address of the receiver. 'null' when its a contract creation
            transaction.
          example: '0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d'
        transactionIndex:
          type:
            - number
            - 'null'
          description: >-
            The integer of the transactions index position in the block; if not
            returned, the transaction has not been included in a block yet.
          example: 3
        value:
          type: string
          description: Value transferred in wei.
          example: '1000000000000000000'
        gasUsed:
          type:
            - number
            - 'null'
          description: >-
            The amount of gas used by this specific transaction alone; if not
            returned, the transaction has not been included in a block yet.
          example: 21000
        cumulativeGasUsed:
          type:
            - number
            - 'null'
          description: >-
            The total amount of gas used when this transaction was executed in
            the block; if not returned, the transaction has not been included in
            a block yet.
          example: 314159
        contractAddress:
          type: string
          description: >-
            The contract address created, if the transaction was a contract
            creation, otherwise null.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        logs:
          type: array
          description: Log events, that happened in this transaction.
          items:
            $ref: '#/components/schemas/OneTxLog'
    OneTxLog:
      type: object
      properties:
        address:
          type: string
          description: From which this event originated from.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        topics:
          type: array
          description: >-
            An array with max 4 32 Byte topics, topic 1-3 contains indexed
            parameters of the log.
          items:
            type: string
            example: '0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234'
        data:
          type: string
          description: The data containing non-indexed log parameter.
        logIndex:
          type: number
          description: Integer of the event index position in the block.
        blockNumber:
          type: number
          description: Block number where this transaction was in.
          example: 6470854
        blockHash:
          description: Hash of the block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        transactionIndex:
          type: number
          description: >-
            Integer of the transaction’s index position, the event was created
            in.
        transactionHash:
          type: string
          description: Hash of the transaction this event was created in.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
    Error403OneBroadcast:
      properties:
        errorCode:
          description: bsc.broadcast.failed
          example: bsc.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneBep20NotFound:
      properties:
        errorCode:
          description: erc20.token.notFound
          example: erc20.token.notFound
          type: string
        message:
          description: No such HRM20 currency ${name}.
          example: No such HRM20 currency ${name}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneBep20Set:
      properties:
        errorCode:
          description: erc20.address.set
          example: erc20.address.set
          type: string
        message:
          description: HRM20 address was already set.
          example: HRM20 address was already set.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneMnemonicPrivateKey:
      properties:
        errorCode:
          description: private.mnemonic.missing
          example: private.mnemonic.missing
          type: string
        message:
          description: Either mnemonic and index or private key must be present.
          example: Either mnemonic and index or private key must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneBep20Unsupported:
      properties:
        errorCode:
          description: bsc.bep20.unsupported
          example: bsc.bep20.unsupported
          type: string
        message:
          description: Unsupported ETH HRM20 blockchain.
          example: Unsupported ETH HRM20 blockchain.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneTxHash:
      properties:
        errorCode:
          description: bsc.transaction.hash
          example: bsc.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneTxSign:
      properties:
        errorCode:
          description: bsc.transaction.sign
          example: bsc.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneErc20TxSign:
      properties:
        errorCode:
          description: bsc.bep20.sign
          example: bsc.bep20.sign
          type: string
        message:
          description: Unable to sign transaction for contract creation. ${error}
          example: Unable to sign transaction for contract creation. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneGasCalculation:
      properties:
        errorCode:
          description: bsc.transaction.gas
          example: bsc.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneTxBody:
      properties:
        errorCode:
          description: bsc.transaction.body
          example: bsc.transaction.body
          type: string
        message:
          description: Either currency, or tokenAddress must be defined.
          example: Either currency, or tokenAddress must be defined.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneScBody:
      properties:
        errorCode:
          description: bsc.sc.invalid
          example: bsc.sc.invalid
          type: string
        message:
          description: Invalid parameters for smart contract invocation.
          example: Invalid parameters for smart contract invocation.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403OneGasPrice:
      properties:
        errorCode:
          description: gas.price.failed
          example: gas.price.failed
          type: string
        message:
          description: Unable to obtain current GAS price.
          example: Unable to obtain current GAS price.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    CallOneSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to ONE transaction. If not present, last known nonce
            will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
    CallOneReadSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
            description: Parameters of the method to be invoked
      required:
        - contractAddress
        - params
        - methodABI
        - methodName
    CallOneSmartContractMethodKMS:
      type: object
      properties:
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to ONE transaction. If not present, last known nonce
            will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - contractAddress
        - params
        - methodABI
        - signatureId
        - methodName
    TransferOneBlockchain:
      type: object
      properties:
        amount:
          description: The amount to transfer
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        currency:
          type: string
          description: The currency of the amount to transfer
          example: ONE
          enum:
            - ONE
        to:
          description: The blockchain address to transfer the amount to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        fee:
          $ref: '#/components/schemas/CustomFee'
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - to
        - amount
        - currency
        - fromPrivateKey
    OneEstimateGas:
      type: object
      properties:
        from:
          type: string
          maxLength: 66
          example: '0xfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef'
          minLength: 66
          description: Sender address.
        to:
          description: Blockchain address to send assets
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in One.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
      required:
        - to
        - amount
        - from
    TransferOneBlockchainKMS:
      type: object
      properties:
        amount:
          description: The amount to transfer
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        currency:
          type: string
          description: The currency of the amount to transfer
          example: ONE
          enum:
            - ONE
        to:
          description: The blockchain address to transfer the amount to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          maxLength: 42
          minLength: 42
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address from which the fee will be deducted that was generated from
            the mnemonic
        fee:
          $ref: '#/components/schemas/CustomFee'
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - to
        - amount
        - currency
        - signatureId
    XdcBlock:
      type: object
      properties:
        number:
          description: The block number. 'null' when its pending block.
          type: number
          example: 6470657
        hash:
          description: Hash of the block. 'null' when its pending block.
          type: string
          example: '0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc'
        parentHash:
          description: Hash of the parent block.
          type: string
          example: '0xd34aab8a455027086ac54034e68608c84d984401a883b7b5d91f9ae0bbefda15'
        nonce:
          description: Hash of the generated proof-of-work. 'null' when its pending block.
          type: string
          example: '0xfa1692f52a7ac672'
        sha3Uncles:
          description: SHA3 of the uncles data in the block.
          type: string
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        logsBloom:
          description: >-
            The bloom filter for the logs of the block. 'null' when its pending
            block.
          type: string
          example: >-
            0x042080004210492080800001610060ad9600005bc81502020800000043e302020381a404000100409102040240300641108004000400007000008000c049558055a800000a0001800748900806502004200400108205005418c0218802281a0408060000533210462021050470810a010140102809011814018281115020090201068401847000a04010000c00084062000485640d00020220181150020008589105a41c0880001112034100010882545410240011402a3480050104004c310204000002009490d0012022a040c20c20011020401020140250805100410060008280200008181a220114102800001648640828200c00a94c1003a2060e001000
        transactionsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: '0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704'
        stateRoot:
          description: The root of the final state trie of the block.
          type: string
          example: '0x32757c92f10c6c5a106c6fb4b9ca3ff301e413a59ca3d0513b4bf98c72efddba'
        receiptsRoot:
          description: The root of the transaction trie of the block.
          type: string
          example: '0x5990081ef8515d561b50255af03c5d505f7725ddef27405dc67d23bfd0f47704'
        miner:
          description: >-
            The address of the beneficiary to whom the mining rewards were
            given.
          type: string
          example: '0xD8869d9E3d497323561Fbca2319a9FC3F6f10c4B'
        difficulty:
          description: Difficulty for this block.
          type: string
          example: '3296820833'
        totalDifficulty:
          description: Total difficulty of the chain until this block.
          type: string
          example: '23329673338013873'
        extraData:
          description: The 'extra data' field of this block.
          type: string
          example: 0x
        size:
          description: The size of this block in bytes.
          type: number
          example: 15296
        gasLimit:
          description: The maximum gas allowed in this block.
          type: number
          example: 8000000
        gasUsed:
          description: The total used gas by all transactions in this block.
          type: number
          example: 7985124
        timestamp:
          description: The unix timestamp for when the block was collated.
          type: number
          example: 1569600592
        transactions:
          description: Array of transactions.
          type: array
          items:
            $ref: '#/components/schemas/XdcTx'
        uncles:
          description: Array of uncle hashes.
          type: array
          items:
            type: string
          example:
            - '0x7a44a1f56f12ae825fdc04550d7c3af2344daab987691771c06235f25fafcaa6'
    XdcTx:
      type: object
      properties:
        hash:
          type: string
          description: Hash of the transaction.
          example: '0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7'
        nonce:
          type: number
          description: The number of transactions made by the sender prior to this one.
          example: 26836405
        blockHash:
          description: Hash of the block where this transaction was in.
          type: string
          example: '0xcf2c40f475e78c7c19778e1ae999a0e371c9319b38182ea15dc94536f13f9137'
        blockNumber:
          type: number
          description: Block number where this transaction was in.
          example: 6470854
        transactionIndex:
          type: number
          description: Integer of the transactions index position in the block.
          example: 3
        from:
          type: string
          description: Address of the sender.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        to:
          type: string
          description: >-
            Address of the receiver. 'null' when its a contract creation
            transaction.
          example: '0xbC546fa1716Ed886967cf73f40e8F2F5e623a92d'
        value:
          type: string
          description: Value transferred in wei.
          example: '1000000000000000000'
        gas:
          type: number
          description: Gas provided by the sender.
          example: 21000
        gasPrice:
          type: string
          description: Gas price provided by the sender in wei.
          example: '1000000000'
        input:
          type: string
          description: The data sent along with the transaction.
          example: 0x
        status:
          type: boolean
          example: true
          description: >-
            TRUE if the transaction was successful, FALSE, if the EVM reverted
            the transaction.
        gasUsed:
          type: number
          description: The amount of gas used by this specific transaction alone.
          example: 21000
        cumulativeGasUsed:
          type: number
          description: >-
            The total amount of gas used when this transaction was executed in
            the block.
          example: 314159
        contractAddress:
          type: string
          description: >-
            The contract address created, if the transaction was a contract
            creation, otherwise null.
          example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
        logs:
          type: array
          description: Log events, that happened in this transaction.
          items:
            type: object
            properties:
              address:
                type: string
                description: From which this event originated from.
                example: '0x81b7E08F65Bdf5648606c89998A9CC8164397647'
              topics:
                type: array
                description: >-
                  An array with max 4 32 Byte topics, topic 1-3 contains indexed
                  parameters of the log.
                items:
                  type: string
                  example: >-
                    0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234
              data:
                type: string
                description: The data containing non-indexed log parameter.
              logIndex:
                type: number
                description: Integer of the event index position in the block.
              blockNumber:
                type: number
                description: Block number where this transaction was in.
                example: 6470854
              blockHash:
                description: Hash of the block.
                type: string
                example: >-
                  0x5d40698ee1b1ec589035f2a39c6162287e9056868cc79d66cfb248ba9f66c3fc
              transactionIndex:
                type: number
                description: >-
                  Integer of the transaction’s index position, the event was
                  created in.
              transactionHash:
                type: string
                description: Hash of the transaction this event was created in.
                example: >-
                  0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7
        logsBloom:
          type: string
          format: DATA, 256 Bytes
          description: Bloom filter for light clients to quickly retrieve related logs.
          example: null
        root:
          type: string
          description: 32 bytes of post-transaction stateroot (pre Byzantium)
          example: null
    Error403XdcBroadcast:
      properties:
        errorCode:
          description: xdc.broadcast.failed
          example: xdc.broadcast.failed
          type: string
        message:
          description: Unable to broadcast transaction due to ${error}.
          example: Unable to broadcast transaction due to ${error}.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XdcErc20Set:
      properties:
        errorCode:
          description: erc20.address.set
          example: erc20.address.set
          type: string
        message:
          description: ERC20 address was already set.
          example: ERC20 address was already set.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XdcMnemonicPrivateKey:
      properties:
        errorCode:
          description: private.mnemonic.missing
          example: private.mnemonic.missing
          type: string
        message:
          description: Either mnemonic and index or private key must be present.
          example: Either mnemonic and index or private key must be present.
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XdcTxHash:
      properties:
        errorCode:
          description: xdc.transaction.hash
          example: xdc.transaction.hash
          type: string
        message:
          description: Unable to calculate transaction hash. ${error}
          example: Unable to calculate transaction hash. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XdcTxSign:
      properties:
        errorCode:
          description: xdc.transaction.sign
          example: xdc.transaction.sign
          type: string
        message:
          description: Unable to sign transaction. ${error}
          example: Unable to sign transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XdcErc20TxSign:
      properties:
        errorCode:
          description: xdc.erc20.sign
          example: xdc.erc20.sign
          type: string
        message:
          description: Unable to sign transaction for contract creation. ${error}
          example: Unable to sign transaction for contract creation. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    Error403XdcGasCalculation:
      properties:
        errorCode:
          description: xdc.transaction.gas
          example: xdc.transaction.gas
          type: string
        message:
          description: Unable to calculate gas limit for transaction. ${error}
          example: Unable to calculate gas limit for transaction. ${error}
          type: string
        statusCode:
          description: '403'
          example: 403
          type: number
      required:
        - errorCode
        - message
        - statusCode
      type: object
    CallXdcSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 43
          minLength: 42
          description: The address of the smart contract
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          type: string
        amount:
          description: Amount of the assets to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to XDC transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
    CallXdcReadSmartContractMethod:
      type: object
      properties:
        contractAddress:
          maxLength: 43
          minLength: 42
          description: The address of the smart contract
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          example:
            inputs:
              - internalType: uint256
                name: amount
                type: uint256
            name: stake
            outputs: []
            stateMutability: nonpayable
            type: function
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
      required:
        - contractAddress
        - params
        - methodABI
        - methodName
    CallXdcSmartContractMethodKMS:
      type: object
      properties:
        contractAddress:
          maxLength: 43
          minLength: 42
          description: The address of the smart contract
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to XDC transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - contractAddress
        - params
        - methodABI
        - signatureId
        - methodName
    TransferXdcBlockchain:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        currency:
          type: string
          description: >-
            Currency of the transfer. ERC20 tokens are available only for
            mainnet use.
          example: XDC
          enum:
            - XDC
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to XDC transaction. If not present, last known nonce
            will be used.
        to:
          description: Blockchain address to send assets
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          maxLength: 43
          minLength: 42
          type: string
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              example: '40000'
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price in Gwei.
              example: '20'
              pattern: ^[+]?\d+$
        amount:
          description: Amount to be sent.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
      required:
        - to
        - currency
        - amount
        - fromPrivateKey
    XdcEstimateGas:
      type: object
      properties:
        from:
          type: string
          maxLength: 43
          example: xdcfb99f8ae9b70a0c8cd96ae665bbaf85a7e01a2ef
          minLength: 42
          description: Sender address.
        to:
          description: Blockchain address to send assets
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          maxLength: 43
          minLength: 42
          type: string
        amount:
          description: Amount to be sent in XDC.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
      required:
        - to
        - amount
        - from
    TransferXdcBlockchainKMS:
      type: object
      properties:
        data:
          type: string
          maxLength: 50000
          description: >-
            Additional data that can be passed to a blockchain transaction as a
            data property; must be in the hexadecimal format
          example: 4d79206e6f746520746f2074686520726563697069656e74
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to XDC transaction. If not present, last known nonce
            will be used.
        currency:
          type: string
          description: >-
            Currency of the transfer. ERC20 tokens are available only for
            mainnet use.
          example: XDC
          enum:
            - XDC
        to:
          description: Blockchain address to send assets
          example: xdc687422eEA2cB73B5d3e242bA5456b782919AFc85
          maxLength: 43
          minLength: 42
          type: string
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              example: '40000'
              pattern: ^[+]?\d+$
            gasPrice:
              type: string
              description: Gas price in Gwei.
              example: '20'
              pattern: ^[+]?\d+$
        amount:
          description: Amount to be sent in XDC.
          example: '100000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
      required:
        - to
        - amount
        - signatureId
        - currency
    TransferMultiTokenCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example: '100000'
          type: string
          maxLength: 256
        amount:
          description: Amount of token.
          example: '100000'
          type: string
          maxLength: 256
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - tokenId
        - fromPrivateKey
        - amount
        - feeCurrency
    MultiTx:
      type: object
      properties:
        blockNumber:
          type: number
          example: 6541235
          description: Block number
        txId:
          type: string
          example: '0x955c1037608c7aecb6d1a3f150ce7d0a80536bcabb0deb69d62f55292cc4c372'
          description: Transaction ID
        contractAddress:
          type: string
          example: '0x4f54fAD27F7F46C102Cd49b8E75C5593397cd9c3'
          description: Contract address
        tokenId:
          type: string
          example: '1'
          description: ID of the token
        amount:
          type: string
          example: '1'
          description: Amount of tokens transferred.
        from:
          type: string
          example: '0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d'
          description: Sender
        operator:
          type: string
          example: '0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d'
          description: Operator
        to:
          type: string
          example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
          description: recipient
      required:
        - blockNumber
        - txId
        - contractAddress
        - tokenId
        - from
        - to
        - amount
        - operator
    TransferMultiTokenBatchCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example:
            - '100000'
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: Amount of token to be transferred
          example:
            - '100000'
          type: array
          items:
            type: string
            maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - tokenId
        - amounts
        - fromPrivateKey
        - feeCurrency
    DeployMultiTokenCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        uri:
          description: URI of the Multi Token contract
          example: example.com
          maxLength: 100
          minLength: 1
          type: string
        publicMint:
          description: True if the contract is publicMint type
          example: true
          type: boolean
        fromPrivateKey:
          description: >-
            Private key of account address, from which gas for deployment of
            ERC1155 will be paid. Private key, or signature Id must be present.
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - uri
        - feeCurrency
        - fromPrivateKey
    DeployMultiTokenCeloKMS:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        uri:
          description: URI of the Multi Token contract
          example: example.com
          maxLength: 100
          minLength: 1
          type: string
        publicMint:
          description: True if the contract is publicMint type
          example: true
          type: boolean
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - uri
        - feeCurrency
        - signatureId
    MintMultiTokenBatchKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          type: array
          description: The blockchain address to send the Multi Tokens to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: The IDs of the Multi Tokens to be created.
          example:
            - - '100000'
              - '100001'
          items:
            type: array
            items:
              type: string
              maxLength: 32
        amounts:
          type: array
          description: The amounts of the Multi Tokens to be created.
          example:
            - - '100'
              - '100'
          items:
            type: array
            items:
              type: string
              maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the Multi Token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - feeCurrency
        - tokenId
        - amounts
        - signatureId
    BurnMultiTokenCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: '0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f'
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        amount:
          description: amount of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - feeCurrency
        - fromPrivateKey
        - tokenId
        - amount
        - account
    BurnMultiTokenBatchCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: '0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f'
          type: string
        tokenId:
          description: The IDs of the Multi Tokens to be destroyed.
          example:
            - '100000'
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: The amounts of the Multi Tokens to be destroyed.
          example:
            - '100000'
          type: array
          items:
            type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the Multi Token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - feeCurrency
        - fromPrivateKey
        - tokenId
        - amounts
        - account
    BurnMultiTokenKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: '0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f'
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        amount:
          description: amount of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - feeCurrency
        - contractAddress
        - tokenId
        - amount
        - signatureId
        - account
    AddMultiTokenMinterKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - MATIC
            - KCS
            - KLAY
            - CELO
            - ONE
            - BSC
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of MultiToken token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        minter:
          maxLength: 42
          minLength: 42
          description: Address of MultiToken minter
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Ethereum transaction. If not present, last known
            nonce will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas, only valid for CELO chain.
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - url
        - contractAddress
        - minter
        - signatureId
    AddMultiTokenMinter:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - MATIC
            - KCS
            - KLAY
            - CELO
            - ONE
            - BSC
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of MultiToken token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        minter:
          maxLength: 42
          minLength: 42
          description: Address of MultiToken minter
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Ethereum transaction. If not present, last known
            nonce will be used.
        fee:
          $ref: '#/components/schemas/CustomFee'
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas, only valid for CELO chain.
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - minter
        - chain
        - url
        - contractAddress
        - fromPrivateKey
    BurnMultiTokenBatchKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: '0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f'
          type: string
        tokenId:
          description: The IDs of the Multi Tokens to be destroyed.
          example:
            - '100000'
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: The amounts of the Multi Tokens to be destroyed.
          example:
            - '100000'
          type: array
          items:
            type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the Multi Token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - feeCurrency
        - contractAddress
        - tokenId
        - amounts
        - account
        - signatureId
    TransferMultiTokenKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example: '100000'
          type: string
          maxLength: 256
        amount:
          description: amount of token.
          example: '100000'
          type: string
          maxLength: 256
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - feeCurrency
        - signatureId
        - tokenId
        - amount
    TransferMultiTokenBatchKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example:
            - '100000'
          type: array
          items:
            type: string
        amounts:
          description: amounts of token.
          example:
            - '100000'
          type: array
          items:
            type: string
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - feeCurrency
        - signatureId
        - tokenId
        - amounts
    MintMultiTokenCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        tokenId:
          description: ID of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        amount:
          description: amount of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - tokenId
        - amount
        - feeCurrency
        - contractAddress
        - fromPrivateKey
    MintMultiTokenBatchCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        tokenId:
          type: array
          description: The IDs of the Multi Tokens to be created.
          example:
            - - '100000'
              - '100001'
          items:
            type: array
            items:
              type: string
              maxLength: 32
        amounts:
          type: array
          description: The amounts of the Multi Tokens to be created.
          example:
            - - '100'
              - '100'
          items:
            type: array
            items:
              type: string
              maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        to:
          maxLength: 42
          minLength: 42
          description: The blockchain address to send the Multi Tokens to
          example:
            - '0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f'
          type: array
          items:
            type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the Multi Token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - tokenId
        - amounts
        - feeCurrency
        - contractAddress
        - fromPrivateKey
    MintMultiTokenKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        tokenId:
          description: ID of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        amount:
          description: amount of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to Celo transaction. If not present, last known
            nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - tokenId
        - amount
        - feeCurrency
        - contractAddress
        - signatureId
    TransferMultiToken:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example: '100000'
          type: string
          maxLength: 256
        amount:
          description: amount of token.
          example: '100000'
          type: string
          maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - chain
        - contractAddress
        - tokenId
        - fromPrivateKey
        - amount
    TransferMultiTokenBatch:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example:
            - '100000'
          type: array
          items:
            type: string
            maxLength: 256
        amounts:
          description: amounts of token.
          example:
            - '100000'
          type: array
          maxLength: 256
          items:
            type: string
            maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - chain
        - contractAddress
        - tokenId
        - amounts
        - fromPrivateKey
    DeployMultiToken:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        uri:
          description: URI of the Multi Token token
          example: example.com
          type: string
        fromPrivateKey:
          description: >-
            Private key of account address, from which gas for deployment of
            ERC1155 will be paid. Private key, or signature Id must be present.
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
        publicMint:
          description: True if the contract is publicMint type
          example: true
          type: boolean
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - uri
        - chain
        - fromPrivateKey
    DeployMultiTokenKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        uri:
          description: URI of the Multi Token token
          example: example.com
          type: string
        publicMint:
          description: True if the contract is publicMint type
          example: true
          type: boolean
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - uri
        - chain
        - signatureId
    TransferMultiTokenKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example: '100000'
          type: string
          maxLength: 256
        amount:
          description: amount of token.
          example: '100000'
          type: string
          maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - chain
        - contractAddress
        - signatureId
        - tokenId
        - amount
    TransferMultiTokenBatchKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of token.
          example:
            - '100000'
          type: array
          items:
            type: string
            maxLength: 256
        amounts:
          description: amounts of token.
          example:
            - '100000'
          type: array
          maxLength: 256
          items:
            type: string
            maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - chain
        - contractAddress
        - signatureId
        - tokenId
        - amounts
    MintMultiToken:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        tokenId:
          description: ID of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: amount of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - chain
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
        - amount
    MintMultiTokenKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        tokenId:
          description: ID of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: amount of token to be created.
          example: '100000'
          type: string
          maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - chain
        - url
        - contractAddress
        - signatureId
        - tokenId
        - amount
    MintMultiTokenBatch:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        to:
          type: array
          description: The blockchain address to send the Multi Tokens to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: The IDs of the Multi Tokens to be created.
          example:
            - - '100000'
              - '100001'
          items:
            type: array
            items:
              type: string
              maxLength: 32
        amounts:
          type: array
          description: The amounts of the Multi Tokens to be created.
          example:
            - - '100'
              - '100'
          items:
            type: array
            items:
              type: string
              maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the Multi Token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - chain
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
        - amounts
    MintMultiTokenBatchKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        to:
          type: array
          description: The blockchain address to send the Multi Tokens to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: The IDs of the Multi Tokens to be created.
          example:
            - - '100000'
              - '100001'
          items:
            type: array
            items:
              type: string
              maxLength: 32
        amounts:
          type: array
          description: The amounts of the Multi Tokens to be created.
          example:
            - - '100'
              - '100'
          items:
            type: array
            items:
              type: string
              maxLength: 32
        data:
          description: Data in bytes
          example: '0x1234'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the Multi Token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - to
        - chain
        - contractAddress
        - tokenId
        - url
        - signatureId
        - amounts
    BurnMultiToken:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: '0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f'
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 103
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        amount:
          description: amount of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - account
        - chain
        - contractAddress
        - fromPrivateKey
        - tokenId
        - amount
    BurnMultiTokenBatch:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: '0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f'
          type: string
        tokenId:
          description: The IDs of the Multi Tokens to be destroyed.
          example:
            - '1000'
            - '1001'
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: The amounts of the Multi Tokens to be destroyed.
          example:
            - '10'
            - '10'
          type: array
          items:
            type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the Multi Token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - account
        - amounts
        - chain
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
    BurnMultiTokenKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: '0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f'
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: '100000'
          type: string
          maxLength: 32
        amount:
          description: amount of token to be destroyed.
          example: '100'
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - account
        - chain
        - amount
        - contractAddress
        - tokenId
        - signatureId
    BurnMultiTokenBatchKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - KLAY
            - BSC
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: '0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f'
          type: string
        tokenId:
          description: The IDs of the Multi Tokens to be destroyed.
          example:
            - '100'
            - '101'
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: The amounts of the Multi Tokens to be destroyed.
          example:
            - '10'
            - '10'
          type: array
          items:
            type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the Multi Token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            Nonce to be set to transaction. If not present, last known nonce
            will be used.
        fee:
          description: >-
            Custom defined fee. If not present, it will be calculated
            automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: '40000'
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: '20'
      required:
        - account
        - chain
        - amounts
        - contractAddress
        - tokenId
        - signatureId
    Erc20BalanceForAddress:
      type: object
      properties:
        contractAddress:
          type: string
          description: >-
            The address of the smart contract that the fungible tokens were
            minted on
        amount:
          type: string
          description: The number of the fungible tokens
          example: '10'
    Erc20Balance:
      type: object
      properties:
        balance:
          type: string
          description: >-
            The number of fungible tokens in the smallest token unit (for
            example, if the token has 10 decimal places, the number is returned
            as 9*10^10)
          example: '10'
    ChainDeployErc20:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - XDC
            - ONE
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: >-
            Initial supply of ERC20 token. If totalCap is not defined, this will
            be the total cap.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Ethereum blockchain, where all created ERC20 tokens will
            be transferred.
          maxLength: 43
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        fromPrivateKey:
          description: >-
            Private key of Ethereum account address, from which the fee for the
            deployment of ERC20 will be paid. Private key, or signature Id must
            be present.
          type: string
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          maxLength: 66
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - name
        - symbol
        - address
        - supply
        - fromPrivateKey
        - digits
    ChainDeploySolanaSpl:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        supply:
          description: Initial supply of SPL token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 0
          type: number
        address:
          description: >-
            Address on Solana blockchain, where all created SPL tokens will be
            transferred.
          maxLength: 44
          minLength: 32
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        from:
          description: >-
            Address on Solana blockchain, from which the fee for the deployment
            of SPL will be paid.
          maxLength: 44
          minLength: 32
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        freezeAuthority:
          description: >-
            Address on Solana blockchain which which can freeze token accounts.
            Default to the 'from'
          maxLength: 44
          minLength: 32
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        fromPrivateKey:
          description: >-
            Private key of Solana account address, from which the fee for the
            deployment of SPL will be paid. Private key, or signature Id must be
            present.
          type: string
          example: >-
            3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad
          maxLength: 103
          minLength: 128
        feePayer:
          description: >-
            Address on the Solana blockchain, from which the fee will be paid
            for transaction. Defaults to from.
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        feePayerPrivateKey:
          type: string
          maxLength: 87
          example: >-
            YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf
          minLength: 128
          description: Private key of the fee payer address.
      required:
        - chain
        - from
        - address
        - supply
        - fromPrivateKey
        - digits
    ChainDeploySolanaSplKMS:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        supply:
          description: Initial supply of SPL token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 0
          type: number
        address:
          description: >-
            Address on Solana blockchain, where all created SPL tokens will be
            transferred.
          maxLength: 44
          minLength: 32
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        from:
          description: >-
            Address on Solana blockchain, from which the fee for the deployment
            of SPL will be paid.
          maxLength: 44
          minLength: 32
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        freezeAuthority:
          description: >-
            Address on Solana blockchain which which can freeze token accounts.
            Default to the 'from'
          maxLength: 44
          minLength: 32
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        feePayer:
          description: Blockchain address to pay the fee for the transaction from
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        feePayerSignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key used for paying the gas costs in
            signing application. Defaults to the signatureId.
      required:
        - chain
        - from
        - address
        - supply
        - signatureId
        - digits
    FungibleTx:
      type: object
      properties:
        blockNumber:
          type: number
          example: 6541235
          description: Block number
        txId:
          type: string
          example: '0x955c1037608c7aecb6d1a3f150ce7d0a80536bcabb0deb69d62f55292cc4c372'
          description: Transaction ID
        contractAddress:
          type: string
          example: '0x4f54fAD27F7F46C102Cd49b8E75C5593397cd9c3'
          description: Contract address
        amount:
          type: string
          example: '1'
          description: Amount of tokens transferred, in smallest decimals
        from:
          type: string
          example: '0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d'
          description: Sender
        to:
          type: string
          example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
          description: recipient
      required:
        - txId
        - blockNumber
        - contractAddress
        - amount
        - from
        - to
    ChainDeployErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - XDC
            - ONE
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Ethereum blockchain, where all created ERC20 tokens will
            be transferred.
          maxLength: 43
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - name
        - symbol
        - address
        - supply
        - signatureId
        - digits
    ChainDeployKcsErc20:
      type: object
      properties:
        chain:
          type: string
          example: KCS
          description: The blockchain to work with
          enum:
            - KCS
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: >-
            Initial supply of ERC20 token. If totalCap is not defined, this will
            be the total cap.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Ethereum blockchain, where all created ERC20 tokens will
            be transferred.
          maxLength: 43
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        fromPrivateKey:
          description: >-
            Private key of Ethereum account address, from which the fee for the
            deployment of ERC20 will be paid. Private key, or signature Id must
            be present.
          type: string
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          maxLength: 66
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - name
        - symbol
        - address
        - supply
        - fromPrivateKey
        - digits
    ChainDeployKcsErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: KCS
          description: The blockchain to work with
          enum:
            - KCS
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Ethereum blockchain, where all created ERC20 tokens will
            be transferred.
          maxLength: 43
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - name
        - symbol
        - address
        - supply
        - signatureId
        - digits
    ChainDeployAlgoErc20:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 8
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 32
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        supply:
          description: >-
            Initial supply of ERC20 token. If totalCap is not defined, this will
            be the total cap.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 1
          maximum: 15
          minimum: 0
          type: number
        url:
          description: The URL pointing to the metadata
          example: https://my_token_data.com
          type: string
          maxLength: 256
        fromPrivateKey:
          description: >-
            Private key of Ethereum account address, from which the fee for the
            deployment of ERC20 will be paid. Private key, or signature Id must
            be present.
          type: string
          example: >-
            GDNQECUM2JDPTA4KXNSXHQBAYL56FDZ73NXCQ2OLB32PN2G5BLNO5GY3QD2BQOYVBPYPMMETQUGTJUQ7W3V2K4NRJFHAVVWVZVBG5G2
          maxLength: 103
          minLength: 103
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
      required:
        - chain
        - name
        - symbol
        - supply
        - fromPrivateKey
        - digits
        - fee
    ChainDeployAlgoErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 8
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 32
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        supply:
          description: >-
            Initial supply of ERC20 token. If totalCap is not defined, this will
            be the total cap.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 15
          minimum: 0
          type: number
        from:
          maxLength: 58
          minLength: 58
          description: Blockchain address to create token from
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
          type: string
        url:
          description: The URL pointing to the metadata
          example: https://my_token_data.com
          type: string
          maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        fee:
          description: The transaction fee in ALGO
          type: string
          example: '0.001'
      required:
        - chain
        - name
        - symbol
        - supply
        - signatureId
        - digits
        - from
    ChainDeployCeloErc20:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Ethereum blockchain, where all created ERC20 tokens will
            be transferred.
          maxLength: 42
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        fromPrivateKey:
          description: >-
            Private key of Ethereum account address, from which the fee for the
            deployment of ERC20 will be paid. Private key, or signature Id must
            be present.
          type: string
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          maxLength: 66
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - name
        - symbol
        - address
        - supply
        - fromPrivateKey
        - digits
        - feeCurrency
    ChainDeployCeloErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        symbol:
          description: Symbol of the ERC20 token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        name:
          description: Name of the ERC20 token
          example: MyERC20
          maxLength: 100
          minLength: 1
          pattern: ^[a-zA-Z0-9_]+$
          type: string
        totalCap:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        supply:
          description: Max supply of ERC20 token.
          maxLength: 38
          example: '10000000'
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
          type: string
        digits:
          description: Number of decimal points
          example: 18
          maximum: 30
          minimum: 1
          type: number
        address:
          description: >-
            Address on Ethereum blockchain, where all created ERC20 tokens will
            be transferred.
          maxLength: 42
          minLength: 42
          example: '0xa0Ca9FF38Bad06eBe64f0fDfF279cAE35129F5C6'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - name
        - symbol
        - address
        - supply
        - signatureId
        - digits
        - feeCurrency
    ChainMintErc20:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - XDC
            - ONE
        amount:
          description: Amount to be minted and transferred to the recipient.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        to:
          maxLength: 43
          minLength: 42
          description: Blockchain address to send ERC-20 tokens to.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC-20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - to
        - amount
        - contractAddress
        - fromPrivateKey
    ChainMintKcsErc20:
      type: object
      properties:
        chain:
          type: string
          example: KCS
          description: The blockchain to work with
          enum:
            - KCS
        amount:
          description: Amount to be minted and transferred to the recipient.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        to:
          maxLength: 43
          minLength: 42
          description: Blockchain address to send ERC-20 tokens to.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC-20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - to
        - amount
        - contractAddress
        - fromPrivateKey
    ChainMintErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - XDC
            - ONE
        amount:
          description: Amount to be minted and transferred to the recipient.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        to:
          maxLength: 43
          minLength: 42
          description: Blockchain address to send ERC-20 tokens to.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC-20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - to
        - amount
        - contractAddress
        - signatureId
    ChainMintKcsErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: KCS
          description: The blockchain to work with
          enum:
            - KCS
        amount:
          description: Amount to be minted and transferred to the recipient.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        to:
          maxLength: 43
          minLength: 42
          description: Blockchain address to send ERC-20 tokens to.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC-20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - to
        - amount
        - contractAddress
        - signatureId
    ChainMintCeloErc20:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        amount:
          description: Amount to be minted and transferred to the recipient.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC-20 tokens to.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC-20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - amount
        - feeCurrency
        - contractAddress
        - fromPrivateKey
    ChainMintCeloErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        amount:
          description: Amount to be minted and transferred to the recipient.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send ERC-20 tokens to.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC-20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - amount
        - feeCurrency
        - contractAddress
        - signatureId
    ApproveErc20:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - ONE
        contractAddress:
          maxLength: 43
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        spender:
          maxLength: 43
          minLength: 42
          description: >-
            The blockchain address to be allowed to transfer or burn the
            fungible tokens
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the tokens allowed to be transferred or burnt
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the smart contract's owner; the fee will be
            deducted from the owner's address
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - spender
        - amount
        - contractAddress
        - fromPrivateKey
    ApproveErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - ONE
        contractAddress:
          maxLength: 43
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        spender:
          maxLength: 43
          minLength: 42
          description: >-
            The blockchain address to be allowed to transfer or burn the
            fungible tokens
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the tokens allowed to be transferred or burnt
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the smart contract's owner;
            the fee will be deducted from the owner's address
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - spender
        - amount
        - contractAddress
        - signatureId
    ApproveCeloErc20:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address to be allowed to transfer or burn the
            fungible tokens
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the tokens allowed to be transferred or burnt
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the smart contract's owner; the fee will be
            deducted from the owner's address
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - spender
        - amount
        - feeCurrency
        - contractAddress
        - fromPrivateKey
    ApproveCeloErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The address of the smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        spender:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address to be allowed to transfer or burn the
            fungible tokens
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the tokens allowed to be transferred or burnt
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the smart contract's owner;
            the fee will be deducted from the owner's address
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - spender
        - amount
        - feeCurrency
        - contractAddress
        - signatureId
    ChainBurnErc20:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - XDC
            - ONE
        amount:
          description: Amount of tokens to be destroyed.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - contractAddress
        - fromPrivateKey
        - amount
    ChainBurnErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - XDC
            - ONE
        amount:
          description: Amount of tokens to be destroyed.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - contractAddress
        - signatureId
        - amount
    ChainBurnKcsErc20:
      type: object
      properties:
        chain:
          type: string
          example: KCS
          description: The blockchain to work with
          enum:
            - KCS
        amount:
          description: Amount of tokens to be destroyed.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - contractAddress
        - fromPrivateKey
        - amount
    ChainBurnKcsErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: KCS
          description: The blockchain to work with
          enum:
            - KCS
        amount:
          description: Amount of tokens to be destroyed.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - contractAddress
        - signatureId
        - amount
    ChainBurnCeloErc20:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        amount:
          description: Amount of tokens to be destroyed.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - contractAddress
        - feeCurrency
        - fromPrivateKey
        - amount
    ChainBurnCeloErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        amount:
          description: Amount of tokens to be destroyed.
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        fee:
          $ref: '#/components/schemas/CustomFee'
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - contractAddress
        - feeCurrency
        - signatureId
        - amount
    ChainTransferAlgoErc20:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        to:
          maxLength: 58
          minLength: 42
          description: The blockchain address to send the fungible tokens to
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        contractAddress:
          maxLength: 43
          minLength: 1
          description: The asset ID (the ID of the fungible tokens)
          example: '1'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: The number of decimal places that the fungible tokens have
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 103
          example: >-
            72TCV5BRQPBMSAFPYO3CPWVDBYWNGAYNMTW5QHENOMQF7I6QLNMJWCJZ7A3V5YKD7QD6ZZPEHG2PV2ZVVEDDO6BCRGXWIL3DIUMSUCI
          minLength: 103
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
      required:
        - chain
        - to
        - contractAddress
        - amount
        - digits
        - fromPrivateKey
    ChainTransferAlgoErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        to:
          maxLength: 58
          minLength: 42
          description: The blockchain address to send the fungible tokens to
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
          type: string
        from:
          maxLength: 58
          minLength: 58
          description: The blockchain address to send the fungible tokens from
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        contractAddress:
          maxLength: 43
          minLength: 1
          description: The asset ID (the ID of the fungible tokens)
          example: '1'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: The number of decimal places that the fungible tokens have
          example: 18
          maximum: 30
          minimum: 1
          type: number
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
      required:
        - chain
        - currency
        - to
        - contractAddress
        - signatureId
        - amount
        - from
    ChainBurnAlgoErc20:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: Chain to work with.
          enum:
            - ALGO
        contractAddress:
          maxLength: 43
          minLength: 1
          description: assetIndex - asset index uniquely specifying the asset
          example: '1'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 103
          example: >-
            72TCV5BRQPBMSAFPYO3CPWVDBYWNGAYNMTW5QHENOMQF7I6QLNMJWCJZ7A3V5YKD7QD6ZZPEHG2PV2ZVVEDDO6BCRGXWIL3DIUMSUCI
          minLength: 103
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
      required:
        - chain
        - contractAddress
        - fromPrivateKey
    ChainBurnAlgoErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: Chain to work with.
          enum:
            - ALGO
        from:
          maxLength: 58
          minLength: 58
          description: Blockchain address to send ERC20 token from
          example: NTAESFCB3WOD7SAOL42KSPVARLB3JFA3MNX3AESWHYVT2RMYDVZI6YLG4Y
          type: string
        contractAddress:
          maxLength: 43
          minLength: 1
          description: assetIndex - asset index uniquely specifying the asset
          example: '1'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
      required:
        - chain
        - contractAddress
        - signatureId
        - from
    ChainTransferEthErc20:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - XDC
            - ONE
        to:
          maxLength: 50
          minLength: 1
          description: The blockchain address to send the fungible tokens to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 43
          minLength: 42
          description: The blockchain address of the fungible token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: >-
            The number of decimal places that the fungible tokens have; to find
            out how many decimal places are used in the fungible tokens, check
            out the <a
            href="https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress"
            target="_blank">smart contract</a>
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - currency
        - to
        - contractAddress
        - digits
        - fromPrivateKey
        - amount
    ChainTransferSolanaSpl:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        from:
          description: The blockchain address to send the fungible tokens from
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        to:
          description: The blockchain address to send the fungible tokens to
          maxLength: 44
          minLength: 32
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the fungible tokens
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: The number of decimal places that the fungible tokens have
          example: 18
          maximum: 30
          minimum: 0
          type: number
        fromPrivateKey:
          type: string
          maxLength: 87
          example: >-
            YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf
          minLength: 128
          description: >-
            The private key of the blockchain address that you are sending the
            fungible tokens from (the address that you specified in the
            <code>from</code> parameter); the transaction fee will be deducted
            from this address
        feePayer:
          description: >-
            The blockchain address from which the fee will be deducted; if not
            set, defaults to the address that you specified in the
            <code>from</code> parameter
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        feePayerPrivateKey:
          type: string
          maxLength: 87
          example: >-
            YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf
          minLength: 128
          description: >-
            The private key of the blockchain address that you specified in the
            <code>feePayer</code> parameter; if not set, defaults to the private
            key that you specified in the <code>fromPrivateKey</code> parameter
      required:
        - chain
        - currency
        - to
        - contractAddress
        - digits
        - fromPrivateKey
        - from
        - amount
    ChainTransferSolanaSplKMS:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        from:
          description: The blockchain address to send the fungible tokens from
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        to:
          description: The blockchain address to send the fungible tokens to
          maxLength: 44
          minLength: 32
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the fungible tokens
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: The number of decimal places that the fungible tokens have
          example: 18
          maximum: 30
          minimum: 0
          type: number
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            you are sending the fungible tokens from (the address that you
            specified in the <code>from</code> parameter); the transaction fee
            will be deducted from this address
        feePayer:
          description: >-
            The blockchain address from which the fee will be deducted; if not
            set, defaults to the address that you specified in the
            <code>from</code> parameter
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        feePayerSignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            you specified in the <code>feePayer</code> parameter; if not set,
            defaults to the signature ID that you specified in the
            <code>signatureId</code> parameter
      required:
        - chain
        - currency
        - to
        - contractAddress
        - digits
        - signatureId
        - from
        - amount
    ChainTransferEthErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - MATIC
            - KLAY
            - XDC
            - ONE
        to:
          maxLength: 50
          minLength: 1
          description: The blockchain address to send the fungible tokens to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 43
          minLength: 42
          description: The blockchain address of the fungible token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: >-
            The number of decimal places that the fungible tokens have; to find
            out how many decimal places are used in the fungible tokens, check
            out the <a
            href="https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress"
            target="_blank">smart contract</a>
          example: 18
          maximum: 30
          minimum: 1
          type: number
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - currency
        - to
        - contractAddress
        - digits
        - signatureId
        - amount
    ChainTransferKcsEthErc20:
      type: object
      properties:
        chain:
          type: string
          example: KCS
          description: The blockchain to work with
          enum:
            - KCS
        to:
          maxLength: 50
          minLength: 1
          description: The blockchain address to send the fungible tokens to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 43
          minLength: 42
          description: The blockchain address of the fungible token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: The number of decimal places that the fungible tokens have
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - currency
        - to
        - contractAddress
        - digits
        - fromPrivateKey
        - amount
    ChainTransferKcsEthErc20KMS:
      type: object
      properties:
        chain:
          type: string
          example: KCS
          description: The blockchain to work with
          enum:
            - KCS
        to:
          maxLength: 50
          minLength: 1
          description: The blockchain address to send the fungible tokens to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 43
          minLength: 42
          description: The blockchain address of the fungible token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: The number of decimal places that the fungible tokens have
          example: 18
          maximum: 30
          minimum: 1
          type: number
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - currency
        - to
        - contractAddress
        - digits
        - signatureId
        - amount
    ChainTransferBscBep20:
      type: object
      properties:
        chain:
          type: string
          example: BSC
          description: The blockchain to work with
          enum:
            - BSC
        to:
          maxLength: 50
          minLength: 1
          description: The blockchain address to send the fungible tokens to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the fungible tokens
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: >-
            The number of decimal places that the fungible tokens have; to find
            out how many decimal places are used in the fungible tokens, check
            out the <a
            href="https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress"
            target="_blank">smart contract</a>
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - digits
        - fromPrivateKey
        - amount
    ChainTransferBscBep20KMS:
      type: object
      properties:
        chain:
          type: string
          example: BSC
          description: The blockchain to work with
          enum:
            - BSC
        to:
          maxLength: 50
          minLength: 1
          description: The blockchain address to send the fungible tokens to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the fungible tokens
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: >-
            The number of decimal places that the fungible tokens have; to find
            out how many decimal places are used in the fungible tokens, check
            out the <a
            href="https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress"
            target="_blank">smart contract</a>
          example: 18
          maximum: 30
          minimum: 1
          type: number
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - digits
        - signatureId
        - amount
    ChainTransferCeloErc20Token:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        to:
          maxLength: 50
          minLength: 1
          description: The blockchain address to send the fungible tokens to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the fungible token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: >-
            The number of decimal places that the fungible tokens have; to find
            out how many decimal places are used in the fungible tokens, check
            out the <a
            href="https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress"
            target="_blank">smart contract</a>
          example: 18
          maximum: 30
          minimum: 1
          type: number
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - digits
        - feeCurrency
        - fromPrivateKey
        - amount
    ChainTransferCeloErc20TokenKMS:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        to:
          maxLength: 50
          minLength: 1
          description: The blockchain address to send the fungible tokens to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the fungible token smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        amount:
          description: The amount of the fungible tokens to be sent
          example: '100000'
          type: string
          pattern: ^[+]?((\d+(\.\d*)?)|(\.\d+))$
        digits:
          description: >-
            The number of decimal places that the fungible tokens have; to find
            out how many decimal places are used in the fungible tokens, check
            out the <a
            href="https://apidoc.tatum.io/tag/Blockchain-utils#operation/SCGetContractAddress"
            target="_blank">smart contract</a>
          example: 18
          maximum: 30
          minimum: 1
          type: number
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - digits
        - feeCurrency
        - signatureId
        - amount
    ChainCallSmartContractMethod:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - BSC
            - XDC
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of ERC20 token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        methodName:
          minLength: 1
          maxLength: 500
          description: Name of the method to invoke on smart contract.
          type: string
          example: transfer
        methodABI:
          type: object
          description: ABI of the method to invoke.
        params:
          type: array
          example:
            - '0x632'
          items:
            type: string
          description: Parameters of the method to be invoked.
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - params
        - methodABI
        - fromPrivateKey
        - methodName
    NftMetadataErc721:
      type: object
      properties:
        data:
          type: string
          description: Metadata associated with token.
          example: https://my_token_data.com
    NftMetadataErc721OnchainSolana:
      type: object
      properties:
        onchainData:
          type: object
          description: (Solana) Metadata associated with token.
          properties:
            name:
              type: string
              example: My token
            symbol:
              type: string
              example: symbol
            uri:
              type: string
              example: http://google.com
    NftMetadataErc721OnchainFlow:
      type: array
      description: (Flow) Token ids
      items:
        type: string
        example: '3654'
    NftMetadataErc721OnchainAlgo:
      type: object
      properties:
        onchainData:
          type: string
          description: (ALGO) Metadata associated with token.
          example: https://my_token_data.com
    NftRoyaltyErc721:
      type: object
      properties:
        addresses:
          type: array
          description: >-
            The blockchain addresses where the royalty cashback will be sent
            every time the NFT is transferred
          items:
            type: string
            example: '0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326'
        values:
          type: array
          description: >
            The amounts of the royalties that will be paid to the authors of the
            NFT every time the NFT is transferred; the royalties are paid as a
            percentage of the NFT price (on Solana) or in a native blockchain
            currency (on the other supported blockchains)
          items:
            type: string
            example: '0.2'
    NftTokenByAddressErc721:
      type: object
      required:
        - contractAddress
        - balances
        - metadata
      properties:
        contractAddress:
          type: string
          example: '43821281'
          description: >-
            On Algorand, this is the asset ID (the ID of the NFT); on the other
            blockchains, this is the address of the NFT smart contract.
        balances:
          type: array
          description: >-
            On Algorand, this is either an array of "1" to indicate that the
            NFTs with the specified IDs exist, or an array with the number of
            NFT fractions if the NFTs are <a
            href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
            target="_blank">fractional</a>; on the other blockchains, this is an
            array of the IDs of the NFTs.
          items:
            type: string
            maxLength: 78
            example: '123'
            format: uint256
        blockNumber:
          type: array
          description: >-
            (EVM-based blockchains only) An array of the numbers of the blocks
            in which the NFT was received by the address
          items:
            type: number
            example: 13816552
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/NftTokenByAddressErc721TokenMetadata'
        supply:
          type: number
          example: 10
          description: >-
            (Algorand only) The number of fractions in the NFT if the NFT is <a
            href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
            target="_blank">fractional</a>
        decimals:
          type: number
          example: 1
          description: >-
            (Algorand only) The number of decimal places in an NFT fraction if
            the NFT is <a
            href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
            target="_blank">fractional</a>
    NftTokenByAddressErc721TokenMetadata:
      type: object
      properties:
        tokenId:
          description: (EVM-based blockchains only) The ID of the NFT owned by this address
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; the URL may not be present,
            and if it is not returned, you can get it by calling the NFT
            Contract.tokenURI() method
          example: ipfs://QmXFpaS3S7CkLZvihLFA9JbawKdqhjg8dJeDkPntmkD2Pc
          type: string
        metadata:
          $ref: '#/components/schemas/NftTokenByAddressErc721Metadata'
    NftTokenByAddressErc721Metadata:
      type: object
      description: >-
        The metadata scheme obtained from the metadata URL; the scheme may not
        be present, and if it is not returned, you can get it using the <a
        href="#operation/NftGetMetadataErc721">NFT metadata API</a>
      example:
        name: Example NFT name
        description: Example NFT description
        image: ipfs://QmP4R7ACZ7JRQ6sLdmnPHqjWEXxzdnPvhAV2f6RnQ8uxJ6
    NftTokenByCollectionErc721:
      type: object
      required:
        - tokenId
      properties:
        tokenId:
          description: ID of the token.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        metadata:
          $ref: '#/components/schemas/NftTokenByCollectionErc721TokenMetadata'
    NftTokenByCollectionErc721TokenMetadata:
      type: object
      required:
        - tokenID
      properties:
        tokenId:
          description: TokenID of the NFT token owned by this address.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        url:
          description: >-
            Metadata URL of the TokenID. This data don't have to be present,
            safest way (if not present) is to obtain them from the NFT
            Contract.tokenURI() method call.
          example: ipfs://QmXFpaS3S7CkLZvihLFA9JbawKdqhjg8dJeDkPntmkD2Pc
          type: string
        metadata:
          type: object
          description: >-
            Metadata scheme obtained from the url. This data don't have to be
            present, safest way (if not present) is to obtain them from the NFT
            Contract.tokenURI() method call.
          example:
            name: Example NFT name
            description: Example NFT description
            image: ipfs://QmP4R7ACZ7JRQ6sLdmnPHqjWEXxzdnPvhAV2f6RnQ8uxJ6
    TransferNftCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send NFT token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of the token.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - tokenId
        - fromPrivateKey
        - feeCurrency
    TransferNftTezos:
      type: object
      properties:
        chain:
          type: string
          example: TEZOS
          description: The blockchain to work with
          enum:
            - TEZOS
        from:
          maxLength: 36
          minLength: 36
          description: Blockchain address that owns the NFT token
          example: tz1LszyhzQS6JgySBSNkM55szM18inGwEgPa
          type: string
        to:
          maxLength: 36
          minLength: 36
          description: Blockchain address to send NFT token to
          example: tz1LszyhzQS6JgySBSNkM55szM18inGwEgPa
          type: string
        contractAddress:
          maxLength: 36
          minLength: 36
          description: The blockchain address of the NFT smart contract
          example: KT1PemxAAhNkjvt49gBtFHn4JEm49Z3HA8TX
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            edskRvJQqeNih91dkoRkTG1PWxV5AruYbtrkp5DKibL2iMkPGWBbdYp8jpsY3N3skCNrwf9socTv9Sstonkckc4jTb
          minLength: 64
          description: >-
            The private key of the blockchain address that owns the token or has
            rights to transfer the token. This address will pay the fee for the
            transaction,
      required:
        - chain
        - from
        - to
        - tokenId
        - contractAddress
        - fromPrivateKey
    TransferNftTron:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        to:
          maxLength: 34
          minLength: 34
          description: Blockchain address to send NFT token to
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        tokenId:
          description: ID of the token.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of NFT token
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          description: The maximum amount to be paid as the transaction fee (in TRX)
          example: 600
      required:
        - chain
        - to
        - contractAddress
        - tokenId
        - fromPrivateKey
        - feeLimit
    FlowMintedMultipleResult:
      type: object
      properties:
        txId:
          type: string
          description: Transaction ID
          example: d67787399d205139f4d6f42c2aa4fffdf6f247411fae3706e874fbba0ce04b1b
        tokenId:
          type: array
          items:
            description: ID of the minted token.
            type: string
            maxLength: 78
            example: '123'
            format: uint256
    FlowMintedResult:
      type: object
      properties:
        txId:
          type: string
          description: Transaction ID
          example: d67787399d205139f4d6f42c2aa4fffdf6f247411fae3706e874fbba0ce04b1b
        tokenId:
          description: ID of the token.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
    SolanaMintedResult:
      type: object
      properties:
        txId:
          type: string
          description: The ID of the transaction
          example: >-
            4kiRkAWjjr5t3rBKmYQ5d2e3xjgnRRttB5GtUz2F4sz5wwC7NnV74qCZ1KN1b37qsnjkKknsJPGXdcPhzHpkiMAs
        nftAddress:
          type: string
          description: The blockchain address of the minted NFT
          example: 4afZBmAneN2j6gDHH8zdrNWkCqfMC3XPH2cpFKtYMSVe
        nftAccountAddress:
          type: string
          description: >-
            The blockchain address that received the minted NFT; this address
            was created under the recipient's account address (the one in the
            <code>to</code> parameter of the request body), is owned by the
            recipient's address, and has the same private key
          example: A8BSHPJcB5ZGCT6yo6pz2RYqnypTSpzTAFSBhtTQmsEE
    AlgorandMintedResult:
      type: object
      properties:
        txId:
          type: string
          description: The ID of the transaction
          example: HQ32RQPJ7EAASLHPG5TTQEGETOEMN7BPND2TQMUMZWLIZBJWJ23A
        assetIndex:
          type: number
          description: The ID of the minted NFT
          example: 88885810
        confirmed:
          type: boolean
          description: >-
            If set to "true", the transaction was included in the block within
            five rounds; otherwise, returned set to "false". "false" does not
            mean that the transaction was not included in the block; the Tatum
            API just does not wait for that much time to return the response.
          example: true
    MintMultipleNftCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '123'
          items:
            type: string
            maxLength: 78
            example: '123'
            format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          type: array
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - url
        - fromPrivateKey
        - feeCurrency
        - tokenId
    MintMultipleNftTron:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          items:
            maxLength: 34
            minLength: 34
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '123'
          items:
            type: string
            maxLength: 78
            example: '123'
            format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          type: array
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of NFT token
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          description: The maximum amount to be paid as the transaction fee (in TRX)
          example: 600
      required:
        - chain
        - to
        - contractAddress
        - url
        - fromPrivateKey
        - feeLimit
        - tokenId
    DeployNftCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        name:
          description: Name of the NFT token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        publicMint:
          description: True if the contract is publicMint type. False by default.
          example: true
          type: boolean
        symbol:
          description: Symbol of the NFT token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        fromPrivateKey:
          description: >-
            Private key of account address, from which gas for deployment of
            ERC721 will be paid. Private key, or signature Id must be present.
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - name
        - symbol
        - feeCurrency
        - fromPrivateKey
    DeployNftTezos:
      type: object
      properties:
        chain:
          type: string
          example: TEZOS
          description: The blockchain to work with
          enum:
            - TEZOS
        ownerAddress:
          description: >-
            Public address that will be admin of the contract. Must be a valid
            address of the Tezos blockchain.
          example: tz1cCRCbBwnazV6howgD84a6fuhikKTnsWHZ
          type: string
        metadata:
          description: >-
            Object of key-value pairs representing metadata of the contract.
            Keys must be strings, values can be strings, numbers, or booleans.
          example:
            name: My NFT
          type: object
        fromPrivateKey:
          description: >-
            Private key of account address, from which fee and storage costs for
            deployment of Tzip12 contract will be paid.
          type: string
          example: >-
            edskRvJQqeNih91dkoRkTG1PWxV5AruYbtrkp5DKibL2iMkPGWBbdYp8jpsY3N3skCNrwf9socTv9Sstonkckc
      required:
        - chain
        - ownerAddress
        - metadata
        - fromPrivateKey
    DeployNftTron:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        name:
          description: Name of the NFT token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        symbol:
          description: Symbol of the NFT token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        fromPrivateKey:
          description: >-
            Private key of account address, from which gas for deployment of
            ERC721 will be paid. Private key, or signature Id must be present.
          type: string
          maxLength: 64
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
          minLength: 64
        feeLimit:
          type: number
          description: >-
            The maximum amount to be paid as the transaction fee (in TRX);
            deployment of a smart contract on TRON costs around 580 TRX
          example: 600
      required:
        - chain
        - name
        - symbol
        - feeLimit
        - fromPrivateKey
    DeployNftCeloKMS:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        name:
          description: Name of the NFT token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        symbol:
          description: Symbol of the NFT token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
        publicMint:
          description: True if the contract is publicMint type. False by default.
          example: true
          type: boolean
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - name
        - symbol
        - feeCurrency
        - signatureId
    DeployNftTronKMS:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        from:
          maxLength: 34
          minLength: 34
          description: Blockchain address to perform transaction from
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        name:
          description: Name of the NFT token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        symbol:
          description: Symbol of the NFT token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        feeLimit:
          type: number
          description: >-
            The maximum amount to be paid as the transaction fee (in TRX);
            deployment of a smart contract on TRON costs around 580 TRX
          example: 600
      required:
        - chain
        - name
        - from
        - symbol
        - feeLimit
        - signatureId
    MintMultipleNftKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '123'
          items:
            type: string
            maxLength: 78
            example: '123'
            format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          type: array
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
          minimum: 0
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - feeCurrency
        - tokenId
        - url
        - signatureId
    MintMultipleNftKMSTron:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          items:
            maxLength: 34
            minLength: 34
            type: string
        from:
          maxLength: 34
          minLength: 34
          description: Blockchain address to perform transaction from
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '123'
          items:
            type: string
            maxLength: 78
            example: '123'
            format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          type: array
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of NFT token
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        feeLimit:
          type: number
          description: The maximum amount to be paid as the transaction fee (in TRX)
          example: 600
      required:
        - chain
        - to
        - from
        - contractAddress
        - feeLimit
        - tokenId
        - url
        - signatureId
    BurnNftCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        tokenId:
          description: ID of token to be destroyed.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - contractAddress
        - feeCurrency
        - fromPrivateKey
        - tokenId
    BurnNftTezos:
      type: object
      properties:
        chain:
          type: string
          example: TEZOS
          description: The blockchain to work with
          enum:
            - TEZOS
        tokenId:
          description: ID of token to be destroyed.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: KT1KVGCm3WTQndN8WLvdYWAaCJheWj7oudY7
          type: string
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            edskRvJQqeNih91dkoRkTG1PWxV5AruYbtrkp5DKibL2iMkPGWBbdYp8jpsY3N3skCNrwf9socTv9Sstonkckc4
          minLength: 66
          description: Private key of sender address.
        ownerAddress:
          maxLength: 36
          minLength: 36
          description: >-
            Public address of the owner. Owner is admin and minter of the token.
            Must be a valid address of the Tezos blockchain.
          example: tz1cCRCbBwnazV6howgD84a6fuhikKTnsWHZ
          type: string
      required:
        - chain
        - tokenId
        - contractAddress
        - fromPrivateKey
        - ownerAddress
    BurnNftAlgo:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        contractAddress:
          maxLength: 42
          minLength: 42
          description: >-
            The ID of the NFT to burn; this is the ID from the
            <code>assetIndex</code> parameter returned in the response body of
            the <a href="#operation/NftMintErc721">minting call</a>
          example: '116363571'
          type: string
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
        fromPrivateKey:
          type: string
          maxLength: 103
          example: >-
            46OPDKNDLB35M3QMRRZEAW2HDTDT2LFHRUCHDE5FJZAJOV7GDPCC6AYZ6KCUULTHA4QL6YPHN2PNEXHPJMUZGHYJXQK6SUL2HQ2MLXQ
          minLength: 103
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
      required:
        - chain
        - contractAddress
        - fromPrivateKey
    BurnNftAlgoKMS:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        contractAddress:
          maxLength: 265
          description: >-
            The ID of the NFT to burn; this is the ID from the
            <code>assetIndex</code> parameter returned in the response body of
            the <a href="#operation/NftMintErc721">minting call</a>
          example: '116363571'
          type: string
        from:
          maxLength: 58
          minLength: 58
          description: Blockchain address to burn NFT token from
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
          type: string
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
      required:
        - chain
        - contractAddress
        - signatureId
        - from
    BurnNftTron:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        tokenId:
          description: ID of token to be destroyed.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of NFT token
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
          minLength: 64
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        feeLimit:
          type: number
          description: The maximum amount to be paid as the transaction fee (in TRX)
          example: 600
      required:
        - chain
        - contractAddress
        - feeLimit
        - fromPrivateKey
        - tokenId
    BurnNftSolana:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        from:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address to send the NFT from; this is the address
            that you used in the <code>to</code> parameter in the request body
            of the <a href="#operation/NftMintErc721">minting call</a>; from
            this address, the transaction fee will be paid
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the NFT; this is the address from the
            <code>nftAddress</code> parameter returned in the response body of
            the <a href="#operation/NftMintErc721">minting call</a>
          example: 3tzudv5KaoqmieWiBUqzWokKEtTvx1wQMapVKeH7CHaq
          type: string
        collection:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the NFT collection
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad
          minLength: 128
          description: >-
            The private key of the blockchain address that you are sending the
            NFT from (the address that you specified in the <code>from</code>
            parameter)
        feePayer:
          description: >-
            Address on the Solana blockchain, from which the fee will be paid
            for transaction. Defaults to from.
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        feePayerPrivateKey:
          type: string
          maxLength: 87
          example: >-
            YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf
          minLength: 128
          description: Private key of the fee payer address.
      required:
        - from
        - chain
        - contractAddress
        - fromPrivateKey
    BurnNftSolanaKMS:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        from:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address to send the NFT from; this is the address
            that you used in the <code>to</code> parameter in the request body
            of the <a href="#operation/NftMintErc721">minting call</a>; from
            this address, the transaction fee will be paid
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the NFT; this is the address from the
            <code>nftAddress</code> parameter returned in the response body of
            the <a href="#operation/NftMintErc721">minting call</a>
          example: 3tzudv5KaoqmieWiBUqzWokKEtTvx1wQMapVKeH7CHaq
          type: string
        collection:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the NFT collection
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        feePayer:
          description: Blockchain address to pay the fee for the transaction from
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        feePayerSignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key used for paying the gas costs in
            signing application. Defaults to the signatureId.
      required:
        - from
        - chain
        - contractAddress
        - signatureId
    BurnNftKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        tokenId:
          description: ID of token to be destroyed.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - feeCurrency
        - contractAddress
        - tokenId
        - signatureId
    BurnNftKMSTron:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        from:
          maxLength: 34
          minLength: 34
          description: Blockchain address to perform transaction from
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        tokenId:
          description: ID of token to be destroyed.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of NFT token
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        feeLimit:
          type: number
          description: The maximum amount to be paid as the transaction fee (in TRX)
          example: 600
      required:
        - chain
        - feeLimit
        - contractAddress
        - tokenId
        - signatureId
        - from
    BurnNftFlowPK:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        tokenId:
          description: ID of token to be destroyed.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        privateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, mnemonic and index or
            signature Id must be present.
      required:
        - chain
        - contractAddress
        - account
        - privateKey
        - tokenId
    BurnNftFlowMnemonic:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        tokenId:
          description: ID of token to be destroyed.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        mnemonic:
          type: string
          maxLength: 500
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          minLength: 1
          description: Mnemonic to generate private key of sender address.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - contractAddress
        - account
        - mnemonic
        - index
        - tokenId
    BurnNftFlowKMS:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        tokenId:
          description: ID of token to be destroyed.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - contractAddress
        - account
        - signatureId
        - tokenId
    MintMultipleNftFlowPK:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - '0xc1b45bc27b9c61c3'
          items:
            maxLength: 18
            minLength: 18
            type: string
        url:
          type: array
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        privateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, mnemonic and index or
            signature Id must be present.
      required:
        - chain
        - contractAddress
        - account
        - privateKey
        - to
        - url
    MintMultipleNftFlowMnemonic:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - '0xc1b45bc27b9c61c3'
          items:
            maxLength: 18
            minLength: 18
            type: string
        url:
          type: array
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        mnemonic:
          type: string
          maxLength: 500
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          minLength: 1
          description: Mnemonic to generate private key of sender address.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - contractAddress
        - account
        - mnemonic
        - index
        - to
        - url
    MintMultipleNftFlowKMS:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - '0xc1b45bc27b9c61c3'
          items:
            maxLength: 18
            minLength: 18
            type: string
        url:
          type: array
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - contractAddress
        - account
        - signatureId
        - to
        - url
    MintNftFlowPK:
      description: >-
        <p>The <code>MintNftFlowPK</code> schema lets you mint NFTs natively on
        Flow and sign the transaction with your private key.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        to:
          type: string
          description: Blockchain address to send NFT token to.
          example: '0xc1b45bc27b9c61c3'
          maxLength: 18
          minLength: 18
        url:
          type: string
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          maxLength: 256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        privateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, mnemonic and index or
            signature Id must be present.
      required:
        - chain
        - contractAddress
        - account
        - privateKey
        - to
        - url
    MintNftFlowMnemonic:
      description: >-
        <p>The <code>MintNftFlowMnemonic</code> schema lets you mint NFTs
        natively on Flow and sign the transaction with your wallet
        mnemonic.<br/>For more information, see "Minting NFTs natively on a
        blockchain" in <a href="#operation/NftMintErc721">Mint an
        NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        to:
          type: string
          description: Blockchain address to send NFT token to.
          example: '0xc1b45bc27b9c61c3'
          maxLength: 18
          minLength: 18
        url:
          type: string
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          maxLength: 256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        mnemonic:
          type: string
          maxLength: 500
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          minLength: 1
          description: Mnemonic to generate private key of sender address.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - contractAddress
        - account
        - mnemonic
        - index
        - to
        - url
    MintNftFlowKMS:
      description: >-
        <p>The <code>MintNftFlowKMS</code> schema lets you mint NFTs natively on
        Flow and sign the transaction with your signature ID.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        to:
          type: string
          description: Blockchain address to send NFT token to.
          example: '0xc1b45bc27b9c61c3'
          maxLength: 18
          minLength: 18
        url:
          type: string
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          maxLength: 256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - contractAddress
        - account
        - signatureId
        - to
        - url
    DeployNftFlowPK:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        privateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, mnemonic and index or
            signature Id must be present.
      required:
        - chain
        - account
        - privateKey
    DeployNftFlowMnemonic:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        mnemonic:
          type: string
          maxLength: 500
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          minLength: 1
          description: Mnemonic to generate private key of sender address.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - account
        - mnemonic
        - index
    DeployNftFlowKMS:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - account
        - signatureId
    TransferNftFlowPK:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        to:
          type: string
          description: Blockchain address to send NFT token to.
          example: '0xc1b45bc27b9c61c3'
          maxLength: 18
          minLength: 18
        tokenId:
          description: ID of token to be sent.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        privateKey:
          type: string
          maxLength: 64
          example: 05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2
          minLength: 64
          description: >-
            Private key of sender address. Private key, mnemonic and index or
            signature Id must be present.
      required:
        - chain
        - contractAddress
        - account
        - privateKey
        - to
        - tokenId
    TransferNftFlowMnemonic:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        to:
          type: string
          description: Blockchain address to send NFT token to.
          example: '0xc1b45bc27b9c61c3'
          maxLength: 18
          minLength: 18
        tokenId:
          description: ID of token to be sent.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        mnemonic:
          type: string
          maxLength: 500
          example: >-
            urge pulp usage sister evidence arrest palm math please chief egg
            abuse
          minLength: 1
          description: Mnemonic to generate private key of sender address.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - contractAddress
        - account
        - mnemonic
        - index
        - to
        - tokenId
    TransferNftFlowKMS:
      type: object
      properties:
        chain:
          type: string
          example: FLOW
          description: The blockchain to work with
          enum:
            - FLOW
        to:
          type: string
          description: Blockchain address to send NFT token to.
          example: '0xc1b45bc27b9c61c3'
          maxLength: 18
          minLength: 18
        tokenId:
          description: ID of token to be sent.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: Address of NFT token
          example: 17a50dad-bcb1-4f3d-ae2c-ea2bfb04419f
          type: string
        account:
          type: string
          maxLength: 18
          example: '0xc1b45bc27b9c61c3'
          minLength: 18
          description: Blockchain address of the sender account.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        index:
          description: Derivation index of sender address.
          example: 0
          type: integer
          maximum: 2147483647
      required:
        - chain
        - contractAddress
        - account
        - signatureId
        - to
        - tokenId
    NftTx:
      type: object
      properties:
        blockNumber:
          type: number
          example: 6541235
          description: Block number
        txId:
          type: string
          example: '0x955c1037608c7aecb6d1a3f150ce7d0a80536bcabb0deb69d62f55292cc4c372'
          description: Transaction ID
        contractAddress:
          type: string
          example: '0x4f54fAD27F7F46C102Cd49b8E75C5593397cd9c3'
          description: Contract address
        tokenId:
          description: ID of the token.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        from:
          type: string
          example: '0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d'
          description: Sender
        to:
          type: string
          example: '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'
          description: recipient
      required:
        - blockNumber
        - txId
        - contractAddress
        - tokenId
        - from
        - to
    TransferNftKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send NFT token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of the token.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - chain
        - to
        - contractAddress
        - feeCurrency
        - signatureId
        - tokenId
    TransferNftKMSTron:
      type: object
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        from:
          maxLength: 34
          minLength: 34
          description: Blockchain address to perform transaction from
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        to:
          maxLength: 34
          minLength: 34
          description: Blockchain address to send NFT token to
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        tokenId:
          description: ID of the token.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 34
          minLength: 34
          description: Address of NFT token
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        feeLimit:
          type: number
          description: The maximum amount to be paid as the transaction fee (in TRX)
          example: 600
      required:
        - chain
        - to
        - contractAddress
        - feeLimit
        - signatureId
        - tokenId
        - from
    MintNftCelo:
      description: >-
        <p>The <code>MintNftCelo</code> schema lets you mint NFTs natively on
        Celo and sign the transaction with your private key.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: The blockchain address to send the NFT to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the smart contract to build the NFT on
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        feeCurrency:
          type: string
          default: CELO
          description: The currency in which the transaction fee will be paid.
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that will pay the fee for
            the transaction
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - to
        - url
        - tokenId
        - contractAddress
        - fromPrivateKey
    MintNftTron:
      type: object
      description: >-
        <p>The <code>MintNftTron</code> schema lets you mint NFTs natively on
        TRON and sign the transaction with your private key.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        to:
          maxLength: 34
          minLength: 34
          description: The blockchain address to send the NFT to
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: The blockchain address of the smart contract to build the NFT on
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        feeLimit:
          type: number
          description: The maximum amount to be paid as the transaction fee (in TRX)
          example: 600
        fromPrivateKey:
          type: string
          maxLength: 64
          example: 842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701
          minLength: 64
          description: >-
            The private key of the blockchain address that will pay the fee for
            the transaction
      required:
        - chain
        - to
        - url
        - feeLimit
        - contractAddress
        - fromPrivateKey
        - tokenId
    MintNftKMSCelo:
      description: >-
        <p>The <code>MintNftKMSCelo</code> schema lets you mint NFTs natively on
        Celo and sign the transaction with your signature ID.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: The blockchain to work with
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: The blockchain address to send the NFT to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the smart contract to build the NFT on
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        feeCurrency:
          type: string
          description: The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
        fee:
          $ref: '#/components/schemas/CustomFee'
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            will pay the fee for the transaction
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address to pay the transaction fee that was generated from the
            mnemonic
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
      required:
        - chain
        - to
        - url
        - feeCurrency
        - contractAddress
        - signatureId
        - tokenId
    MintNftKMSTron:
      type: object
      description: >-
        <p>The <code>MintNftKMSTron</code> schema lets you mint NFTs natively on
        TRON and sign the transaction with your signature ID.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      properties:
        chain:
          type: string
          example: TRON
          description: The blockchain to work with
          enum:
            - TRON
        to:
          maxLength: 34
          minLength: 34
          description: The blockchain address to send the NFT to
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        contractAddress:
          maxLength: 34
          minLength: 34
          description: The blockchain address of the smart contract to build the NFT on
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        feeLimit:
          type: number
          description: The maximum amount to be paid as the transaction fee (in TRX)
          example: 600
        from:
          maxLength: 34
          minLength: 34
          description: The blockchain address that will pay the fee for the transaction
          example: TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            will pay the fee for the transaction
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address to pay the transaction fee that was generated from the
            mnemonic
      required:
        - chain
        - from
        - to
        - url
        - feeLimit
        - contractAddress
        - signatureId
        - tokenId
    TransferNft:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - MATIC
            - KCS
            - ONE
            - KLAY
            - BSC
            - ZEN
        to:
          maxLength: 58
          minLength: 42
          description: Blockchain address to send NFT token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of the token.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 42
          minLength: 1
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 103
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - chain
        - contractAddress
        - tokenId
        - fromPrivateKey
    TransferNftAlgo:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        to:
          maxLength: 58
          minLength: 58
          description: The blockchain address to transfer the NFT to
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
          type: string
        contractAddress:
          description: The asset ID (the ID of the NFT)
          example: '100000'
          type: string
          maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 103
          example: >-
            72TCV5BRQPBMSAFPYO3CPWVDBYWNGAYNMTW5QHENOMQF7I6QLNMJWCJZ7A3V5YKD7QD6ZZPEHG2PV2ZVVEDDO6BCRGXWIL3DIUMSUCI
          minLength: 106
          description: The private key of the sender's blockchain address
        amount:
          description: >-
            (For <a
            href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
            target="_blank">fractional NFTs</a> only) The number of NFT
            fractions to transfer; if not set, defaults to 1, which means that
            one fraction of the NFT will be transferred
          example: 1
          default: 1
          minimum: 1
          type: number
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
      required:
        - to
        - chain
        - contractAddress
        - fromPrivateKey
    TransferNftAlgoExpress:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        to:
          maxLength: 58
          minLength: 58
          description: The blockchain address to transfer the NFT to
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
          type: string
        contractAddress:
          description: The asset ID (the ID of the NFT)
          example: '100000'
          type: string
          maxLength: 256
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
        amount:
          description: >-
            (For <a
            href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
            target="_blank">fractional NFTs</a> only) The number of NFT
            fractions to transfer; if not set, defaults to 1, which means that
            one fraction of the NFT will be transferred
          example: 1
          default: 1
          minimum: 0
          type: number
      required:
        - to
        - chain
        - contractAddress
    TransferNftSolana:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        from:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address to send the NFT from; this is the address
            that you used in the <code>to</code> parameter in the request body
            of the <a href="#operation/NftMintErc721">minting call</a>; from
            this address, the transaction fee will be paid
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        to:
          maxLength: 44
          minLength: 32
          description: The blockchain address to send the NFT to
          example: 9pSkqSG71Sb25ia9WBFhoeBYjp8dhUf7fRux9xrDq89b
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the NFT; this is the address from the
            <code>nftAddress</code> parameter returned in the response body of
            the <a href="#operation/NftMintErc721">minting call</a>
          example: 3tzudv5KaoqmieWiBUqzWokKEtTvx1wQMapVKeH7CHaq
          type: string
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad
          minLength: 128
          description: >-
            The private key of the blockchain address that you are sending the
            NFT from (the address that you specified in the <code>from</code>
            parameter)
        feePayer:
          description: >-
            Address on the Solana blockchain, from which the fee will be paid
            for transaction. Defaults to from.
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        feePayerPrivateKey:
          type: string
          maxLength: 87
          example: >-
            YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf
          minLength: 128
          description: Private key of the fee payer address.
      required:
        - to
        - from
        - chain
        - contractAddress
        - fromPrivateKey
    TransferNftAlgoKMS:
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        from:
          maxLength: 58
          minLength: 58
          description: The blockchain address to transfer the NFT from
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
          type: string
        to:
          maxLength: 58
          minLength: 58
          description: The blockchain address to transfer the NFT to
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
          type: string
        contractAddress:
          description: The asset ID (the ID of the NFT)
          example: '100000'
          type: string
          maxLength: 256
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the sender's blockchain
            address
        amount:
          description: >-
            (For <a
            href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
            target="_blank">fractional NFTs</a> only) The number of NFT
            fractions to transfer; if not set, defaults to 1, which means that
            one fraction of the NFT will be transferred
          example: 1
          default: 1
          type: number
          minimum: 0
      required:
        - to
        - chain
        - contractAddress
        - from
        - signatureId
    TransferNftSolanaKMS:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        from:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address to send the NFT from; this is the address
            that you used in the <code>to</code> parameter in the request body
            of the <a href="#operation/NftMintErc721">minting call</a>; from
            this address, the transaction fee will be paid
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        to:
          maxLength: 44
          minLength: 32
          description: The blockchain address to send the NFT to
          example: 9pSkqSG71Sb25ia9WBFhoeBYjp8dhUf7fRux9xrDq89b
          type: string
        contractAddress:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the NFT; this is the address from the
            <code>nftAddress</code> parameter returned in the response body of
            the <a href="#operation/NftMintErc721">minting call</a>
          example: 3tzudv5KaoqmieWiBUqzWokKEtTvx1wQMapVKeH7CHaq
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            you are sending the NFT from (the address that you specified in the
            <code>from</code> parameter)
        feePayer:
          description: Blockchain address to pay the fee for the transaction from
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        feePayerSignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key used for paying the gas costs in
            signing application. Defaults to the signatureId.
      required:
        - to
        - from
        - chain
        - contractAddress
        - signatureId
    DeployNft:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - MATIC
            - KCS
            - ONE
            - KLAY
            - BSC
            - ZEN
        name:
          description: Name of the NFT token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        symbol:
          description: Symbol of the NFT token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        fromPrivateKey:
          description: >-
            Private key of account address, from which gas for deployment of
            ERC721 will be paid. Private key, or signature Id must be present.
          type: string
          maxLength: 103
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
        publicMint:
          description: True if the contract is publicMint type. False by default.
          example: true
          type: boolean
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - name
        - chain
        - symbol
        - fromPrivateKey
    DeployNftKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - MATIC
            - KCS
            - ONE
            - KLAY
            - BSC
        name:
          description: Name of the NFT token
          example: My ERC721
          maxLength: 100
          minLength: 1
          type: string
        publicMint:
          description: True if the contract is publicMint type. False by default.
          example: true
          type: boolean
        symbol:
          description: Symbol of the NFT token
          example: ERC_SYMBOL
          maxLength: 30
          minLength: 1
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - name
        - chain
        - symbol
        - signatureId
    TransferNftKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - MATIC
            - KCS
            - ONE
            - KLAY
            - BSC
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send NFT token to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: ID of the token.
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - chain
        - contractAddress
        - signatureId
        - tokenId
    MintNft:
      description: >-
        <p>The <code>MintNft</code> schema lets you mint NFTs natively on BNB
        Smart Chain, Ethereum, Harmony, Klaytn, KuCoin Community Chain, Polygon
        and Horizen Eon and sign the transaction with your private key.<br/>For
        more information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - KCS
            - MATIC
            - ONE
            - ZEN
        to:
          maxLength: 42
          minLength: 42
          description: The blockchain address to send the NFT to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the smart contract to build the NFT on
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that will pay the fee for
            the transaction
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - chain
        - url
        - fromPrivateKey
        - tokenId
        - contractAddress
    MintNftMinter:
      description: >-
        <p>The <code>MintNftMinter</code> schema lets you mint NFTs on BNB Smart
        Chain, Celo, Ethereum, Harmony, Klaytn, Polygon and Horizen Eon using
        the <b>NTF minter</b>, a special blockchain address provided by Tatum
        that will cover the minting fees.<br/>For more information, see "Use
        your own smart contract to mint NFTs" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - CELO
            - ETH
            - KLAY
            - MATIC
            - ONE
            - ZEN
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the smart contract to build the NFT on
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        minter:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address of the Tatum NFT minter; this is the address
            that you added as an NFT minter to your NFT smart contract
          example: '0x49678AAB11E001eb3cB2cBD9aA96b36DC2461A94'
          type: string
        to:
          maxLength: 42
          minLength: 42
          description: The blockchain address to send the NFT to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
      required:
        - to
        - chain
        - url
        - minter
        - tokenId
        - contractAddress
    MintNftExpress:
      description: >-
        <p>The <code>MintNftExpress</code> schema lets you mint NFTs on BNB
        Smart Chain, Celo, Ethereum, Harmony, Klaytn, and Polygon using <b>NTF
        Express</b> with the pre-built smart contract provided by Tatum.<br/>For
        more information, see "Use the pre-built smart contract provided by
        Tatum to mint NFTs" in <a href="#operation/NftMintErc721">Mint an
        NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - CELO
            - ETH
            - KLAY
            - MATIC
            - ONE
        to:
          maxLength: 42
          minLength: 42
          description: The blockchain address to send the NFT to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
      required:
        - to
        - chain
        - url
    MintNftExpressAlgorand:
      description: >-
        <p>The <code>MintNftExpressAlgorand</code> schema lets you mint NFTs on
        Algorand using <b>NTF Express</b> with the pre-built smart contract
        provided by Tatum.<br/>For more information, see "Use the pre-built
        smart contract provided by Tatum to mint NFTs" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        name:
          description: The name of the NFT
          example: My Crazy NFT
          maxLength: 32
          minLength: 1
          type: string
        attr:
          type: object
          properties:
            assetUnit:
              description: The unit name of the NFT
              example: USDT
              type: string
              maxLength: 8
              minLength: 1
            clawback:
              description: >-
                The address of the clawback account that can claw back holdings
                of the NFT
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            manager:
              description: >-
                The address of the manager account that can manage the
                configuration of the NFT or burn it; specify this parameter if
                you want to be able to <a href="#operation/NftBurnErc721">burn
                the minted NFT</a> any time later
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            reserve:
              description: >-
                The address of the reserve account that holds the reserve
                (non-minted) units of the NFT
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            freeze:
              description: >-
                The address of the freeze account that is used to freeze
                holdings of the NFT
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            total:
              description: >-
                (For minting the NFT as a <a
                href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
                target="_blank">fractional NFT</a>) The number of fractions that
                the minted NFT should be divided into<br/>The number must be a
                power of 10 and greater that 1, for example, 10, 100,
                1000...<br/>If not set, the parameter defaults to 1, which means
                that one regular (not fractional) NFT will be minted.
              example: 10
              default: 1
              type: number
              minimum: 10
            decimals:
              description: >-
                (For minting the NFT as a <a
                href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
                target="_blank">fractional NFT</a>) The number of decimal places
                in a fraction of the minted NFT<br/>The number must be greater
                that 0 and equal to the logarithm in base 10 of the number of
                the fractions (see the <code>total</code> parameter); for
                example, if <code>total</code> is set to 10,
                <code>decimals</code> must be set to 1.<br/>If not set, the
                parameter defaults to 0, which means that one regular (not
                fractional) NFT will be minted.
              example: 1
              default: 0
              type: number
              minimum: 1
              maximum: 15
      required:
        - name
        - chain
        - url
    MintNftAlgorand:
      description: >-
        <p>The <code>MintNftAlgorand</code> schema lets you mint NFTs natively
        on Algorand and sign the transaction with your private key.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        name:
          description: The name of the NFT
          example: My Crazy NFT
          maxLength: 32
          minLength: 1
          type: string
        fromPrivateKey:
          type: string
          maxLength: 103
          example: >-
            EPD5VYFGXWNZ2PY4AQNPD3E3LMAXISKNMGR4IJ44YI74QL5AMNTAIJNQ6Q373RDANF2YERVFQY3C5CKK7VUJDJR4DT6EPP5HZQUPORQ
          minLength: 103
          description: >-
            The private key of the minting account; the transaction fee will be
            paid from this account
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
        attr:
          type: object
          properties:
            assetUnit:
              description: The unit name of the NFT
              example: USDT
              type: string
              maxLength: 8
              minLength: 1
            clawback:
              description: >-
                The address of the clawback account that can claw back holdings
                of the NFT
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            manager:
              description: >-
                The address of the manager account that can manage the
                configuration of the NFT or burn it; specify this parameter if
                you want to be able to <a href="#operation/NftBurnErc721">burn
                the minted NFT</a> any time later
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            reserve:
              description: >-
                The address of the reserve account that holds the reserve
                (non-minted) units of the NFT
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            freeze:
              description: >-
                The address of the freeze account that is used to freeze
                holdings of the NFT
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            total:
              description: >-
                (For minting the a <a
                href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
                target="_blank">fractional NFT</a>) The number of fractions that
                the minted NFT should be divided into<br/>The number must be a
                power of 10 and greater that 1, for example, 10, 100,
                1000...<br/>If not set, the parameter defaults to 1, which means
                that one regular (not fractional) NFT will be minted.
              example: 10
              default: 1
              type: number
              minimum: 10
            decimals:
              description: >-
                (For minting the NFT as a <a
                href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
                target="_blank">fractional NFT</a>) The number of decimal places
                in a fraction of the minted NFT<br/>The number must be greater
                that 0 and equal to the logarithm in base 10 of the number of
                the fractions (see the <code>total</code> parameter); for
                example, if <code>total</code> is set to 10,
                <code>decimals</code> must be set to 1.<br/>If not set, the
                parameter defaults to 0, which means that one regular (not
                fractional) NFT will be minted.
              example: 1
              default: 0
              type: number
              minimum: 1
              maximum: 15
      required:
        - name
        - chain
        - url
        - fromPrivateKey
    MintNftAlgorandKMS:
      description: >-
        <p>The <code>MintNftAlgorandKMS</code> schema lets you mint NFTs
        natively on Algorand and sign the transaction with your signature
        ID.<br/>For more information, see "Minting NFTs natively on a
        blockchain" in <a href="#operation/NftMintErc721">Mint an
        NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: ALGO
          description: The blockchain to work with
          enum:
            - ALGO
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        name:
          description: The name of the NFT
          example: My Crazy NFT
          maxLength: 32
          minLength: 1
          type: string
        from:
          description: The address of the minting account
          example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
          type: string
          maxLength: 58
          minLength: 58
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the minting account; the
            transaction fee will be paid from this account
        fee:
          description: The transaction fee in Algos
          type: string
          example: '0.001'
        attr:
          type: object
          properties:
            assetUnit:
              description: The unit name of the NFT
              example: USDT
              type: string
              maxLength: 8
              minLength: 1
            clawback:
              description: >-
                The address of the clawback account that can claw back holdings
                of the NFT
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            manager:
              description: >-
                The address of the manager account that can manage the
                configuration of the NFT or burn it; specify this parameter if
                you want to be able to <a href="#operation/NftBurnErc721">burn
                the minted NFT</a> any time later
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            reserve:
              description: >-
                The address of the reserve account that holds the reserve
                (non-minted) units of the NFT
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            freeze:
              description: >-
                The address of the freeze account that is used to freeze
                holdings of the NFT
              example: TMETT6BXL3QUH7AH5TS6IONU7LVTLKIGG54CFCNPMQXWGRIZFIESZBYWP4
              type: string
              maxLength: 58
              minLength: 58
            total:
              description: >-
                (For minting the NFT as a <a
                href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
                target="_blank">fractional NFT</a>) The number of fractions that
                the minted NFT should be divided into<br/>The number must be a
                power of 10 and greater that 1, for example, 10, 100,
                1000...<br/>If not set, the parameter defaults to 1, which means
                that one regular (not fractional) NFT will be minted.
              example: 10
              default: 1
              type: number
              minimum: 10
            decimals:
              description: >-
                (For minting the NFT as a <a
                href="https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts"
                target="_blank">fractional NFT</a>) The number of decimal places
                in a fraction of the minted NFT<br/>The number must be greater
                that 0 and equal to the logarithm in base 10 of the number of
                the fractions (see the <code>total</code> parameter); for
                example, if <code>total</code> is set to 10,
                <code>decimals</code> must be set to 1.<br/>If not set, the
                parameter defaults to 0, which means that one regular (not
                fractional) NFT will be minted.
              example: 1
              default: 0
              type: number
              minimum: 1
              maximum: 15
      required:
        - name
        - chain
        - url
        - from
        - signatureId
    MintNftExpressTezos:
      description: >-
        <p>The <code>MintNftExpressTezos</code> schema lets you mint NFTs on
        Tezos using <b>NTF Express</b>. You don't need to provide the private
        key and Tatum will cover the minting fees. The price of the mint
        operation will be deducted from your credits. In order to use the mint
        you need to first deploy the smartcontract using NFT Express</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: TEZOS
          description: The blockchain to work with
          enum:
            - TEZOS
        url:
          description: The URL pointing to the NFT metadata</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: The blockchain address of the smart contract to build the NFT on
          example: KT1PemxAAhNkjvt49gBtFHn4JEm49Z3HA8TX
          type: string
        ownerAddress:
          maxLength: 36
          minLength: 36
          description: The blockchain address to send the NFT to
          example: tz1f1nboqWEhZJHwZnxnokQ9QoTiT21qMZxG
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
      required:
        - tokenId
        - chain
        - url
        - ownerAddress
        - contractAddress
    MintNftTezos:
      description: >-
        <p>The <code>MintNftTezos</code> schema lets you mint NFTs on
        Tezos.<br/>For more information, see "Minting NFTs natively on a
        blockchain" in <a href="#operation/NftMintErc721">Mint an NFT</a>.<br/>
      type: object
      properties:
        chain:
          type: string
          example: TEZOS
          description: The blockchain to work with
          enum:
            - TEZOS
        url:
          description: The URL pointing to the NFT metadata</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        contractAddress:
          maxLength: 36
          minLength: 36
          description: The blockchain address of the smart contract to build the NFT on
          example: KT1PemxAAhNkjvt49gBtFHn4JEm49Z3HA8TX
          type: string
        ownerAddress:
          maxLength: 36
          minLength: 36
          description: The blockchain address to send the NFT to
          example: tz1f1nboqWEhZJHwZnxnokQ9QoTiT21qMZxG
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            edskRvJQqeNih91dkoRkTG1PWxV5AruYbtrkp5DKibL2iMkPGWBbdYp8jpsY3N3skCNrwf9socTv9Sstonkckc4jTb
          minLength: 64
          description: >-
            The private key of the blockchain address that will pay the fee for
            the transaction
      required:
        - tokenId
        - chain
        - url
        - ownerAddress
        - contractAddress
        - fromPrivateKey
    MintNftKMS:
      description: >-
        <p>The <code>MintNftKMS</code> schema lets you mint NFTs natively on BNB
        Smart Chain, Ethereum, Harmony, Klaytn, KuCoin Community Chain, and
        Polygon and sign the transaction with your signature ID.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - ETH
            - KLAY
            - KCS
            - MATIC
            - ONE
        to:
          maxLength: 42
          minLength: 42
          description: The blockchain address to send the NFT to
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the smart contract to build the NFT on
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        tokenId:
          description: The ID of the NFT
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        url:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 256
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            will pay the fee for the transaction
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address to pay the transaction fee that was generated from the
            mnemonic
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - chain
        - url
        - contractAddress
        - signatureId
        - tokenId
    MintNftSolana:
      type: object
      description: >-
        <p>The <code>MintNftSolana</code> schema lets you mint NFTs natively on
        Solana and sign the transaction with your private key.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        to:
          maxLength: 44
          minLength: 32
          description: The blockchain address to send the NFT to
          example: 9pSkqSG71Sb25ia9WBFhoeBYjp8dhUf7fRux9xrDq89b
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address that will pay the fee for the transaction
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad
          minLength: 64
          description: >-
            The private key of the blockchain address that will pay the fee for
            the transaction
        feePayer:
          description: >-
            Address on the Solana blockchain, from which the fee will be paid
            for transaction. Defaults to from.
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        feePayerPrivateKey:
          type: string
          maxLength: 87
          example: >-
            YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf
          minLength: 128
          description: Private key of the fee payer address.
        collectionVerifierPrivateKey:
          type: string
          maxLength: 128
          example: >-
            3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad
          minLength: 64
          description: >-
            The private key of the collection verifier (owner) who will verify
            the NFT in the NFT collection where the NFT is minted in. The
            blockchain address of this collection is specified in the
            <code>collection</code> parameter in the <code>metadata</code>
            section of the request body. To know more about Solana collections
            and verification, refer to the <a
            href="https://docs.metaplex.com/programs/token-metadata/certified-collections"
            target="_blank">Solana user documentation</a>.
        metadata:
          $ref: '#/components/schemas/SolanaNftMetadata'
      required:
        - to
        - chain
        - fromPrivateKey
        - from
        - metadata
    VerifySolanaNFT:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        nftAddress:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the NFT to verify
          example: CHw1Fy5YdbaaosLXrrxhuc3X3fpssMqDQm9XwJh9LPGe
          type: string
        collectionAddress:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the NFT collection where the NFT should be
            verified in. The collection must be a sized collection that was
            introduced in <a
            href="https://docs.metaplex.com/programs/token-metadata/changelog/v1.3"
            target="_blank">Version 1.3</a> of the Metaplex Token Metadata
            program.
          example: CHw1Fy5YdbaaosLXrrxhuc3X3fpssMqDQm9XwJh9LPGe
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the collection verifier on behalf of whom
            the transaction will be originated. The transaction fee will be paid
            from this address.
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        fromPrivateKey:
          type: string
          maxLength: 128
          example: >-
            3abc79a31093e4cfa4a724e94a44906cbbc3a32e2f75f985a28616676a5dbaf1de8d82a7e1d0561bb0e1b729c7a9b9b1708cf2803ad0ca928a332587ace391ad
          minLength: 64
          description: The private key of the collection verifier's address
        feePayer:
          description: >-
            Address on the Solana blockchain, from which the fee will be paid
            for transaction. Defaults to from.
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        feePayerPrivateKey:
          type: string
          maxLength: 87
          example: >-
            YdQ1iy2NYs93dtkHdz3ijDuhRJj6uXYAUZmixirCrgCsTMj42BN1Q1buYcGZaMxw5buk9VU5ogQ6zuzn8DMsGaf
          minLength: 128
          description: Private key of the fee payer address.
      required:
        - collectionAddress
        - chain
        - fromPrivateKey
        - from
        - nftAddress
    VerifySolanaNFTKMS:
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        nftAddress:
          maxLength: 44
          minLength: 32
          description: The blockchain address of the NFT to verify
          example: CHw1Fy5YdbaaosLXrrxhuc3X3fpssMqDQm9XwJh9LPGe
          type: string
        collectionAddress:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the NFT collection where the NFT should be
            verified in. The collection must be a sized collection that was
            introduced in <a
            href="https://docs.metaplex.com/programs/token-metadata/changelog/v1.3"
            target="_blank">Version 1.3</a> of the Metaplex Token Metadata
            program.
          example: CHw1Fy5YdbaaosLXrrxhuc3X3fpssMqDQm9XwJh9LPGe
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the collection verifier on behalf of whom
            the transaction will be originated. The transaction fee will be paid
            from this address.
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        feePayer:
          description: Blockchain address to pay the fee for the transaction from
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          maxLength: 44
          minLength: 32
          type: string
        feePayerSignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key used for paying the gas costs in
            signing application. Defaults to the signatureId.
      required:
        - collectionAddress
        - chain
        - signatureId
        - from
        - nftAddress
    MintNftExpressSolana:
      description: >-
        <p>The <code>MintNftExpressSolana</code> schema lets you mint NFTs on
        Solana using <b>NTF Express</b> with the pre-built smart contract
        provided by Tatum.<br/>For more information, see "Use the pre-built
        smart contract provided by Tatum to mint NFTs" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      type: object
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        to:
          maxLength: 44
          minLength: 32
          description: The blockchain address to send the NFT to
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        metadata:
          $ref: '#/components/schemas/SolanaNftExpressMetadata'
      required:
        - to
        - chain
        - metadata
    MintNftSolanaKMS:
      type: object
      description: >-
        <p>The <code>MintNftSolanaKMS</code> schema lets you mint NFTs natively
        on Solana and sign the transaction with your signature ID.<br/>For more
        information, see "Minting NFTs natively on a blockchain" in <a
        href="#operation/NftMintErc721">Mint an NFT</a>.</p><br/>
      properties:
        chain:
          type: string
          example: SOL
          description: The blockchain to work with
          enum:
            - SOL
        to:
          maxLength: 44
          minLength: 32
          description: The blockchain address to send the NFT to
          example: 9pSkqSG71Sb25ia9WBFhoeBYjp8dhUf7fRux9xrDq89b
          type: string
        from:
          maxLength: 44
          minLength: 32
          description: The blockchain address that will pay the fee for the transaction
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            will pay the fee for the transaction
        feePayer:
          description: >-
            Address on the Solana blockchain, from which the fee will be paid
            for transaction. Defaults to from.
          maxLength: 44
          minLength: 32
          example: BL4Xgn1jkuU4Yr3SQ4HG8cD5SBrsSk7BihKzkb5zTUfs
          type: string
        feePayerSignatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key used for paying the gas costs in
            signing application. Defaults to the signatureId.
        metadata:
          $ref: '#/components/schemas/SolanaNftMetadataKMS'
      required:
        - to
        - chain
        - signatureId
        - metadata
        - from
    SolanaNftMetadataCreator:
      type: object
      required:
        - address
        - verified
        - share
      properties:
        address:
          type: string
          description: The blockchain address of the NFT creator
          maxLength: 44
          minLength: 32
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
        verified:
          type: boolean
          description: >-
            If set to "true", the NFT creator was verified. Only the address
            whose private key was used during the minting of the NFT can be a
            verified creator. If you are minting the NFT using NFT Express, set
            this parameter to "false".
          example: true
        share:
          type: number
          description: The share to be sent to the NFT creator (in %)
          example: 100
    SolanaNftMetadata:
      type: object
      required:
        - name
        - symbol
        - uri
        - sellerFeeBasisPoints
      properties:
        name:
          type: string
          description: The name of the NFT
          example: My NFT
          maxLength: 32
        symbol:
          type: string
          description: The symbol or abbreviated name of the NFT
          example: NFT_SYMBOL
          maxLength: 10
        sellerFeeBasisPoints:
          type: number
          description: >-
            The royalty that will be paid to the authors of the minted NFT every
            time the NFT is transferred<br/>The royalty is calculated as a
            percentage of the NFT price. To set the royalty to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.<br/>To specify the NFT authors and
            their shares in the royalty, set the <code>creators</code>
            parameter.<br/>To disable the royalty for the NFT completely, set
            <code>sellerFeeBasisPoints</code> to <code>0</code> and do not set
            <code>creators</code>.
          example: 0
        uri:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 200
        collection:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the NFT collection where the NFT will be
            minted in. Specify the private key of the collection verifier in the
            <code>collectionVerifierPrivateKey</code> parameter of the request
            body to get the NFT verified in the collection after the NFT has
            been minted. To know more about Solana collections and verification,
            refer to the <a
            href="https://docs.metaplex.com/programs/token-metadata/certified-collections"
            target="_blank">Solana user documentation</a>.
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        mutable:
          type: boolean
          default: true
          description: >-
            Specifies whether the NFT metadata is mutable ("true") or immutable
            ("false"); if not set, defaults to "true"
        creators:
          type: array
          description: >-
            The blockchain addresses where the royalties will be sent every time
            the minted NFT is transferred
          items:
            $ref: '#/components/schemas/SolanaNftMetadataCreator'
    SolanaNftMetadataKMS:
      type: object
      required:
        - name
        - symbol
        - uri
        - sellerFeeBasisPoints
      properties:
        name:
          type: string
          description: The name of the NFT
          example: My NFT
          maxLength: 32
        symbol:
          type: string
          description: The symbol or abbreviated name of the NFT
          example: NFT_SYMBOL
          maxLength: 10
        sellerFeeBasisPoints:
          type: number
          description: >-
            The royalty that will be paid to the authors of the minted NFT every
            time the NFT is transferred<br/>The royalty is calculated as a
            percentage of the NFT price. To set the royalty to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.<br/>To specify the NFT authors and
            their shares in the royalty, set the <code>creators</code>
            parameter.<br/>To disable the royalty for the NFT completely, set
            <code>sellerFeeBasisPoints</code> to <code>0</code> and do not set
            <code>creators</code>.
          example: 0
        uri:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 200
        collection:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the NFT collection where the NFT will be
            minted in. The minted NFT will get verified in the collection on
            behalf of the blockchain address specified in the <code>from</code>
            parameter. To know more about Solana collections and verification,
            refer to the <a
            href="https://docs.metaplex.com/programs/token-metadata/certified-collections"
            target="_blank">Solana user documentation</a> and <a
            href="https://apidoc.tatum.io/tag/NFT-(ERC-721-or-compatible)#operation/NftVerifyInCollection"
            target="_blank">NFT verification API</a>.
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        mutable:
          type: boolean
          default: true
          description: >-
            Specifies whether the NFT metadata is mutable ("true") or immutable
            ("false"); if not set, defaults to "true"
        creators:
          type: array
          description: >-
            The blockchain addresses where the royalties will be sent every time
            the minted NFT is transferred
          items:
            $ref: '#/components/schemas/SolanaNftMetadataCreator'
    SolanaNftExpressMetadata:
      type: object
      required:
        - name
        - symbol
        - uri
        - sellerFeeBasisPoints
      properties:
        name:
          type: string
          description: The name of the NFT
          example: My NFT
          maxLength: 32
        symbol:
          type: string
          description: The symbol or abbreviated name of the NFT
          example: NFT_SYMBOL
          maxLength: 10
        sellerFeeBasisPoints:
          type: number
          description: >-
            The royalty that will be paid to the authors of the minted NFT every
            time the NFT is transferred<br/>The royalty is calculated as a
            percentage of the NFT price. To set the royalty to 1%, set this
            parameter to <code>100</code>; to set 10%, set this parameter to
            <code>1000</code>; to set 50%, set this parameter to
            <code>5000</code>, and so on.<br/>To specify the NFT authors and
            their shares in the royalty, set the <code>creators</code>
            parameter.<br/>To disable the royalty for the NFT completely, set
            <code>sellerFeeBasisPoints</code> to <code>0</code> and do not set
            <code>creators</code>.
          example: 0
        uri:
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example: https://my_token_data.com
          type: string
          maxLength: 200
        collection:
          maxLength: 44
          minLength: 32
          description: >-
            The blockchain address of the NFT collection where the NFT will be
            minted in. By default, the NFT is minted as not verified (is not
            considered a part of the collection). To verify the NFT in the
            collection, use the <a
            href="https://apidoc.tatum.io/tag/NFT-(ERC-721-or-compatible)#operation/NftVerifyInCollection"
            target="_blank">NFT verification API</a>. To know more about Solana
            collections and verification, refer to the <a
            href="https://docs.metaplex.com/programs/token-metadata/certified-collections"
            target="_blank">Solana user documentation</a>.
          example: FykfMwA9WNShzPJbbb9DNXsfgDgS3XZzWiFgrVXfWoPJ
          type: string
        mutable:
          type: boolean
          default: true
          description: >-
            Specifies whether the NFT metadata is mutable ("true") or immutable
            ("false"); if not set, defaults to "true"
        creators:
          type: array
          description: >-
            The blockchain addresses where the royalties will be sent every time
            the minted NFT is transferred
          items:
            $ref: '#/components/schemas/SolanaNftMetadataCreator'
    MintMultipleNft:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - MATIC
            - KCS
            - ONE
            - KLAY
            - BSC
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '123'
          items:
            type: string
            maxLength: 78
            example: '123'
            format: uint256
        url:
          type: array
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            Private key of sender address. Private key, or signature Id must be
            present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        erc20:
          type: string
          maxLength: 42
          minLength: 42
          description: The blockchain address of the custom fungible token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - chain
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
    MintMultipleNftMinter:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - MATIC
            - CELO
            - KCS
            - ONE
            - KLAY
            - BSC
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '123'
          items:
            type: string
            maxLength: 78
            example: '123'
            format: uint256
        minter:
          maxLength: 42
          minLength: 43
          description: >-
            Address of NFT minter, which will be used to mint the tokens. From
            this address, transaction fees will be deducted.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        url:
          type: array
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        feeCurrency:
          type: string
          description: (Celo only) The currency in which the transaction fee will be paid
          enum:
            - CELO
      required:
        - to
        - chain
        - url
        - contractAddress
        - minter
        - tokenId
    MintMultipleNftKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - MATIC
            - KCS
            - ONE
            - KLAY
            - BSC
        to:
          type: array
          description: Blockchain address to send NFT token to.
          example:
            - '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example:
            - '123'
          items:
            type: string
            maxLength: 78
            example: '123'
            format: uint256
        url:
          type: array
          description: >-
            The URL pointing to the NFT metadata; for more information, see <a
            href="https://eips.ethereum.org/EIPS/eip-721#specification"
            target="_blank">EIP-721</a>
          example:
            - https://my_token_data.com
          items:
            type: string
            maxLength: 256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of NFT token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            If signatureId is mnemonic-based, this is the index to the specific
            address from that mnemonic.
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            Identifier of the private key associated in signing application.
            Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        erc20:
          type: string
          maxLength: 42
          minLength: 42
          description: The blockchain address of the custom fungible token
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - chain
        - contractAddress
        - tokenId
        - url
        - signatureId
    BurnNft:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - MATIC
            - KCS
            - ONE
            - KLAY
            - BSC
            - ZEN
        tokenId:
          description: The ID of the NFT to burn
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 42
          minLength: 1
          description: The blockchain address of the NFT to burn
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 103
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address from which the fee will be
            deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - chain
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
    AddNftMinter:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - CELO
            - ETH
            - KLAY
            - KCS
            - MATIC
            - ONE
            - ZEN
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the NFT smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        minter:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address to add to the smart contract as an NFT
            minter<br/>To find the address of the Tatum NFT minter for your
            blockchain, see the table in "Use your own smart contract to mint
            NFTs" in <a href="#operation/NftMintErc721">Mint an
            NFT</a>.<br/>This address will cover your NFT minting fees. The
            number of credits equivalent to the fees will be then deducted from
            the credit allowance of your paid pricing plan.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2'
          minLength: 66
          description: >-
            The private key of the blockchain address that has priviledges to
            add an NFT minter to the NFT smart contract (the owner of the smart
            contract or a blockchain address that was granted such priviledges)
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
        feeCurrency:
          type: string
          description: (Celo only) The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - minter
        - chain
        - url
        - contractAddress
        - fromPrivateKey
    BurnNftKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - ETH
            - MATIC
            - KCS
            - ONE
            - KLAY
            - BSC
        tokenId:
          description: The ID of the NFT to burn
          type: string
          maxLength: 78
          example: '123'
          format: uint256
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the NFT to burn
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address to pay the transaction fee that was generated from the
            mnemonic
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address from
            which the fee will be deducted
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
      required:
        - to
        - chain
        - url
        - contractAddress
        - tokenId
        - signatureId
    AddNftMinterKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: The blockchain to work with
          enum:
            - BSC
            - CELO
            - ETH
            - KLAY
            - KCS
            - MATIC
            - ONE
        contractAddress:
          maxLength: 42
          minLength: 42
          description: The blockchain address of the NFT smart contract
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        minter:
          maxLength: 42
          minLength: 42
          description: >-
            The blockchain address to add to the smart contract as an NFT
            minter<br/>To find the address of the Tatum NFT minter for your
            blockchain, see the table in "Use your own smart contract to mint
            NFTs" in <a href="#operation/NftMintErc721">Mint an
            NFT</a>.<br/>This address will cover your NFT minting fees. The
            number of credits equivalent to the fees will be then deducted from
            the credit allowance of your paid pricing plan.
          example: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85'
          type: string
        signatureId:
          type: string
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: >-
            The KMS identifier of the private key of the blockchain address that
            has priviledges to add an NFT minter to the NFT smart contract (the
            owner of the smart contract or a blockchain address that was granted
            such priviledges)
        index:
          type: number
          minimum: 0
          description: >-
            (Only if the signature ID is mnemonic-based) The index of the
            address that holds the NFT smart contract that was generated from
            the mnemonic
        nonce:
          type: number
          minimum: 0
          description: >-
            The nonce to be set to the transaction; if not present, the last
            known nonce will be used
        fee:
          $ref: '#/components/schemas/CustomFee'
        feeCurrency:
          type: string
          description: (Celo only) The currency in which the transaction fee will be paid
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - url
        - contractAddress
        - minter
        - signatureId
    NftGetBalanceSc:
      type: object
      properties:
        data:
          type: array
          description: The array returning the ID of the NFTs
          items:
            description: The ID of the NFT
            type: string
            maxLength: 78
            example: '123'
            format: uint256
    NftGetBalanceScAlgo:
      type: object
      properties:
        data:
          type: array
          required:
            - contractAddress
            - balances
          items:
            type: object
            properties:
              contractAddress:
                type: string
                description: The asset ID (the ID of the NFT)
                example: '116227380'
              balances:
                type: array
                description: >-
                  The array returning <code>1</code> to indicate that the NFT
                  with the specified ID exists
                items:
                  type: string
                  example: '1'
              metadata:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      description: The URL pointing to the NFT metadata; may not be present
                      example: ipfs://QmXFpaS3S7CkLZvihLFA9JbawKdqhjg8dJeDkPntmkD2Pc
                      type: string
    BalanceItem:
      oneOf:
        - $ref: '#/components/schemas/NativeTokenBalance'
        - $ref: '#/components/schemas/NftBalance'
        - $ref: '#/components/schemas/FungibleTokenBalance'
    NativeTokenBalance:
      type: object
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
        type:
          $ref: '#/components/schemas/TokenType'
          example: native
        address:
          type: string
        balance:
          type: string
      required:
        - chain
        - type
        - address
        - balance
    NftBalance:
      type: object
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
        type:
          $ref: '#/components/schemas/TokenType'
          example: nft
        address:
          type: string
        balance:
          type: string
        tokenAddress:
          type: string
        tokenId:
          type: string
        metadataURI:
          type: string
        lastUpdatedBlockNumber:
          type: integer
        metadata:
          type: object
      required:
        - chain
        - type
        - address
        - balance
        - tokenAddress
        - lastUpdatedBlockNumber
    FungibleTokenBalance:
      type: object
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
        type:
          $ref: '#/components/schemas/TokenType'
          example: fungible
        address:
          type: string
        balance:
          type: string
        tokenAddress:
          type: string
        lastUpdatedBlockNumber:
          type: integer
      required:
        - chain
        - type
        - address
        - balance
        - tokenAddress
        - lastUpdatedBlockNumber
    TokenType:
      type: string
      enum:
        - native
        - fungible
        - nft
        - multitoken
      description: Enum representing the type of token.
      example: nft
    BlockItem:
      type: object
      properties:
        blockNumber:
          type: integer
          description: The block number in the blockchain.
          example: 10
        blockTimestamp:
          type: integer
          format: int64
          description: >-
            The timestamp when the block was created, in milliseconds since Unix
            epoch.
          example: 1598671520000
        hash:
          type: string
          description: The hash of the block.
          example: '0xec1a2d906f34e1981b2b1a15dbe5e10cf640e8b4b27dc056ebb65c0409b5a9af'
        eventIngestedSize:
          type: integer
          description: The number of ingested events in the block.
          example: 0
        nftIngestedSize:
          type: integer
          description: The number of ingested NFTs in the block.
          example: 0
        txHashes:
          type: array
          items:
            type: string
          description: The array of transaction hashes included in the block.
          example:
            - '0x19eaae1f7bdd28605f4175d7e87c9de68431bf76e85a262e268252a84bfc3984'
    Event:
      type: object
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
        address:
          type: string
          description: The address associated with the event.
        blockNumber:
          type: integer
          description: The block number where the event was recorded.
        timestamp:
          type: integer
          description: The timestamp of the event in UNIX format.
        decoded:
          oneOf:
            - $ref: '#/components/schemas/FungibleTransfer'
            - $ref: '#/components/schemas/StablecoinTransfer'
            - $ref: '#/components/schemas/NftTransfer'
            - $ref: '#/components/schemas/MultitokenTransferSingle'
            - $ref: '#/components/schemas/MultitokenTransferBatch'
            - $ref: '#/components/schemas/UniswapTradeV2'
            - $ref: '#/components/schemas/UniswapTradeV3'
          description: The decoded event data based on the given models.
        raw:
          $ref: '#/components/schemas/RawData'
        txHash:
          type: string
          description: The transaction hash related to the event.
        txIndex:
          type: integer
          description: The transaction index within the block.
        logIndex:
          type: integer
          description: The log index within the transaction.
    DecodedDataCommon:
      type: object
      description: Common properties for decoded data events.
      properties:
        label:
          type: string
          description: The label of the event.
          example: Transfer
        type:
          type: string
          description: The type of the event.
          example: FungibleTransfer
        subtype:
          type: string
          description: The subtype of the event.
          example: ERC20
        from:
          type: string
          description: The sender address of the event.
          example: '0x742d35cc6634c0532925a3b844bc454e4438f44e'
        to:
          type: string
          description: The receiver address of the event.
          example: '0xb7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a'
    FungibleTransfer:
      allOf:
        - $ref: '#/components/schemas/DecodedDataCommon'
        - type: object
          properties:
            decimals:
              type: integer
              description: The number of decimal places for the transferred token.
              example: 18
            value:
              type: string
              description: The value of the transferred token.
              example: '1000'
    StablecoinTransfer:
      allOf:
        - $ref: '#/components/schemas/FungibleTransfer'
        - type: object
          properties:
            stablecoin:
              type: string
              description: The address of the stablecoin being transferred.
              example: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
    NftTransfer:
      allOf:
        - $ref: '#/components/schemas/DecodedDataCommon'
        - type: object
          properties:
            tokenId:
              type: string
              description: The unique identifier of the NFT being transferred.
              example: '101'
    MultitokenTransfer:
      allOf:
        - $ref: '#/components/schemas/DecodedDataCommon'
        - type: object
          properties:
            operator:
              type: string
              description: The address of the operator initiating the transfer.
              example: '0x742d35cc6634c0532925a3b844bc454e4438f44e'
    MultitokenTransferSingle:
      allOf:
        - $ref: '#/components/schemas/MultitokenTransfer'
        - type: object
          properties:
            multitokenId:
              type: string
              description: >-
                The unique identifier of the single multitoken being
                transferred.
              example: '1'
            multitokenValue:
              type: string
              description: The value of the single multitoken being transferred.
              example: '100'
    MultitokenTransferBatch:
      allOf:
        - $ref: '#/components/schemas/MultitokenTransfer'
        - type: object
          properties:
            multitokenIds:
              type: array
              items:
                type: string
              description: The unique identifiers of the multitokens being transferred.
              example:
                - '1'
                - '2'
                - '3'
            multitokenValues:
              type: array
              items:
                type: string
              description: The values of the multitokens being transferred.
              example:
                - '100'
                - '200'
                - '300'
    UniswapTrade:
      allOf:
        - $ref: '#/components/schemas/DecodedDataCommon'
        - type: object
          properties:
            token0:
              type: string
              description: The address of the first token involved in the trade.
              example: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
            token1:
              type: string
              description: The address of the second token involved in the trade.
              example: '0x6b175474e89094c44da98b954eedeac495271d0f'
            partiallyRaw:
              type: boolean
              description: Indicates whether the trade data is partially raw or not.
              example: false
    UniswapTradeV2:
      allOf:
        - $ref: '#/components/schemas/UniswapTrade'
        - type: object
          properties:
            amount0In:
              type: string
              description: The input amount of the first token in the trade.
              example: '0.5'
            amount1In:
              type: string
              description: The input amount of the second token in the trade.
              example: '0.0'
            amount0Out:
              type: string
              description: The output amount of the first token in the trade.
              example: '0.0'
            amount1Out:
              type: string
              description: The output amount of the second token in the trade.
              example: '1.0'
    UniswapTradeV3:
      allOf:
        - $ref: '#/components/schemas/UniswapTrade'
        - type: object
          properties:
            amount0:
              type: string
              description: The net amount of the first token involved in the trade.
              example: '0.5'
            amount1:
              type: string
              description: The net amount of the second token involved in the trade.
              example: '1.0'
            sqrtPriceX96:
              type: string
              description: The square root price of the trading pair scaled by 2^96.
              example: '79228162514264337593543950336'
            liquidity:
              type: string
              description: The liquidity of the trading pair at the time of the trade.
              example: '1000'
            tick:
              type: integer
              description: The tick index of the Uniswap V3 pool at the time of the trade.
              example: 1000
    RawData:
      type: object
      description: Raw data associated with the event, including topics and data.
      required:
        - topic_0
      properties:
        topic_0:
          type: string
          description: The first topic of the event, if present.
          example: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        topic_1:
          type: string
          description: The second topic of the event, if present.
          example: '0x000000000000000000000000742d35cc6634c0532925a3b844bc454e4438f44e'
        topic_2:
          type: string
          description: The third topic of the event, if present.
          example: '0x000000000000000000000000b7d49e5aa39ff1e5d1b33286c3a8e5515b6a4e1a'
        topic_3:
          type: string
          description: The fourth topic of the event, if present.
          example: ''
        data:
          type: string
          description: The data associated with the event, if present.
          example: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000'
    TxData:
      type: object
      properties:
        chain:
          $ref: '#/components/schemas/ChainEnum'
        hash:
          type: string
          description: The transaction hash.
          example: '0x549447710026cef714da21fb29cbfae1f689bd3246f2fa0a5081149c4aeb3bb3'
        address:
          type: string
          description: The address involved in the transaction.
          example: '0xdef1c0ded9bec7f1a1670819833240f027b25eff'
        counterAddress:
          type: string
          description: The counter address involved in the transaction (optional).
          example: '0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852'
        tokenAddress:
          type: string
          description: The token address involved in the transaction (optional).
          example: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
        tokenId:
          type: string
          description: The ID of the token involved in the transaction (optional).
          example: 33
        blockNumber:
          type: number
          description: The block number in which the transaction occurred.
          example: 16819465
        transactionIndex:
          type: number
          description: The transaction index within the block.
          example: 84
        transactionType:
          $ref: '#/components/schemas/TxType'
        transactionSubtype:
          $ref: '#/components/schemas/TxSubtype'
        amount:
          type: string
          description: The amount transferred in the transaction.
          example: 0.9909237063720822
        timestamp:
          type: number
          description: The timestamp when the transaction occurred.
          example: 1678715303000
    TxType:
      type: string
      description: The type of the transaction.
      enum:
        - fungible
        - nft
        - multitoken
        - native
    TxSubtype:
      type: string
      description: The subtype of the transaction.
      enum:
        - incoming
        - outgoing
        - zero-transfer
    FungibleInfo:
      type: object
      properties:
        symbol:
          type: string
          description: The symbol of the fungible token.
          example: USDC
        name:
          type: string
          description: The full name of the fungible token.
          example: USD Coin
        supply:
          type: string
          description: The total supply of the fungible token.
          example: '1000000000'
        decimals:
          type: number
          description: The number of decimal places for the fungible token.
          example: 6
        tokenType:
          type: string
          description: The type of the token (e.g., ERC20, BEP20).
          example: ERC20
        cap:
          type: string
          description: The maximum supply cap of the fungible token.
          example: '2000000000'
    FungibleInfoTezos:
      type: object
      properties:
        symbol:
          type: string
          description: The symbol of the fungible token.
          example: USDC
        name:
          type: string
          description: The full name of the fungible token.
          example: USD Coin
        description:
          type: string
          description: The describtion of the fungible token.
          example: USD Coin
        supply:
          type: string
          description: The total supply of the fungible token.
          example: '1000000000'
        decimals:
          type: number
          description: The number of decimal places for the fungible token.
          example: 6
        tokenType:
          type: string
          description: The type of the token (e.g., fungible, nft).
          example: fungible
    NftInfo:
      type: object
      properties:
        symbol:
          type: string
          description: The symbol of the NFT collection.
          example: ART
        name:
          type: string
          description: The full name of the NFT collection.
          example: Art Collection
        supply:
          type: string
          description: The total supply of the NFT collection.
          example: '5000'
        tokenType:
          type: string
          description: The type of the token (e.g., ERC721, ERC1155).
          example: ERC721
    NftInfoTezos:
      type: object
      properties:
        name:
          type: string
          description: The full name of the NFT collection.
          example: Art Collection
        description:
          type: string
          description: The total supply of the NFT collection.
          example: '5000'
        tokenType:
          type: string
          description: The type of the token (e.g., ERC721, ERC1155).
          example: ERC721
        contractMetadata:
          type: object
          description: Additional information about the contract
    MultitokenInfo:
      type: object
      properties:
        symbol:
          type: string
          description: The symbol of the multitoken collection.
          example: GAME
        name:
          type: string
          description: The full name of the multitoken collection.
          example: Game Assets
        tokenType:
          type: string
          description: The type of the token (e.g., ERC1155).
          example: ERC1155
    NftTokenInfo:
      type: object
      properties:
        symbol:
          type: string
          description: The symbol of the NFT token.
          example: ART
        name:
          type: string
          description: The name of the NFT token.
          example: Mona Lisa
        metadata:
          type: object
          description: The metadata associated with the NFT token.
          example:
            artist: Leonardo da Vinci
            year: 1503
        metadataURI:
          type: string
          description: The URI of the metadata associated with the NFT token.
          example: https://example.com/metadata/123
        tokenType:
          type: string
          description: The type of the token (e.g., ERC721, ERC1155).
          example: ERC721
    Token:
      type: object
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
        tokenId:
          $ref: '#/components/schemas/TokenId'
        tokenAddress:
          $ref: '#/components/schemas/TokenAddress'
        tokenType:
          $ref: '#/components/schemas/TokenType'
        metadataURI:
          $ref: '#/components/schemas/NftMetadataURI'
        metadata:
          $ref: '#/components/schemas/NftMetadata'
    TokenTezos:
      type: object
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
        tokenId:
          $ref: '#/components/schemas/TokenId'
        tokenAddress:
          $ref: '#/components/schemas/TokenAddress'
        tokenType:
          $ref: '#/components/schemas/TokenType'
        creator:
          type: string
          description: Address of the token creator.
          example: tz1hkNPg5jQ66pJpZH2boiF5AnbAcd1dt5KS
        name:
          type: string
          description: Name of the token.
          example: My token 1
    Chain:
      type: string
      description: Name of the chain.
      example: ethereum
    ChainEnum:
      type: string
      example: ethereum
      enum:
        - ethereum
        - ethereum-sepolia
        - celo
        - celo-testnet
        - bsc
        - bsc-testnet
        - polygon
        - polygon-mumbai
        - eon
        - chiliz
    ChainEnumExtended:
      type: string
      example: ethereum
      enum:
        - ethereum
        - ethereum-sepolia
        - celo
        - celo-testnet
        - bsc
        - bsc-testnet
        - polygon
        - polygon-mumbai
        - tezos
        - eon
        - chiliz
    ChainUtxoEnum:
      type: string
      example: bitcoin
      enum:
        - bitcoin
        - bitcoin-testnet
        - litecoin
        - litecoin-testnet
        - doge
        - doge-testnet
        - cardano
        - cardano-preprod
    TokenId:
      type: string
      description: ID of the token.
      maxLength: 78
      example: '3'
      format: uint256
    TokenIds:
      type: string
      description: IDs of the token.
      maxLength: 78
      example: 3,4
      format: uint256
    TokenAddress:
      type: string
      description: Contract address of the token.
      example: '0x524cab2ec69124574082676e6f654a18df49a048'
    ExcludeMetadata:
      type: boolean
      example: false
    NftMetadataURI:
      type: string
      description: >
        Metadata URL of the token. This data doesn't have to be present.

        The safest way to obtain them in that case is from the NFT
        Contract.tokenURI() method call.
      example: ipfs://QmTDcCdt3yb6mZitzWBmQr65AW6Wska295Dg9nbEYpSUDR/3
    NftMetadata:
      type: object
      description: >
        Metadata scheme obtained from the url. This data don't have to be
        present.

        The safest way to obtain them in that case is from the NFT
        Contract.tokenURI() method call.
      example:
        image: ipfs://QmamEqaaVttv9AvfgM4Wa7d9Ettonep1NBQSDCtM7THUSX
        attributes:
          - trait_type: Background
            value: Club Exterior
          - trait_type: Fur
            value: Radioactive
          - trait_type: Back
            value: Beer Kegs
          - trait_type: Mouth
            value: Goofball
          - trait_type: Eyes
            value: Closed
    BlockNumber:
      type: number
      example: 16499510
      minimum: 0
    BlockNumberTo:
      type: number
      example: 16779230
      minimum: 0
    PageSize:
      type: number
      example: 10
      minimum: 1
      maximum: 50
    Cursor:
      type: string
      description: >
        Cursor pagination, used to get next page or previous page of results.
        The size of result is defined by the `pageSize` parameter. 

        The cursor is a base64 encoded string, user can get the value from a
        response in the `nextPage` or `prevPage` field. 

        If the nextPage or prevPage fields are not present in the response body,
        pagination is usually available with the `offset` and `pageSize`
        parameters. 
      example: MzYxNTQ3MHwyNDV8cHJldg==
    Offset:
      type: number
      example: 0
  securitySchemes:
    X-API-Key:
      type: apiKey
      name: x-api-key
      in: header
      description: >
        The **API key** represents your [pricing plan](https://tatum.io/pricing)
        and defines how many API calls 

        you can make per second and what the total number of API calls per month
        is available for you.


        One API key must be used by only one person.


        Choose one of the following authentication methods:


        * **Provide the API key in each API call.**

          To obtain the API key, [create a Tatum account](https://dashboard.tatum.io/sign-up). Once you are logged in,
          you are automatically assigned the Free plan.

          With the Free plan:
          * You get two API keys, one tied to the testnet of a blockchain and the other to the mainnet.
          * You can make up to five API calls per second.
          * The number of API calls per month is not limited.

          When making an API call, provide the appropriate API key (testnet or mainnet) as either an HTTP header
          or a path parameter of the API call.

          If you ever need your API keys, you can find them in [your Tatum account](https://dashboard.tatum.io/).

          For more information about the Free plan and paid plans, refer to [this article](https://docs.tatum.io/payments/plans-and-pricing).

        * **Get an auto-generated API key attached to API calls.**

          Make an API call without any API key provided. The API key will be generated and tied to your IP address.
          This API key is stored within the Tatum platform and is automatically attached to all your API calls.

          With the auto-generated API key:
          * You can make up to five API calls per second.
          * You get 10,000,000 credits to spend on API calls within a month.

            The number of credits is reset on the first day of a month. The unused credits from the current month are not
            rolled over to the next month.

          These limits are applied to both the testnet and mainnet.

          By default, API calls with the auto-generated API key are executed against the mainnet.
          To make an API call to the testnet, add the `type` query parameter set to `testnet` to the endpoint URL,
          for example:

          `https://api.tatum.io/v3/ledger/account?type=testnet`
